{"version":3,"file":"index.esm.js","sources":["../src/util.ts","../src/chain.ts","../src/network.ts","../src/index.ts"],"sourcesContent":["//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { TxParams } from '@zilliqa-js/account';\nimport {\n  RPCResponse,\n  TransactionError,\n  TransactionObj,\n} from '@zilliqa-js/core';\nimport { toChecksumAddress } from '@zilliqa-js/crypto';\nimport { BN, Long } from '@zilliqa-js/util';\n\nexport function toTxParams(\n  response: RPCResponse<TransactionObj, never>,\n): TxParams {\n  const {\n    toAddr,\n    senderPubKey,\n    gasPrice,\n    gasLimit,\n    nonce,\n    amount,\n    receipt,\n    version,\n    code,\n    data,\n    ...rest\n  } = <TransactionObj>response.result;\n\n  const msg = receipt.errors\n    ? Object.keys(receipt.errors).reduce((acc, depth) => {\n        const errorMsgList = receipt.errors[depth].map(\n          (num: number) => TransactionError[num],\n        );\n        return { ...acc, [depth]: errorMsgList };\n      }, {})\n    : {};\n\n  return {\n    ...rest,\n    version: parseInt(version, 10),\n    toAddr: toChecksumAddress(toAddr),\n    pubKey: senderPubKey.replace('0x', ''),\n    gasPrice: new BN(gasPrice),\n    gasLimit: Long.fromString(gasLimit, 10),\n    amount: new BN(amount),\n    nonce: parseInt(nonce, 10),\n    code,\n    data,\n    receipt: {\n      ...receipt,\n      accepted: receipt.accepted,\n      errors: msg,\n      cumulative_gas: parseInt(receipt.cumulative_gas, 10),\n    },\n  };\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Transaction, util, Wallet } from '@zilliqa-js/account';\nimport { fromBech32Address } from '@zilliqa-js/crypto';\nimport { validation } from '@zilliqa-js/util';\nimport {\n  BlockchainInfo,\n  BlockList,\n  DsBlockObj,\n  GET_TX_ATTEMPTS,\n  TransactionStatusObj,\n  Provider,\n  RPCMethod,\n  RPCResponse,\n  ShardingStructure,\n  sign,\n  TransactionObj,\n  MinerInfo,\n  TxBlockObj,\n  TxList,\n  ZilliqaModule,\n} from '@zilliqa-js/core';\n\nimport { toTxParams } from './util';\n\nconst isBlockNumber = (blockNum: number) =>\n  Number.isFinite(blockNum) && Number.isInteger(blockNum) && blockNum >= 0;\n\nexport class Blockchain implements ZilliqaModule {\n  signer: Wallet;\n  provider: Provider;\n  pendingErrorMap: { [key: number]: string } = {\n    0: 'Transaction not found',\n    1: 'Pending - Dispatched',\n    2: 'Pending - Soft-confirmed (awaiting Tx block generation)',\n    4: 'Pending - Nonce is higher than expected',\n    5: 'Pending - Microblock gas limit exceeded',\n    6: 'Pending - Consensus failure in network',\n    3: 'Confirmed',\n    10: 'Rejected - Transaction caused math error',\n    11: 'Rejected - Scilla invocation error',\n    12: 'Rejected - Contract account initialization error',\n    13: 'Rejected - Invalid source account',\n    14: 'Rejected - Gas limit higher than shard gas limit',\n    15: 'Rejected - Unknown transaction type',\n    16: 'Rejected - Transaction sent to wrong shard',\n    17: 'Rejected - Contract & source account cross-shard issue',\n    18: 'Rejected - Code size exceeded limit',\n    19: 'Rejected - Transaction verification failed',\n    20: 'Rejected - Gas limit too low',\n    21: 'Rejected - Insufficient balance',\n    22: 'Rejected - Insufficient gas to invoke Scilla checker',\n    23: 'Rejected - Duplicate transaction exists',\n    24: 'Rejected - Transaction with same nonce but same/higher gas price exists',\n    25: 'Rejected - Invalid destination address',\n    26: 'Rejected - Failed to add contract account to state',\n    27: 'Rejected - Nonce is lower than expected',\n    255: 'Rejected - Internal error',\n  };\n\n  transactionStatusMap: { [key: number]: { [key: number]: string } } = {\n    0: { 0: 'Transaction not found', 1: ' Pending - Dispatched' },\n    1: {\n      2: 'Pending - Soft-confirmed (awaiting Tx block generation)',\n      4: 'Pending - Nonce is higher than expected',\n      5: 'Pending - Microblock gas limit exceeded',\n      6: 'Pending - Consensus failure in network',\n    },\n    2: {\n      3: 'Confirmed',\n      10: 'Rejected - Transaction caused math error',\n      11: 'Rejected - Scilla invocation error',\n      12: 'Rejected - Contract account initialization error',\n      13: 'Rejected - Invalid source account',\n      14: 'Rejected - Gas limit higher than shard gas limit',\n      15: 'Rejected - Unknown transaction type',\n      16: 'Rejected - Transaction sent to wrong shard',\n      17: 'Rejected - Contract & source account cross-shard issue',\n      18: 'Rejected - Code size exceeded limit',\n      19: 'Rejected - Transaction verification failed',\n      20: 'Rejected - Gas limit too low',\n      21: 'Rejected - Insufficient balance',\n      22: 'Rejected - Insufficient gas to invoke Scilla checker',\n      23: 'Rejected - Duplicate transaction exists',\n      24: 'Rejected - Transaction with higher gas price exists',\n      25: 'Rejected - Invalid destination address',\n      26: 'Rejected - Failed to add contract account to state',\n      27: 'Rejected - Nonce is lower than expected',\n      255: 'Rejected - Internal error',\n    },\n  };\n\n  constructor(provider: Provider, signer: Wallet) {\n    this.provider = provider;\n    this.provider.middleware.request.use(\n      util.formatOutgoingTx,\n      RPCMethod.CreateTransaction,\n    );\n    this.signer = signer;\n  }\n\n  getBlockChainInfo(): Promise<RPCResponse<BlockchainInfo, string>> {\n    return this.provider.send(RPCMethod.GetBlockchainInfo);\n  }\n\n  getShardingStructure(): Promise<RPCResponse<ShardingStructure, string>> {\n    return this.provider.send(RPCMethod.GetShardingStructure);\n  }\n\n  // Gets details of a Directory Service block by block number.\n  getDSBlock(blockNum: number): Promise<RPCResponse<DsBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetDSBlock, blockNum.toString());\n  }\n\n  // Gets details of the most recent Directory Service block.\n  getLatestDSBlock(): Promise<RPCResponse<DsBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetLatestDSBlock);\n  }\n\n  // Gets the number of DS blocks that the network has processed.\n  getNumDSBlocks(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumDSBlocks);\n  }\n\n  // Gets the average rate of DS blocks processed per second\n  getDSBlockRate(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetDSBlockRate);\n  }\n\n  // Gets a paginated list of up to 10 Directory Service (DS) blocks\n  // and their block hashes for a specified page.\n  getDSBlockListing(max: number): Promise<RPCResponse<BlockList, string>> {\n    return this.provider.send(RPCMethod.DSBlockListing, max);\n  }\n\n  // Gets details of a Transaction block by block number.\n  getTxBlock(blockNum: number): Promise<RPCResponse<TxBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetTxBlock, blockNum.toString());\n  }\n\n  // Gets details of the most recent Transaction block.\n  getLatestTxBlock(): Promise<RPCResponse<TxBlockObj, string>> {\n    return this.provider.send(RPCMethod.GetLatestTxBlock);\n  }\n\n  // Gets the total number of TxBlocks.\n  getNumTxBlocks(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTxBlocks);\n  }\n\n  // Gets the average number of Tx blocks per second.\n  getTxBlockRate(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetTxBlockRate);\n  }\n\n  // Get a paginated list of Transaction blocks.\n  getTxBlockListing(max: number): Promise<RPCResponse<BlockList, string>> {\n    return this.provider.send(RPCMethod.TxBlockListing, max);\n  }\n\n  // Gets the number of transactions processed by the network so far.\n  getNumTransactions(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTransactions);\n  }\n\n  // Gets the number of transactions processed per second\n  getTransactionRate(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetTransactionRate);\n  }\n\n  // Gets the current Tx Epoch.\n  getCurrentMiniEpoch(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetCurrentMiniEpoch);\n  }\n\n  // Gets the current DS Epoch.\n  getCurrentDSEpoch(): Promise<RPCResponse<any, string>> {\n    return this.provider.send(RPCMethod.GetCurrentDSEpoch);\n  }\n\n  // Gets shard difficulty for previous PoW round\n  getPrevDifficulty(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetPrevDifficulty);\n  }\n\n  // Gets DS difficulty for previous PoW round\n  getPrevDSDifficulty(): Promise<RPCResponse<number, string>> {\n    return this.provider.send(RPCMethod.GetPrevDSDifficulty);\n  }\n\n  // Returns the total supply (ZIL) of coins in the network.\n  getTotalCoinSupply(): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetTotalCoinSupply);\n  }\n\n  // Returns the mining nodes (i.e., the members of the DS committee and shards)\n  // at the specified DS block.\n  getMinerInfo(dsBlockNumber: string): Promise<RPCResponse<MinerInfo, any>> {\n    return this.provider.send(RPCMethod.GetMinerInfo, dsBlockNumber);\n  }\n\n  // Creates a transaction and polls the lookup node for a transaction receipt.\n  @sign\n  async createTransaction(\n    tx: Transaction,\n    maxAttempts: number = GET_TX_ATTEMPTS,\n    interval: number = 1000,\n    blockConfirm: boolean = false,\n  ): Promise<Transaction> {\n    try {\n      const response = await this.provider.send(RPCMethod.CreateTransaction, {\n        ...tx.txParams,\n        priority: tx.toDS,\n      });\n\n      if (response.error) {\n        throw response.error;\n      }\n      if (blockConfirm) {\n        return tx.blockConfirm(response.result.TranID, maxAttempts, interval);\n      }\n      return tx.confirm(response.result.TranID, maxAttempts, interval);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // used together with signed batch\n  // this method waits for each txn to confirm\n  // see @createBatchTransactionWithoutConfirm for transactions without confirmation\n  async createBatchTransaction(\n    signedTxList: Transaction[],\n    maxAttempts: number = GET_TX_ATTEMPTS,\n    interval: number = 1000,\n    blockConfirm: boolean = false,\n  ): Promise<Transaction[]> {\n    try {\n      const txParamsList = [];\n      for (const signedTx of signedTxList) {\n        if (signedTx.txParams.signature === undefined) {\n          throw new Error('The transaction is not signed.');\n        }\n        txParamsList.push({\n          ...signedTx.txParams,\n          priority: signedTx.toDS,\n        });\n      }\n\n      const response = await this.provider.sendBatch(\n        RPCMethod.CreateTransaction,\n        txParamsList,\n      );\n\n      if (response.error) {\n        throw response.error;\n      }\n\n      // retrieve batch result\n      const batchResults = [];\n      for (let i = 0; i < signedTxList.length; i++) {\n        const tx = signedTxList[i];\n        const txRes = response.batch_result[i];\n\n        if (blockConfirm) {\n          batchResults.push(\n            await tx.blockConfirm(txRes.result.TranID, maxAttempts, interval),\n          );\n        } else {\n          batchResults.push(\n            await tx.confirm(txRes.result.TranID, maxAttempts, interval),\n          );\n        }\n      }\n      return batchResults;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // Create a transaction by using a exist signed transaction payload\n  // This payload may come form some offline signing software like ledger\n  // Currently we haven't supported convert a singed transaction back to transaction param, so we won't perform\n  // confirm logic here.\n  async createTransactionRaw(payload: string): Promise<string> {\n    try {\n      const tx = JSON.parse(payload);\n      const response = await this.provider.send(\n        RPCMethod.CreateTransaction,\n        tx,\n      );\n      if (response.error) {\n        throw response.error;\n      }\n      return response.result.TranID;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  @sign\n  async createTransactionWithoutConfirm(tx: Transaction): Promise<Transaction> {\n    try {\n      const response = await this.provider.send(RPCMethod.CreateTransaction, {\n        ...tx.txParams,\n        priority: tx.toDS,\n      });\n      if (response.error) {\n        throw response.error;\n      }\n      tx.id = response.result.TranID;\n      return tx;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // used together with signed batch\n  async createBatchTransactionWithoutConfirm(\n    signedTxList: Transaction[],\n  ): Promise<Transaction[]> {\n    try {\n      const txParamsList = [];\n      for (const signedTx of signedTxList) {\n        if (signedTx.txParams.signature === undefined) {\n          throw new Error('The transaction is not signed.');\n        }\n        txParamsList.push({\n          ...signedTx.txParams,\n          priority: signedTx.toDS,\n        });\n      }\n\n      const response = await this.provider.sendBatch(\n        RPCMethod.CreateTransaction,\n        txParamsList,\n      );\n\n      if (response.error) {\n        throw response.error;\n      }\n\n      const batchResults = [];\n      for (let i = 0; i < signedTxList.length; i++) {\n        const tx = signedTxList[i];\n        const txRes = response.batch_result[i];\n        tx.id = txRes.result.TranID;\n        batchResults.push(tx);\n      }\n      return batchResults;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // Returns the details of a specified Transaction.\n  async getTransaction(txHash: string): Promise<Transaction> {\n    try {\n      const response = await this.provider.send<TransactionObj>(\n        RPCMethod.GetTransaction,\n        txHash.replace('0x', ''),\n      );\n\n      if (response.error) {\n        return Promise.reject(response.error);\n      }\n\n      return response.result.receipt.success\n        ? Transaction.confirm(toTxParams(response), this.provider)\n        : Transaction.reject(toTxParams(response), this.provider);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // Returns the status of a specified transaction.\n  async getTransactionStatus(txHash: string): Promise<TransactionStatusObj> {\n    try {\n      const response = await this.provider.send<TransactionStatusObj>(\n        RPCMethod.GetTransactionStatus,\n        txHash.replace('0x', ''),\n      );\n      if (response.error) {\n        return Promise.reject(response.error);\n      }\n\n      const modificationState = response.result.modificationState;\n      const status = response.result.status;\n      response.result.statusMessage =\n        this.transactionStatusMap[modificationState][status];\n      return response.result;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // Gets a list of recent transactions\n  getRecentTransactions(): Promise<RPCResponse<TxList, never>> {\n    return this.provider.send(RPCMethod.GetRecentTransactions);\n  }\n\n  // Returns the validated transactions included\n  // within a specified final transaction block as an array of\n  // length i, where i is the number of shards plus the DS committee.\n  getTransactionsForTxBlock(\n    txBlock: number,\n  ): Promise<RPCResponse<string[][], string>> {\n    return this.provider.send(\n      RPCMethod.GetTransactionsForTxBlock,\n      txBlock.toString(),\n    );\n  }\n\n  // returns the transactions in batches (or pages) of 2,500.\n  // This API behaves similar to GetTransactionsForTxBlock\n  getTransactionsForTxBlockEx(\n    txBlock: number,\n  ): Promise<RPCResponse<any, string>> {\n    if (!isBlockNumber(txBlock)) {\n      throw new Error('invalid txBlock');\n    }\n    return this.provider.send(\n      RPCMethod.GetTransactionsForTxBlockEx,\n      txBlock.toString(),\n    );\n  }\n\n  // Returns the validated transactions (in verbose form)\n  // included within a specified final transaction block.\n  getTxnBodiesForTxBlock(\n    txBlock: number,\n  ): Promise<RPCResponse<TransactionObj[], string>> {\n    return this.provider.send(\n      RPCMethod.GetTxnBodiesForTxBlock,\n      txBlock.toString(),\n    );\n  }\n\n  // Returns the transactions in batches (or pages) of 2,500\n  // This API behaves similar to GetTxBodiesForTxBlock\n  getTxnBodiesForTxBlockEx(txBlock: number): Promise<RPCResponse<any, string>> {\n    if (!isBlockNumber(txBlock)) {\n      throw new Error('invalid txBlock');\n    }\n    return this.provider.send(\n      RPCMethod.GetTxnBodiesForTxBlockEx,\n      txBlock.toString(),\n    );\n  }\n\n  // Gets the number of transactions procesed for a given Tx Epoch.\n  getNumTxnsTxEpoch(epoch: number): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTxnsTxEpoch, epoch);\n  }\n\n  // Gets the number of transactions procesed for a given DS Epoch.\n  getNumTxnsDSEpoch(epoch: number): Promise<RPCResponse<string, string>> {\n    return this.provider.send(RPCMethod.GetNumTxnsDSEpoch, epoch);\n  }\n\n  // Gets the numeric minimum gas price.\n  getMinimumGasPrice() {\n    return this.provider.send<string, string>(RPCMethod.GetMinimumGasPrice);\n  }\n\n  // Gets the balance of an account by address.\n  getBalance(addr: string): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetBalance,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  // Returns the Scilla code associated with a smart contract address\n  getSmartContractCode(\n    addr: string,\n  ): Promise<RPCResponse<{ code: string }, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContractCode,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  // Returns the initialization (immutable) parameters of\n  // a given smart contract, represented in a JSON format.\n  getSmartContractInit(addr: string): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContractInit,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  // Retrieves the entire state of a smart contract.\n  getSmartContractState(addr: string): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContractState,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  // Queries the contract state, filtered by the variable names.\n  getSmartContractSubState(\n    addr: string,\n    variableName: string,\n    indices?: string[],\n  ): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    if (!variableName) {\n      throw new Error('Variable name required');\n    }\n\n    return this.provider.send(\n      RPCMethod.GetSmartContractSubState,\n      address.replace('0x', '').toLowerCase(),\n      variableName,\n      indices === undefined ? [] : indices,\n    );\n  }\n\n  // Queries the contract state using batch rpc.\n  getSmartContractSubStateBatch(reqs: any[]): Promise<RPCResponse<any, any>> {\n    return this.provider.sendBatch(RPCMethod.GetSmartContractSubState, reqs);\n  }\n\n  getSmartContracts(addr: string): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(addr) ? fromBech32Address(addr) : addr;\n    return this.provider.send(\n      RPCMethod.GetSmartContracts,\n      address.replace('0x', '').toLowerCase(),\n    );\n  }\n\n  getContractAddressFromTransactionID(\n    txHash: string,\n  ): Promise<RPCResponse<string, string>> {\n    return this.provider.send(\n      RPCMethod.GetContractAddressFromTransactionID,\n      txHash,\n    );\n  }\n\n  // Returns the state proof for the corresponding TxBlock for a smart contract.\n  getStateProof(\n    contractAddress: string,\n    sha256Hash: string,\n    txBlock: number | string,\n  ): Promise<RPCResponse<any, string>> {\n    const address = validation.isBech32(contractAddress)\n      ? fromBech32Address(contractAddress)\n      : contractAddress;\n\n    const isLatestStr = txBlock === 'latest';\n    const isValid = isLatestStr || isBlockNumber(Number(txBlock));\n    if (!isValid) {\n      throw new Error('invalid txBlock');\n    }\n\n    return this.provider.send(\n      RPCMethod.GetStateProof,\n      address.replace('0x', '').toLowerCase(),\n      sha256Hash,\n      txBlock.toString(),\n    );\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Provider, ZilliqaModule } from '@zilliqa-js/core';\nimport { Wallet } from '@zilliqa-js/account';\n\nconst enum NetworkMethods {\n  GetClientVersion = 'GetClientVersion',\n  GetNetworkId = 'GetNetworkId',\n  GetProtocolVersion = 'GetProtocolVersion',\n}\n\nexport class Network implements ZilliqaModule {\n  provider: Provider;\n  signer: Wallet;\n\n  constructor(provider: Provider, signer: Wallet) {\n    this.provider = provider;\n    this.signer = signer;\n  }\n\n  getClientVersion(): Promise<any> {\n    return this.provider.send(NetworkMethods.GetClientVersion);\n  }\n\n  GetNetworkId(): Promise<any> {\n    return this.provider.send(NetworkMethods.GetNetworkId);\n  }\n\n  GetProtocolVersion(blockNum: number): Promise<any> {\n    return this.provider.send(NetworkMethods.GetProtocolVersion);\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nexport { Blockchain } from './chain';\nexport { Network } from './network';\n"],"names":[],"mappings":"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"}