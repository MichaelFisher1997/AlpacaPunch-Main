{"version":3,"file":"index.umd.js","sources":["../src/types.ts","../src/contract.ts","../src/factory.ts","../src/index.ts"],"sourcesContent":["//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Omit } from 'utility-types';\nimport { TxParams } from '@zilliqa-js/account';\n\nexport enum ContractStatus {\n  Deployed,\n  Rejected,\n  Initialised,\n}\n\nexport type DeployParams = Omit<\n  TxParams,\n  'toAddr' | 'amount' | 'code' | 'data' | 'receipt' | 'signature'\n>;\n\nexport type CallParams = Omit<\n  TxParams,\n  'toAddr' | 'data' | 'code' | 'receipt' | 'signature'\n>;\n\nexport interface ContractObj {\n  address: string;\n  abi: ABI;\n  init: any;\n  state: any;\n}\n\nexport interface Transition {\n  vname: string;\n  params: Field[];\n}\n\n/**\n * Interface for ABI returned by scilla-checker\n */\nexport interface ABI {\n  scilla_major_version: number;\n  vname: string;\n  fields: Field[];\n  params: Field[];\n  transitions: Transition[];\n}\n\nexport interface Field {\n  vname: string;\n  type: string;\n  depth?: number;\n}\n\nexport interface Value {\n  vname: string;\n  type: string;\n  value: string | ADTValue;\n}\n\ninterface ADTValue {\n  constructor: string;\n  argtypes: string[];\n  arguments: Value[];\n}\n\nexport type Param = Value;\nexport type TransitionParam = Value;\n\nexport type Init = Value[];\n\n// Post v5.0.0 upgrade\nexport type State = any;\n\nexport interface TransitionPayload {\n  // the name of the transtion to be called\n  _tag: string;\n  // amount to send to the contract, if any\n  _amount: string;\n  params: Value[];\n}\n\n// RPC Error Responses\nexport type DeployError =\n  | 'Code is empty and To addr is null'\n  | 'To Addr is null'\n  | 'Non - contract address called'\n  | 'Could not create Transaction'\n  | 'Unable to process';\n\nexport interface DeploySuccess {\n  TranID: string;\n  Info: string;\n  ContractAddress?: string;\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Transaction, TxStatus, Wallet } from '@zilliqa-js/account';\nimport { GET_TX_ATTEMPTS, Provider, RPCMethod, sign } from '@zilliqa-js/core';\nimport {\n  fromBech32Address,\n  isValidChecksumAddress,\n  normaliseAddress,\n  toChecksumAddress,\n} from '@zilliqa-js/crypto';\nimport { BN, validation } from '@zilliqa-js/util';\nimport { Blockchain } from '@zilliqa-js/blockchain';\n\nimport { Contracts } from './factory';\nimport {\n  ABI,\n  CallParams,\n  ContractStatus,\n  DeployError,\n  DeployParams,\n  DeploySuccess,\n  Init,\n  State,\n  Value,\n} from './types';\n\nconst NIL_ADDRESS = '0x0000000000000000000000000000000000000000';\n\nexport class Contract {\n  factory: Contracts;\n  provider: Provider;\n  signer: Wallet;\n  blockchain: Blockchain;\n\n  init: Init;\n  abi?: ABI;\n  state?: State;\n  address?: string;\n  code?: string;\n  status: ContractStatus;\n  error?: any;\n\n  constructor(\n    factory: Contracts,\n    code?: string,\n    abi?: ABI,\n    address?: string,\n    init?: any,\n    state?: any,\n    checkAddr: boolean = false,\n  ) {\n    this.factory = factory;\n    this.provider = factory.provider;\n    this.signer = factory.signer;\n    this.blockchain = new Blockchain(factory.provider, factory.signer);\n\n    // assume that we are accessing an existing contract\n    if (address) {\n      this.abi = abi;\n      if (checkAddr) {\n        this.address = normaliseAddress(address);\n      } else {\n        if (validation.isBech32(address)) {\n          this.address = fromBech32Address(address);\n        } else if (isValidChecksumAddress(address)) {\n          this.address = address;\n        } else {\n          this.address = toChecksumAddress(address);\n        }\n      }\n      this.init = init;\n      this.state = state;\n      this.status = ContractStatus.Deployed;\n    } else {\n      // assume we're deploying\n      this.abi = abi;\n      this.code = code;\n      this.init = init;\n      this.status = ContractStatus.Initialised;\n    }\n  }\n\n  /**\n   * isInitialised\n   *\n   * Returns true if the contract has not been deployed\n   *\n   * @returns {boolean}\n   */\n  isInitialised(): boolean {\n    return this.status === ContractStatus.Initialised;\n  }\n\n  /**\n   * isDeployed\n   *\n   * Returns true if the contract is deployed\n   *\n   * @returns {boolean}\n   */\n  isDeployed(): boolean {\n    return this.status === ContractStatus.Deployed;\n  }\n\n  /**\n   * isRejected\n   *\n   * Returns true if an attempt to deploy the contract was made, but the\n   * underlying transaction was unsuccessful.\n   *\n   * @returns {boolean}\n   */\n  isRejected(): boolean {\n    return this.status === ContractStatus.Rejected;\n  }\n\n  @sign\n  async prepareTx(\n    tx: Transaction,\n    attempts: number = GET_TX_ATTEMPTS,\n    interval: number = 1000,\n    isDeploy: boolean,\n  ): Promise<Transaction> {\n    const response = await this.provider.send<DeploySuccess, DeployError>(\n      RPCMethod.CreateTransaction,\n      { ...tx.txParams, priority: tx.toDS },\n    );\n\n    if (response.error) {\n      this.address = undefined;\n      this.error = response.error;\n      return tx.setStatus(TxStatus.Rejected);\n    }\n\n    if (isDeploy) {\n      this.address = response.result.ContractAddress\n        ? toChecksumAddress(response.result.ContractAddress)\n        : undefined;\n    }\n\n    return tx.confirm(response.result.TranID, attempts, interval);\n  }\n\n  @sign\n  async prepare(tx: Transaction): Promise<string | undefined> {\n    const response = await this.provider.send<DeploySuccess, DeployError>(\n      RPCMethod.CreateTransaction,\n      { ...tx.txParams, priority: tx.toDS },\n    );\n\n    if (response.error || !response.result) {\n      this.address = undefined;\n      this.error = response.error;\n      tx.setStatus(TxStatus.Rejected);\n    } else {\n      tx.id = response.result.TranID;\n      tx.setStatus(TxStatus.Pending);\n      return response.result.ContractAddress;\n    }\n  }\n\n  /**\n   * deploy smart contract with no confirm\n   * @param params\n   * @param toDs\n   */\n  async deployWithoutConfirm(\n    params: DeployParams,\n    toDs: boolean = false,\n  ): Promise<[Transaction, Contract]> {\n    if (!this.code || !this.init) {\n      throw new Error(\n        'Cannot deploy without code or initialisation parameters.',\n      );\n    }\n    const tx = new Transaction(\n      {\n        ...params,\n        toAddr: NIL_ADDRESS,\n        amount: new BN(0),\n        code: this.code,\n        data: JSON.stringify(this.init).replace(/\\\\\"/g, '\"'),\n      },\n      this.provider,\n      TxStatus.Initialised,\n      toDs,\n    );\n\n    try {\n      this.address = await this.prepare(tx);\n      this.status =\n        this.address === undefined\n          ? ContractStatus.Rejected\n          : ContractStatus.Initialised;\n      return [tx, this];\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * deploy\n   *\n   * @param {DeployParams} params\n   * @returns {Promise<Contract>}\n   */\n  async deploy(\n    params: DeployParams,\n    attempts: number = 33,\n    interval: number = 1000,\n    toDs: boolean = false,\n  ): Promise<[Transaction, Contract]> {\n    if (!this.code || !this.init) {\n      throw new Error(\n        'Cannot deploy without code or initialisation parameters.',\n      );\n    }\n\n    try {\n      const tx = await this.prepareTx(\n        new Transaction(\n          {\n            ...params,\n            toAddr: NIL_ADDRESS,\n            amount: new BN(0),\n            code: this.code,\n            data: JSON.stringify(this.init).replace(/\\\\\"/g, '\"'),\n          },\n          this.provider,\n          TxStatus.Initialised,\n          toDs,\n        ),\n        attempts,\n        interval,\n        true,\n      );\n\n      if (tx.isRejected()) {\n        this.status = ContractStatus.Rejected;\n        this.address = undefined;\n        return [tx, this];\n      }\n\n      this.status = ContractStatus.Deployed;\n      this.address =\n        this.address && isValidChecksumAddress(this.address)\n          ? this.address\n          : Contracts.getAddressForContract(tx);\n\n      return [tx, this];\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async callWithoutConfirm(\n    transition: string,\n    args: Value[],\n    params: CallParams,\n    toDs: boolean = false,\n  ): Promise<Transaction> {\n    const data = {\n      _tag: transition,\n      params: args,\n    };\n\n    if (this.error) {\n      return Promise.reject(this.error);\n    }\n\n    if (!this.address) {\n      return Promise.reject('Contract has not been deployed!');\n    }\n\n    const tx = new Transaction(\n      {\n        ...params,\n        toAddr: this.address,\n        data: JSON.stringify(data),\n      },\n      this.provider,\n      TxStatus.Initialised,\n      toDs,\n    );\n\n    try {\n      await this.prepare(tx);\n      return tx;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * call\n   *\n   * @param {string} transition\n   * @param {any} params\n   * @returns {Promise<Transaction>}\n   */\n  async call(\n    transition: string,\n    args: Value[],\n    params: CallParams,\n    attempts: number = 33,\n    interval: number = 1000,\n    toDs: boolean = false,\n  ): Promise<Transaction> {\n    const data = {\n      _tag: transition,\n      params: args,\n    };\n\n    if (this.error) {\n      return Promise.reject(this.error);\n    }\n\n    if (!this.address) {\n      return Promise.reject('Contract has not been deployed!');\n    }\n\n    try {\n      return await this.prepareTx(\n        new Transaction(\n          {\n            ...params,\n            toAddr: this.address,\n            data: JSON.stringify(data),\n          },\n          this.provider,\n          TxStatus.Initialised,\n          toDs,\n        ),\n        attempts,\n        interval,\n        false,\n      );\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  async getState(): Promise<State> {\n    if (this.status !== ContractStatus.Deployed) {\n      return Promise.resolve([]);\n    }\n\n    if (!this.address) {\n      throw new Error('Cannot get state of uninitialised contract');\n    }\n\n    const response = await this.blockchain.getSmartContractState(this.address);\n\n    return response.result;\n  }\n\n  async getSubState(variableName: string, indices?: string[]): Promise<State> {\n    if (this.status !== ContractStatus.Deployed) {\n      return Promise.resolve([]);\n    }\n\n    if (!this.address) {\n      throw new Error('Cannot get state of uninitialised contract');\n    }\n\n    if (!variableName) {\n      throw new Error('Variable name required');\n    }\n\n    const response = await this.blockchain.getSmartContractSubState(\n      this.address,\n      variableName,\n      indices,\n    );\n\n    return response.result;\n  }\n\n  async getInit(): Promise<State> {\n    if (this.status !== ContractStatus.Deployed) {\n      return Promise.resolve([]);\n    }\n\n    if (!this.address) {\n      throw new Error('Cannot get state of uninitialised contract');\n    }\n\n    const response = await this.blockchain.getSmartContractInit(this.address);\n\n    return response.result;\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport hash from 'hash.js';\n\nimport { Wallet, Transaction, util } from '@zilliqa-js/account';\nimport { toChecksumAddress } from '@zilliqa-js/crypto';\nimport { Provider, RPCMethod, ZilliqaModule } from '@zilliqa-js/core';\nimport { bytes } from '@zilliqa-js/util';\n\nimport { Contract } from './contract';\nimport { ABI, Init, State } from './types';\n\n/**\n * Contracts\n *\n * Unlike most zilliqa-js modules, `Contracts` is a factory class.\n * As a result, individual `Contract` instances are instead obtained by\n * calling `Contracts.at` (for an already-deployed contract) and\n * `Contracts.new` (to deploy a new contract).\n */\nexport class Contracts implements ZilliqaModule {\n  /**\n   * getAddressForContract\n   *\n   * @static\n   * @param {Transaction} tx - transaction used to create the contract\n   * @returns {string} - the contract address\n   */\n  static getAddressForContract(tx: Transaction): string {\n    // always subtract 1 from the tx nonce, as contract addresses are computed\n    // based on the nonce in the global state.\n    const nonce = tx.txParams.nonce ? tx.txParams.nonce - 1 : 0;\n\n    return toChecksumAddress(\n      hash\n        .sha256()\n        .update(tx.senderAddress.replace('0x', '').toLowerCase(), 'hex')\n        .update(bytes.intToHexArray(nonce, 16).join(''), 'hex')\n        .digest('hex')\n        .slice(24),\n    );\n  }\n\n  provider: Provider;\n  signer: Wallet;\n\n  constructor(provider: Provider, signer: Wallet) {\n    this.provider = provider;\n    this.provider.middleware.request.use(\n      util.formatOutgoingTx,\n      RPCMethod.CreateTransaction,\n    );\n    this.signer = signer;\n  }\n\n  at(\n    address: string,\n    abi?: ABI,\n    code?: string,\n    init?: Init,\n    state?: State,\n  ): Contract {\n    return new Contract(this, code, abi, address, init, state);\n  }\n\n  atBech32(\n    address: string,\n    abi?: ABI,\n    code?: string,\n    init?: Init,\n    state?: State,\n  ): Contract {\n    return new Contract(this, code, abi, address, init, state, true);\n  }\n\n  new(code: string, init: Init, abi?: ABI): Contract {\n    return new Contract(this, code, abi, undefined, init);\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nexport * from './factory';\nexport * from './contract';\nexport * from './types';\n"],"names":["ContractStatus","Blockchain","normaliseAddress","validation","fromBech32Address","isValidChecksumAddress","toChecksumAddress","RPCMethod","TxStatus","Transaction","BN","__decorate","sign","util","bytes"],"mappings":";;;;;;;;EAAA;AACA,EAmBA,WAAY,cAAc;MACxB,2DAAQ,CAAA;MACR,2DAAQ,CAAA;MACR,iEAAW,CAAA;EACb,CAAC,EAJWA,sBAAc,KAAdA,sBAAc,QAIzB;;ECxBD;AACA,EAwCA,IAAM,WAAW,GAAG,4CAA4C,CAAC;AAEjE;MAcE,kBACE,OAAkB,EAClB,IAAa,EACb,GAAS,EACT,OAAgB,EAChB,IAAU,EACV,KAAW,EACX,SAA0B;UAA1B,0BAAA,EAAA,iBAA0B;UAE1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;UACvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;UACjC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;UAC7B,IAAI,CAAC,UAAU,GAAG,IAAIC,qBAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;;UAGnE,IAAI,OAAO,EAAE;cACX,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;cACf,IAAI,SAAS,EAAE;kBACb,IAAI,CAAC,OAAO,GAAGC,uBAAgB,CAAC,OAAO,CAAC,CAAC;eAC1C;mBAAM;kBACL,IAAIC,eAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;sBAChC,IAAI,CAAC,OAAO,GAAGC,wBAAiB,CAAC,OAAO,CAAC,CAAC;mBAC3C;uBAAM,IAAIC,6BAAsB,CAAC,OAAO,CAAC,EAAE;sBAC1C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;mBACxB;uBAAM;sBACL,IAAI,CAAC,OAAO,GAAGC,wBAAiB,CAAC,OAAO,CAAC,CAAC;mBAC3C;eACF;cACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;cACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;cACnB,IAAI,CAAC,MAAM,GAAGN,sBAAc,CAAC,QAAQ,CAAC;WACvC;eAAM;;cAEL,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;cACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;cACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;cACjB,IAAI,CAAC,MAAM,GAAGA,sBAAc,CAAC,WAAW,CAAC;WAC1C;OACF;;;;;;;;MASD,gCAAa,GAAb;UACE,OAAO,IAAI,CAAC,MAAM,KAAKA,sBAAc,CAAC,WAAW,CAAC;OACnD;;;;;;;;MASD,6BAAU,GAAV;UACE,OAAO,IAAI,CAAC,MAAM,KAAKA,sBAAc,CAAC,QAAQ,CAAC;OAChD;;;;;;;;;MAUD,6BAAU,GAAV;UACE,OAAO,IAAI,CAAC,MAAM,KAAKA,sBAAc,CAAC,QAAQ,CAAC;OAChD;MAGK,4BAAS,GAAf,UACE,EAAe,EACf,QAAkC,EAClC,QAAuB,EACvB,QAAiB;UAFjB,yBAAA,EAAA,+BAAkC;UAClC,yBAAA,EAAA,eAAuB;;;;;8BAGN,qBAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvCO,cAAS,CAAC,iBAAiB,oCACtB,EAAE,CAAC,QAAQ,KAAE,QAAQ,EAAE,EAAE,CAAC,IAAI,IACpC,EAAA;;0BAHK,QAAQ,GAAG,SAGhB;0BAED,IAAI,QAAQ,CAAC,KAAK,EAAE;8BAClB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;8BACzB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;8BAC5B,sBAAO,EAAE,CAAC,SAAS,CAACC,gBAAQ,CAAC,QAAQ,CAAC,EAAC;2BACxC;0BAED,IAAI,QAAQ,EAAE;8BACZ,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,eAAe;oCAC1CF,wBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC;oCAClD,SAAS,CAAC;2BACf;0BAED,sBAAO,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAAC;;;;OAC/D;MAGK,0BAAO,GAAb,UAAc,EAAe;;;;;8BACV,qBAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvCC,cAAS,CAAC,iBAAiB,oCACtB,EAAE,CAAC,QAAQ,KAAE,QAAQ,EAAE,EAAE,CAAC,IAAI,IACpC,EAAA;;0BAHK,QAAQ,GAAG,SAGhB;0BAED,IAAI,QAAQ,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;8BACtC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;8BACzB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;8BAC5B,EAAE,CAAC,SAAS,CAACC,gBAAQ,CAAC,QAAQ,CAAC,CAAC;2BACjC;+BAAM;8BACL,EAAE,CAAC,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;8BAC/B,EAAE,CAAC,SAAS,CAACA,gBAAQ,CAAC,OAAO,CAAC,CAAC;8BAC/B,sBAAO,QAAQ,CAAC,MAAM,CAAC,eAAe,EAAC;2BACxC;;;;;OACF;;;;;;MAOK,uCAAoB,GAA1B,UACE,MAAoB,EACpB,IAAqB;UAArB,qBAAA,EAAA,YAAqB;;;;;;0BAErB,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;8BAC5B,MAAM,IAAI,KAAK,CACb,0DAA0D,CAC3D,CAAC;2BACH;0BACK,EAAE,GAAG,IAAIC,mBAAW,mCAEnB,MAAM,KACT,MAAM,EAAE,WAAW,EACnB,MAAM,EAAE,IAAIC,OAAE,CAAC,CAAC,CAAC,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,KAEtD,IAAI,CAAC,QAAQ,EACbF,gBAAQ,CAAC,WAAW,EACpB,IAAI,CACL,CAAC;;;;0BAGA,KAAA,IAAI,CAAA;0BAAW,qBAAM,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAA;;0BAArC,GAAK,OAAO,GAAG,SAAsB,CAAC;0BACtC,IAAI,CAAC,MAAM;8BACT,IAAI,CAAC,OAAO,KAAK,SAAS;oCACtBR,sBAAc,CAAC,QAAQ;oCACvBA,sBAAc,CAAC,WAAW,CAAC;0BACjC,sBAAO,CAAC,EAAE,EAAE,IAAI,CAAC,EAAC;;;0BAElB,MAAM,KAAG,CAAC;;;;;OAEb;;;;;;;MAQK,yBAAM,GAAZ,UACE,MAAoB,EACpB,QAAqB,EACrB,QAAuB,EACvB,IAAqB;UAFrB,yBAAA,EAAA,aAAqB;UACrB,yBAAA,EAAA,eAAuB;UACvB,qBAAA,EAAA,YAAqB;;;;;;0BAErB,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;8BAC5B,MAAM,IAAI,KAAK,CACb,0DAA0D,CAC3D,CAAC;2BACH;;;;0BAGY,qBAAM,IAAI,CAAC,SAAS,CAC7B,IAAIS,mBAAW,mCAER,MAAM,KACT,MAAM,EAAE,WAAW,EACnB,MAAM,EAAE,IAAIC,OAAE,CAAC,CAAC,CAAC,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,KAEtD,IAAI,CAAC,QAAQ,EACbF,gBAAQ,CAAC,WAAW,EACpB,IAAI,CACL,EACD,QAAQ,EACR,QAAQ,EACR,IAAI,CACL,EAAA;;0BAhBK,EAAE,GAAG,SAgBV;0BAED,IAAI,EAAE,CAAC,UAAU,EAAE,EAAE;8BACnB,IAAI,CAAC,MAAM,GAAGR,sBAAc,CAAC,QAAQ,CAAC;8BACtC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;8BACzB,sBAAO,CAAC,EAAE,EAAE,IAAI,CAAC,EAAC;2BACnB;0BAED,IAAI,CAAC,MAAM,GAAGA,sBAAc,CAAC,QAAQ,CAAC;0BACtC,IAAI,CAAC,OAAO;8BACV,IAAI,CAAC,OAAO,IAAIK,6BAAsB,CAAC,IAAI,CAAC,OAAO,CAAC;oCAChD,IAAI,CAAC,OAAO;oCACZ,SAAS,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;0BAE1C,sBAAO,CAAC,EAAE,EAAE,IAAI,CAAC,EAAC;;;0BAElB,MAAM,KAAG,CAAC;;;;;OAEb;MAEK,qCAAkB,GAAxB,UACE,UAAkB,EAClB,IAAa,EACb,MAAkB,EAClB,IAAqB;UAArB,qBAAA,EAAA,YAAqB;;;;;;0BAEf,IAAI,GAAG;8BACX,IAAI,EAAE,UAAU;8BAChB,MAAM,EAAE,IAAI;2BACb,CAAC;0BAEF,IAAI,IAAI,CAAC,KAAK,EAAE;8BACd,sBAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAC;2BACnC;0BAED,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;8BACjB,sBAAO,OAAO,CAAC,MAAM,CAAC,iCAAiC,CAAC,EAAC;2BAC1D;0BAEK,EAAE,GAAG,IAAII,mBAAW,mCAEnB,MAAM,KACT,MAAM,EAAE,IAAI,CAAC,OAAO,EACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAE5B,IAAI,CAAC,QAAQ,EACbD,gBAAQ,CAAC,WAAW,EACpB,IAAI,CACL,CAAC;;;;0BAGA,qBAAM,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAA;;0BAAtB,SAAsB,CAAC;0BACvB,sBAAO,EAAE,EAAC;;;0BAEV,MAAM,KAAG,CAAC;;;;;OAEb;;;;;;;;MASK,uBAAI,GAAV,UACE,UAAkB,EAClB,IAAa,EACb,MAAkB,EAClB,QAAqB,EACrB,QAAuB,EACvB,IAAqB;UAFrB,yBAAA,EAAA,aAAqB;UACrB,yBAAA,EAAA,eAAuB;UACvB,qBAAA,EAAA,YAAqB;;;;;;0BAEf,IAAI,GAAG;8BACX,IAAI,EAAE,UAAU;8BAChB,MAAM,EAAE,IAAI;2BACb,CAAC;0BAEF,IAAI,IAAI,CAAC,KAAK,EAAE;8BACd,sBAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAC;2BACnC;0BAED,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;8BACjB,sBAAO,OAAO,CAAC,MAAM,CAAC,iCAAiC,CAAC,EAAC;2BAC1D;;;;0BAGQ,qBAAM,IAAI,CAAC,SAAS,CACzB,IAAIC,mBAAW,mCAER,MAAM,KACT,MAAM,EAAE,IAAI,CAAC,OAAO,EACpB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAE5B,IAAI,CAAC,QAAQ,EACbD,gBAAQ,CAAC,WAAW,EACpB,IAAI,CACL,EACD,QAAQ,EACR,QAAQ,EACR,KAAK,CACN,EAAA;8BAdD,sBAAO,SAcN,EAAC;;;0BAEF,MAAM,KAAG,CAAC;;;;;OAEb;MAEK,2BAAQ,GAAd;;;;;;0BACE,IAAI,IAAI,CAAC,MAAM,KAAKR,sBAAc,CAAC,QAAQ,EAAE;8BAC3C,sBAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAC;2BAC5B;0BAED,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;8BACjB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;2BAC/D;0BAEgB,qBAAM,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAA;;0BAApE,QAAQ,GAAG,SAAyD;0BAE1E,sBAAO,QAAQ,CAAC,MAAM,EAAC;;;;OACxB;MAEK,8BAAW,GAAjB,UAAkB,YAAoB,EAAE,OAAkB;;;;;;0BACxD,IAAI,IAAI,CAAC,MAAM,KAAKA,sBAAc,CAAC,QAAQ,EAAE;8BAC3C,sBAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAC;2BAC5B;0BAED,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;8BACjB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;2BAC/D;0BAED,IAAI,CAAC,YAAY,EAAE;8BACjB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;2BAC3C;0BAEgB,qBAAM,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAC7D,IAAI,CAAC,OAAO,EACZ,YAAY,EACZ,OAAO,CACR,EAAA;;0BAJK,QAAQ,GAAG,SAIhB;0BAED,sBAAO,QAAQ,CAAC,MAAM,EAAC;;;;OACxB;MAEK,0BAAO,GAAb;;;;;;0BACE,IAAI,IAAI,CAAC,MAAM,KAAKA,sBAAc,CAAC,QAAQ,EAAE;8BAC3C,sBAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAC;2BAC5B;0BAED,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;8BACjB,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;2BAC/D;0BAEgB,qBAAM,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAA;;0BAAnE,QAAQ,GAAG,SAAwD;0BAEzE,sBAAO,QAAQ,CAAC,MAAM,EAAC;;;;OACxB;MAjRDW;UADCC,SAAI;;iDAECH,mBAAW;;+CAuBhB;MAGDE;UADCC,SAAI;;iDACaH,mBAAW;;6CAe5B;MAwOH,eAAC;GA3WD;;EC3CA;AACA,EA0BA;;;;;;;;AAQA;MA0BE,mBAAY,QAAkB,EAAE,MAAc;UAC5C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;UACzB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAClCI,YAAI,CAAC,gBAAgB,EACrBN,cAAS,CAAC,iBAAiB,CAC5B,CAAC;UACF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;OACtB;;;;;;;;MAzBM,+BAAqB,GAA5B,UAA6B,EAAe;;;UAG1C,IAAM,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;UAE5D,OAAOD,wBAAiB,CACtB,IAAI;eACD,MAAM,EAAE;eACR,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,EAAE,KAAK,CAAC;eAC/D,MAAM,CAACQ,UAAK,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;eACtD,MAAM,CAAC,KAAK,CAAC;eACb,KAAK,CAAC,EAAE,CAAC,CACb,CAAC;OACH;MAcD,sBAAE,GAAF,UACE,OAAe,EACf,GAAS,EACT,IAAa,EACb,IAAW,EACX,KAAa;UAEb,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;OAC5D;MAED,4BAAQ,GAAR,UACE,OAAe,EACf,GAAS,EACT,IAAa,EACb,IAAW,EACX,KAAa;UAEb,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;OAClE;MAED,uBAAG,GAAH,UAAI,IAAY,EAAE,IAAU,EAAE,GAAS;UACrC,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;OACvD;MACH,gBAAC;EAAD,CAAC;;EC7FD,8BAA8B;;;;;;;;;;;;;"}