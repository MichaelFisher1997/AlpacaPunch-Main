{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('bn.js'), require('long')) : typeof define === 'function' && define.amd ? define(['exports', 'tslib', 'bn.js', 'long'], factory) : factory(global.zjsUtil = {}, global.tslib, global.bn.js, global.long);\n})(this, function (exports, tslib, BN, Long) {\n  'use strict';\n\n  BN = BN && BN.hasOwnProperty('default') ? BN['default'] : BN;\n  Long = Long && Long.hasOwnProperty('default') ? Long['default'] : Long; //  Copyright (C) 2018 Zilliqa\n  //\n  //  This file is part of zilliqa-js\n  //\n  //  This program is free software: you can redistribute it and/or modify\n  //  it under the terms of the GNU General Public License as published by\n  //  the Free Software Foundation, either version 3 of the License, or\n  //  (at your option) any later version.\n  //\n  //  This program is distributed in the hope that it will be useful,\n  //  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  //  GNU General Public License for more details.\n  //\n  //  You should have received a copy of the GNU General Public License\n  //  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n  /**\r\n   * intToHexArray\r\n   *\r\n   * @param {number} int - the number to be converted to hex\r\n   * @param {number)} size - the desired width of the hex value. will pad.\r\n   *\r\n   * @returns {string[]}\r\n   */\n\n  var intToHexArray = function (int, size) {\n    var hex = [];\n    var hexRep = [];\n    var hexVal = int.toString(16); // TODO: this really needs to be refactored.\n\n    for (var i = 0; i < hexVal.length; i++) {\n      hexRep[i] = hexVal[i].toString();\n    }\n\n    for (var i = 0; i < size - hexVal.length; i++) {\n      hex.push('0');\n    }\n\n    for (var i = 0; i < hexVal.length; i++) {\n      hex.push(hexRep[i]);\n    }\n\n    return hex;\n  };\n  /**\r\n   * intToByteArray\r\n   *\r\n   * Converts a number to Uint8Array\r\n   *\r\n   * @param {number} num\r\n   * @param {number} size\r\n   *\r\n   * @returns {Uint8Array}\r\n   */\n\n\n  var intToByteArray = function (num, size) {\n    var x = num;\n    var res = [];\n\n    while (x > 0) {\n      res.push(x & 255);\n      x = x >> 8;\n    }\n\n    var pad = size - res.length;\n\n    for (var i = 0; i < pad; i++) {\n      res.unshift(0);\n    }\n\n    return Uint8Array.from(res);\n  };\n  /**\r\n   * hexToByteArray\r\n   *\r\n   * Convers a hex string to a Uint8Array\r\n   *\r\n   * @param {string} hex\r\n   * @returns {Uint8Array}\r\n   */\n\n\n  var hexToByteArray = function (hex) {\n    var res = new Uint8Array(hex.length / 2);\n\n    for (var i = 0; i < hex.length; i += 2) {\n      res[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n    }\n\n    return res;\n  };\n  /**\r\n   * hexToIntArray\r\n   *\r\n   * @param {string} hex\r\n   * @returns {number[]}\r\n   */\n\n\n  var hexToIntArray = function (hex) {\n    if (!hex || !isHex(hex)) {\n      return [];\n    }\n\n    var res = [];\n\n    for (var i = 0; i < hex.length; i++) {\n      var c = hex.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      hi ? res.push(hi, lo) : res.push(lo);\n    }\n\n    return res;\n  };\n  /**\r\n   * pack\r\n   *\r\n   * Takes two 16-bit integers and combines them. Used to compute version.\r\n   *\r\n   * @param {number} a\r\n   * @param {number} b\r\n   *\r\n   * @returns {number} - a 32-bit number\r\n   */\n\n\n  var pack = function (a, b) {\n    if (a >> 16 > 0 || b >> 16 > 0) {\n      throw new Error('Both a and b must be 16 bits or less');\n    }\n\n    return (a << 16) + b;\n  };\n  /**\r\n   * compareBytes\r\n   *\r\n   * A constant time HMAC comparison function.\r\n   *\r\n   * @param {string} a\r\n   * @param {string} b\r\n   * @returns {boolean}\r\n   */\n\n\n  var isEqual = function (a, b) {\n    var bzA = hexToIntArray(a);\n    var bzB = hexToIntArray(b);\n\n    if (bzA.length !== bzB.length) {\n      return false;\n    }\n\n    var result = 0;\n\n    for (var i = 0; i < bzA.length; i++) {\n      result |= bzA[i] ^ bzB[i];\n    }\n\n    return result === 0;\n  };\n  /**\r\n   * isHex\r\n   *\r\n   * @param {string} str - string to be tested\r\n   * @returns {boolean}\r\n   */\n\n\n  var isHex = function (str) {\n    var plain = str.replace('0x', '');\n    return /[0-9a-f]*$/i.test(plain);\n  };\n\n  var bytes = /*#__PURE__*/Object.freeze({\n    intToHexArray: intToHexArray,\n    intToByteArray: intToByteArray,\n    hexToByteArray: hexToByteArray,\n    hexToIntArray: hexToIntArray,\n    pack: pack,\n    isEqual: isEqual,\n    isHex: isHex\n  }); //  Copyright (C) 2018 Zilliqa\n\n  var isAddress = function (address) {\n    return isByteString(address, 40);\n  };\n\n  var isBech32 = function (raw) {\n    return !!raw.match(/^zil1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$/);\n  };\n\n  var isBase58 = function (raw) {\n    return !!raw.match(/^[1-9ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$/);\n  };\n\n  var isPrivateKey = function (privateKey) {\n    return isByteString(privateKey, 64);\n  };\n\n  var isPubKey = function (pubKey) {\n    return isByteString(pubKey, 66);\n  };\n\n  var isSignature = function (sig) {\n    return isByteString(sig, 128);\n  };\n\n  var isByteString = function (str, len) {\n    return !!str.replace('0x', '').match(\"^[0-9a-fA-F]{\" + len + \"}$\");\n  };\n\n  var isNumber = function (x) {\n    return typeof x === 'number';\n  };\n\n  var isBN = function (x) {\n    return BN.isBN(x);\n  };\n\n  var isLong = function (x) {\n    return Long.isLong(x);\n  };\n\n  var isString = function (x) {\n    return typeof x === 'string';\n  };\n\n  var isPlainObject = function (x) {\n    if (typeof x === 'object' && x !== null) {\n      var proto = Object.getPrototypeOf(x);\n      return proto === Object.prototype || proto === null;\n    }\n\n    return false;\n  };\n\n  var PRAGMA_REQUIRED = '@@ZJS_REQUIRED@@';\n\n  var required = function (fn) {\n    if (typeof fn === 'function') {\n      return Object.defineProperty(fn, 'required', {\n        value: PRAGMA_REQUIRED\n      });\n    }\n\n    throw new Error('fn is not a function');\n  };\n\n  var matchesObject = function (x, test) {\n    var e_1, _a;\n\n    if (isPlainObject(x)) {\n      for (var key in test) {\n        if (test.hasOwnProperty(key)) {\n          try {\n            for (var _b = (e_1 = void 0, tslib.__values(test[key])), _c = _b.next(); !_c.done; _c = _b.next()) {\n              var tester = _c.value;\n              var value = x[key];\n\n              if (typeof value === 'undefined' && tester.required) {\n                throw new Error('Key not found: ' + key);\n              } else {\n                continue;\n              }\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  var validation = /*#__PURE__*/Object.freeze({\n    isAddress: isAddress,\n    isBech32: isBech32,\n    isBase58: isBase58,\n    isPrivateKey: isPrivateKey,\n    isPubKey: isPubKey,\n    isSignature: isSignature,\n    isByteString: isByteString,\n    isNumber: isNumber,\n    isBN: isBN,\n    isLong: isLong,\n    isString: isString,\n    isPlainObject: isPlainObject,\n    required: required,\n    matchesObject: matchesObject\n  }); //  Copyright (C) 2018 Zilliqa\n\n  var Units;\n\n  (function (Units) {\n    Units[\"Zil\"] = \"zil\";\n    Units[\"Li\"] = \"li\";\n    Units[\"Qa\"] = \"qa\";\n  })(Units || (Units = {}));\n\n  var DEFAULT_OPTIONS = {\n    pad: false\n  };\n  var unitMap = new Map([[Units.Qa, '1'], [Units.Li, '1000000'], [Units.Zil, '1000000000000'] // 1e12 qa\n  ]);\n\n  var numToStr = function (input) {\n    if (typeof input === 'string') {\n      if (!input.match(/^-?[0-9.]+$/)) {\n        throw new Error(\"while converting number to string, invalid number value '\" + input + \"', should be a number matching (^-?[0-9.]+).\");\n      }\n\n      return input;\n    } else if (typeof input === 'number') {\n      return String(input);\n    } else if (BN.isBN(input)) {\n      return input.toString(10);\n    }\n\n    throw new Error(\"while converting number to string, invalid number value '\" + input + \"' type \" + typeof input + \".\");\n  };\n\n  var fromQa = function (qa, unit, options) {\n    if (options === void 0) {\n      options = DEFAULT_OPTIONS;\n    }\n\n    if (unit === 'qa') {\n      return qa.toString(10);\n    }\n\n    var baseStr = unitMap.get(unit);\n\n    if (!baseStr) {\n      throw new Error(\"No unit of type \" + unit + \" exists.\");\n    }\n\n    var base = new BN(baseStr, 10);\n    var baseNumDecimals = baseStr.length - 1;\n    var fraction = qa.abs().mod(base).toString(10); // prepend 0s to the fraction half\n\n    while (fraction.length < baseNumDecimals) {\n      fraction = \"0\" + fraction;\n    }\n\n    if (!options.pad) {\n      fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    }\n\n    var whole = qa.div(base).toString(10);\n    return fraction === '0' ? \"\" + whole : whole + \".\" + fraction;\n  };\n\n  var toQa = function (input, unit) {\n    var inputStr = numToStr(input);\n    var baseStr = unitMap.get(unit);\n\n    if (!baseStr) {\n      throw new Error(\"No unit of type \" + unit + \" exists.\");\n    }\n\n    var baseNumDecimals = baseStr.length - 1;\n    var base = new BN(baseStr, 10); // Is it negative?\n\n    var isNegative = inputStr.substring(0, 1) === '-';\n\n    if (isNegative) {\n      inputStr = inputStr.substring(1);\n    }\n\n    if (inputStr === '.') {\n      throw new Error(\"Cannot convert \" + inputStr + \" to Qa.\");\n    } // Split it into a whole and fractional part\n\n\n    var comps = inputStr.split('.'); // eslint-disable-line\n\n    if (comps.length > 2) {\n      throw new Error(\"Cannot convert \" + inputStr + \" to Qa.\");\n    }\n\n    var _a = tslib.__read(comps, 2),\n        whole = _a[0],\n        fraction = _a[1];\n\n    if (!whole) {\n      whole = '0';\n    }\n\n    if (!fraction) {\n      fraction = '0';\n    }\n\n    if (fraction.length > baseNumDecimals) {\n      throw new Error(\"Cannot convert \" + inputStr + \" to Qa.\");\n    }\n\n    while (fraction.length < baseNumDecimals) {\n      fraction += '0';\n    }\n\n    var wholeBN = new BN(whole);\n    var fractionBN = new BN(fraction);\n    var wei = wholeBN.mul(base).add(fractionBN); // eslint-disable-line\n\n    if (isNegative) {\n      wei = wei.neg();\n    }\n\n    return new BN(wei.toString(10), 10);\n  };\n\n  var unit = /*#__PURE__*/Object.freeze({\n    get Units() {\n      return Units;\n    },\n\n    fromQa: fromQa,\n    toQa: toQa\n  }); //  Copyright (C) 2018 Zilliqa\n\n  exports.BN = BN;\n  exports.Long = Long;\n  exports.bytes = bytes;\n  exports.units = unit;\n  exports.validation = validation;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["intToHexArray","int","size","hex","hexRep","hexVal","toString","i","length","push","intToByteArray","num","x","res","pad","unshift","Uint8Array","from","hexToByteArray","parseInt","substring","hexToIntArray","isHex","c","charCodeAt","hi","lo","pack","a","b","Error","isEqual","bzA","bzB","result","str","plain","replace","test","isAddress","address","isByteString","isBech32","raw","match","isBase58","isPrivateKey","privateKey","isPubKey","pubKey","isSignature","sig","len","isNumber","isBN","BN","isLong","Long","isString","isPlainObject","proto","Object","getPrototypeOf","prototype","PRAGMA_REQUIRED","required","fn","defineProperty","value","matchesObject","key","hasOwnProperty","__values","_c","tester","Units","DEFAULT_OPTIONS","unitMap","Map","Qa","Li","Zil","numToStr","input","String","fromQa","qa","unit","options","baseStr","get","base","baseNumDecimals","fraction","abs","mod","whole","div","toQa","inputStr","isNegative","comps","split","__read","wholeBN","fractionBN","wei","mul","add","neg"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/util/src/bytes.ts","/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/util/src/validation.ts","/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/util/src/unit.ts","/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/util/src/index.ts"],"sourcesContent":["//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * intToHexArray\n *\n * @param {number} int - the number to be converted to hex\n * @param {number)} size - the desired width of the hex value. will pad.\n *\n * @returns {string[]}\n */\nexport const intToHexArray = (int: number, size: number): string[] => {\n  const hex: string[] = [];\n  const hexRep: string[] = [];\n  const hexVal = int.toString(16);\n\n  // TODO: this really needs to be refactored.\n  for (let i = 0; i < hexVal.length; i++) {\n    hexRep[i] = hexVal[i].toString();\n  }\n\n  for (let i = 0; i < size - hexVal.length; i++) {\n    hex.push('0');\n  }\n\n  for (let i = 0; i < hexVal.length; i++) {\n    hex.push(hexRep[i]);\n  }\n\n  return hex;\n};\n\n/**\n * intToByteArray\n *\n * Converts a number to Uint8Array\n *\n * @param {number} num\n * @param {number} size\n *\n * @returns {Uint8Array}\n */\nexport const intToByteArray = (num: number, size: number): Uint8Array => {\n  let x = num;\n  const res: number[] = [];\n\n  while (x > 0) {\n    res.push(x & 255);\n    x = x >> 8;\n  }\n\n  const pad = size - res.length;\n\n  for (let i = 0; i < pad; i++) {\n    res.unshift(0);\n  }\n\n  return Uint8Array.from(res);\n};\n\n/**\n * hexToByteArray\n *\n * Convers a hex string to a Uint8Array\n *\n * @param {string} hex\n * @returns {Uint8Array}\n */\nexport const hexToByteArray = (hex: string): Uint8Array => {\n  const res = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < hex.length; i += 2) {\n    res[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n  }\n\n  return res;\n};\n\n/**\n * hexToIntArray\n *\n * @param {string} hex\n * @returns {number[]}\n */\nexport const hexToIntArray = (hex: string): number[] => {\n  if (!hex || !isHex(hex)) {\n    return [];\n  }\n\n  const res = [];\n\n  for (let i = 0; i < hex.length; i++) {\n    const c = hex.charCodeAt(i);\n    const hi = c >> 8;\n    const lo = c & 0xff;\n\n    hi ? res.push(hi, lo) : res.push(lo);\n  }\n\n  return res;\n};\n\n/**\n * pack\n *\n * Takes two 16-bit integers and combines them. Used to compute version.\n *\n * @param {number} a\n * @param {number} b\n *\n * @returns {number} - a 32-bit number\n */\nexport const pack = (a: number, b: number): number => {\n  if (a >> 16 > 0 || b >> 16 > 0) {\n    throw new Error('Both a and b must be 16 bits or less');\n  }\n\n  return (a << 16) + b;\n};\n\n/**\n * compareBytes\n *\n * A constant time HMAC comparison function.\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nexport const isEqual = (a: string, b: string): boolean => {\n  const bzA = hexToIntArray(a);\n  const bzB = hexToIntArray(b);\n\n  if (bzA.length !== bzB.length) {\n    return false;\n  }\n\n  let result = 0;\n  for (let i = 0; i < bzA.length; i++) {\n    result |= bzA[i] ^ bzB[i];\n  }\n\n  return result === 0;\n};\n\n/**\n * isHex\n *\n * @param {string} str - string to be tested\n * @returns {boolean}\n */\nexport const isHex = (str: string): boolean => {\n  const plain = str.replace('0x', '');\n  return /[0-9a-f]*$/i.test(plain);\n};\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport BN from 'bn.js';\nimport Long from 'long';\n\nexport const isAddress = (address: string) => {\n  return isByteString(address, 40);\n};\n\nexport const isBech32 = (raw: string) => {\n  return !!raw.match(/^zil1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$/);\n};\n\nexport const isBase58 = (raw: string) => {\n  return !!raw.match(\n    /^[1-9ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$/,\n  );\n};\n\nexport const isPrivateKey = (privateKey: string) => {\n  return isByteString(privateKey, 64);\n};\n\nexport const isPubKey = (pubKey: string) => {\n  return isByteString(pubKey, 66);\n};\n\nexport const isSignature = (sig: string) => {\n  return isByteString(sig, 128);\n};\n\nexport const isByteString = (str: string, len: number) => {\n  return !!str.replace('0x', '').match(`^[0-9a-fA-F]{${len}}$`);\n};\n\nexport const isNumber = (x: unknown): x is number => {\n  return typeof x === 'number';\n};\n\nexport const isBN = (x: unknown): x is BN => {\n  return BN.isBN(x);\n};\n\nexport const isLong = (x: unknown): x is Long => {\n  return Long.isLong(x);\n};\n\nexport const isString = (x: unknown): x is string => {\n  return typeof x === 'string';\n};\n\nexport const isPlainObject = (x: unknown): x is { [key: string]: any } => {\n  if (typeof x === 'object' && x !== null) {\n    const proto = Object.getPrototypeOf(x);\n    return proto === Object.prototype || proto === null;\n  }\n\n  return false;\n};\n\nconst PRAGMA_REQUIRED = '@@ZJS_REQUIRED@@';\n\nexport interface Validator extends Function {\n  required?: typeof PRAGMA_REQUIRED;\n}\n\nexport const required = <T extends Function>(fn: T): Validator => {\n  if (typeof fn === 'function') {\n    return Object.defineProperty(fn, 'required', {\n      value: PRAGMA_REQUIRED,\n    });\n  }\n\n  throw new Error('fn is not a function');\n};\n\nexport const matchesObject = <T extends object>(\n  x: unknown,\n  test: { [key: string]: Validator[] },\n): x is T => {\n  if (isPlainObject(x)) {\n    for (const key in test) {\n      if (test.hasOwnProperty(key)) {\n        for (const tester of test[key]) {\n          const value = x[key];\n\n          if (typeof value === 'undefined' && tester.required) {\n            throw new Error('Key not found: ' + key);\n          } else {\n            continue;\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n};\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Adapted from https://github.com/ethjs/ethjs-unit/blob/master/src/index.js\n */\nimport BN from 'bn.js';\n\nexport enum Units {\n  Zil = 'zil',\n  Li = 'li',\n  Qa = 'qa',\n}\n\ninterface Options {\n  pad: boolean;\n}\n\nconst DEFAULT_OPTIONS = {\n  pad: false,\n};\n\nconst unitMap = new Map<Units, string>([\n  [Units.Qa, '1'],\n  [Units.Li, '1000000'], // 1e6 qa\n  [Units.Zil, '1000000000000'], // 1e12 qa\n]);\n\nconst numToStr = (input: string | number | BN) => {\n  if (typeof input === 'string') {\n    if (!input.match(/^-?[0-9.]+$/)) {\n      throw new Error(\n        `while converting number to string, invalid number value '${input}', should be a number matching (^-?[0-9.]+).`,\n      );\n    }\n    return input;\n  } else if (typeof input === 'number') {\n    return String(input);\n  } else if (BN.isBN(input)) {\n    return input.toString(10);\n  }\n\n  throw new Error(\n    `while converting number to string, invalid number value '${input}' type ${typeof input}.`,\n  );\n};\n\nexport const fromQa = (\n  qa: BN,\n  unit: Units,\n  options: Options = DEFAULT_OPTIONS,\n): string => {\n  if (unit === 'qa') {\n    return qa.toString(10);\n  }\n\n  const baseStr = unitMap.get(unit);\n\n  if (!baseStr) {\n    throw new Error(`No unit of type ${unit} exists.`);\n  }\n\n  const base = new BN(baseStr, 10);\n  const baseNumDecimals = baseStr.length - 1;\n\n  let fraction = qa.abs().mod(base).toString(10);\n\n  // prepend 0s to the fraction half\n  while (fraction.length < baseNumDecimals) {\n    fraction = `0${fraction}`;\n  }\n\n  if (!options.pad) {\n    fraction = <string>(\n      (<RegExpMatchArray>fraction.match(/^([0-9]*[1-9]|0)(0*)/))[1]\n    );\n  }\n\n  const whole = qa.div(base).toString(10);\n\n  return fraction === '0' ? `${whole}` : `${whole}.${fraction}`;\n};\n\nexport const toQa = (input: string | number | BN, unit: Units) => {\n  let inputStr = numToStr(input);\n  const baseStr = unitMap.get(unit);\n\n  if (!baseStr) {\n    throw new Error(`No unit of type ${unit} exists.`);\n  }\n\n  const baseNumDecimals = baseStr.length - 1;\n  const base = new BN(baseStr, 10);\n\n  // Is it negative?\n  const isNegative = inputStr.substring(0, 1) === '-';\n  if (isNegative) {\n    inputStr = inputStr.substring(1);\n  }\n\n  if (inputStr === '.') {\n    throw new Error(`Cannot convert ${inputStr} to Qa.`);\n  }\n\n  // Split it into a whole and fractional part\n  const comps = inputStr.split('.'); // eslint-disable-line\n  if (comps.length > 2) {\n    throw new Error(`Cannot convert ${inputStr} to Qa.`);\n  }\n\n  let [whole, fraction] = comps;\n\n  if (!whole) {\n    whole = '0';\n  }\n  if (!fraction) {\n    fraction = '0';\n  }\n  if (fraction.length > baseNumDecimals) {\n    throw new Error(`Cannot convert ${inputStr} to Qa.`);\n  }\n\n  while (fraction.length < baseNumDecimals) {\n    fraction += '0';\n  }\n\n  const wholeBN = new BN(whole);\n  const fractionBN = new BN(fraction);\n  let wei = wholeBN.mul(base).add(fractionBN); // eslint-disable-line\n\n  if (isNegative) {\n    wei = wei.neg();\n  }\n\n  return new BN(wei.toString(10), 10);\n};\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport * as bytes from './bytes';\nimport * as validation from './validation';\nimport * as units from './unit';\nimport BN from 'bn.js';\nimport Long from 'long';\n\nexport { BN, bytes, Long, units, validation };\n"]},"metadata":{},"sourceType":"script"}