{"ast":null,"code":"/*/const { Transaction } = require('@zilliqa-js/account');\nconst { BN, Long, bytes, units } = require('@zilliqa-js/util');\nconst { Zilliqa } = require('@zilliqa-js/zilliqa');\nconst CP = require ('@zilliqa-js/crypto');\n\nconst zilliqa = new Zilliqa('https://dev-api.zilliqa.com');\n\n// These are set by the core protocol, and may vary per-chain.\n// These numbers are JUST AN EXAMPLE. They will NOT WORK on the developer testnet\n// or mainnet.\n// For more information: https://apidocs.zilliqa.com/?shell#getnetworkid\nconst CHAIN_ID = 2;\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);\n\n// Populate the wallet with an account\nconst privkey = '2BEE3DD04CEFD25EE17190075C1693F011CA5AAF0C50D3EA2D0934482872AB72';\n\nzilliqa.wallet.addByPrivateKey(\n  privkey\n);\n\nconst address = CP.getAddressFromPrivateKey(privkey);\nconsole.log(\"Your account address is:\");\nconsole.log(`0x${address}`);\n\nasync function testBlockchain() {\n    // Get Balance\n    const balance = await zilliqa.blockchain.getBalance(address);\n    // Get Minimum Gas Price from blockchain\n    const minGasPrice = await zilliqa.blockchain.getMinimumGasPrice();\n    console.log(`Your account balance is:`);\n    console.log(balance.result)\n    console.log(`Current Minimum Gas Price: ${minGasPrice.result}`);\n    const myGasPrice = units.toQa('1000', units.Units.Li); // Gas Price that will be used by all transactions\n    console.log(`My Gas Price ${myGasPrice.toString()}`)\n    console.log('Sufficient Gas Price?');\n    console.log(myGasPrice.gte(new BN(minGasPrice.result))); // Checks if your gas price is less than the minimum gas price\n\n    // Send a transaction to the network\n    const tx = await zilliqa.blockchain.createTransaction(\n      zilliqa.transactions.new({\n        version: VERSION,\n        toAddr: \"zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k\",\n        amount: new BN(units.toQa(\"100000\", units.Units.Zil)), // Sending an amount in Zil (1) and converting the amount to Qa\n        gasPrice: myGasPrice, // Minimum gasPrice veries. Check the `GetMinimumGasPrice` on the blockchain\n        gasLimit: Long.fromNumber(1)\n      })\n    );\n\n\n    console.log(`The transaction status is:`);\n    console.log(tx.receipt);\n}\n\nexport default testBlockchain;*/\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nasync function testBlockchain() {\n  const {\n    Transaction\n  } = require('@zilliqa-js/account');\n\n  const {\n    bytes\n  } = require('@zilliqa-js/util');\n\n  const {\n    Zilliqa\n  } = require('@zilliqa-js/zilliqa');\n\n  const {\n    toBech32Address,\n    getAddressFromPrivateKey\n  } = require('@zilliqa-js/crypto');\n\n  const zilliqa = new Zilliqa('https://dev-api.zilliqa.com');\n\n  try {\n    const payload = '{\"version\":21823489,\"nonce\":1012,\"toAddr\":\"4BAF5faDA8e5Db92C3d3242618c5B47133AE003C\",\"amount\":\"10000000\",\"pubKey\":\"0246e7178dc8253201101e18fd6f6eb9972451d121fc57aa2a06dd5c111e58dc6a\",\"gasPrice\":\"1000000000\",\"gasLimit\":\"50\",\"code\":\"\",\"data\":\"\",\"signature\":\"d91b538341a47e1b58698f2eb78b88f307bbccd4c0d92a8e46f3b559e6f6b99054c1b8eb078f31c75f1202f48a9ef751ff7eafd4b0534b435802645fbe481f5c\",\"priority\":false}';\n    const tx = JSON.parse(payload);\n    const id = await zilliqa.blockchain.createTransactionRaw(payload); // process confirm\n\n    console.log(`The transaction id is:`, id);\n    console.log(`Waiting transaction be confirmed`); // to perform confirmation, we need a `empty` transaction object\n\n    const emptyTx = new Transaction({\n      toAddr: '0x' + tx.toAddr\n    }, zilliqa.provider);\n    const confirmedTxn = await emptyTx.confirm(id);\n    console.log(`The transaction status is:`);\n    console.log(confirmedTxn.receipt);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default testBlockchain;","map":{"version":3,"names":["testBlockchain","Transaction","require","bytes","Zilliqa","toBech32Address","getAddressFromPrivateKey","zilliqa","payload","tx","JSON","parse","id","blockchain","createTransactionRaw","console","log","emptyTx","toAddr","provider","confirmedTxn","confirm","receipt","err"],"sources":["/home/micqdf/Documents/this/test1/client/src/components/Navbar/ZilAssets/PayableZil.js"],"sourcesContent":["/*/const { Transaction } = require('@zilliqa-js/account');\nconst { BN, Long, bytes, units } = require('@zilliqa-js/util');\nconst { Zilliqa } = require('@zilliqa-js/zilliqa');\nconst CP = require ('@zilliqa-js/crypto');\n\nconst zilliqa = new Zilliqa('https://dev-api.zilliqa.com');\n\n// These are set by the core protocol, and may vary per-chain.\n// These numbers are JUST AN EXAMPLE. They will NOT WORK on the developer testnet\n// or mainnet.\n// For more information: https://apidocs.zilliqa.com/?shell#getnetworkid\nconst CHAIN_ID = 2;\nconst MSG_VERSION = 1;\nconst VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);\n\n// Populate the wallet with an account\nconst privkey = '2BEE3DD04CEFD25EE17190075C1693F011CA5AAF0C50D3EA2D0934482872AB72';\n\nzilliqa.wallet.addByPrivateKey(\n  privkey\n);\n\nconst address = CP.getAddressFromPrivateKey(privkey);\nconsole.log(\"Your account address is:\");\nconsole.log(`0x${address}`);\n\nasync function testBlockchain() {\n    // Get Balance\n    const balance = await zilliqa.blockchain.getBalance(address);\n    // Get Minimum Gas Price from blockchain\n    const minGasPrice = await zilliqa.blockchain.getMinimumGasPrice();\n    console.log(`Your account balance is:`);\n    console.log(balance.result)\n    console.log(`Current Minimum Gas Price: ${minGasPrice.result}`);\n    const myGasPrice = units.toQa('1000', units.Units.Li); // Gas Price that will be used by all transactions\n    console.log(`My Gas Price ${myGasPrice.toString()}`)\n    console.log('Sufficient Gas Price?');\n    console.log(myGasPrice.gte(new BN(minGasPrice.result))); // Checks if your gas price is less than the minimum gas price\n\n    // Send a transaction to the network\n    const tx = await zilliqa.blockchain.createTransaction(\n      zilliqa.transactions.new({\n        version: VERSION,\n        toAddr: \"zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k\",\n        amount: new BN(units.toQa(\"100000\", units.Units.Zil)), // Sending an amount in Zil (1) and converting the amount to Qa\n        gasPrice: myGasPrice, // Minimum gasPrice veries. Check the `GetMinimumGasPrice` on the blockchain\n        gasLimit: Long.fromNumber(1)\n      })\n    );\n\n\n    console.log(`The transaction status is:`);\n    console.log(tx.receipt);\n}\n\nexport default testBlockchain;*/\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\nasync function testBlockchain() {\n  const { Transaction } = require('@zilliqa-js/account');\nconst { bytes } = require('@zilliqa-js/util');\nconst { Zilliqa } = require('@zilliqa-js/zilliqa');\nconst {\n  toBech32Address,\n  getAddressFromPrivateKey,\n} = require('@zilliqa-js/crypto');\n\nconst zilliqa = new Zilliqa('https://dev-api.zilliqa.com');\n  try {\n    const payload =\n      '{\"version\":21823489,\"nonce\":1012,\"toAddr\":\"4BAF5faDA8e5Db92C3d3242618c5B47133AE003C\",\"amount\":\"10000000\",\"pubKey\":\"0246e7178dc8253201101e18fd6f6eb9972451d121fc57aa2a06dd5c111e58dc6a\",\"gasPrice\":\"1000000000\",\"gasLimit\":\"50\",\"code\":\"\",\"data\":\"\",\"signature\":\"d91b538341a47e1b58698f2eb78b88f307bbccd4c0d92a8e46f3b559e6f6b99054c1b8eb078f31c75f1202f48a9ef751ff7eafd4b0534b435802645fbe481f5c\",\"priority\":false}';\n    const tx = JSON.parse(payload);\n    const id = await zilliqa.blockchain.createTransactionRaw(payload);\n\n    // process confirm\n    console.log(`The transaction id is:`, id);\n    console.log(`Waiting transaction be confirmed`);\n\n    // to perform confirmation, we need a `empty` transaction object\n    const emptyTx = new Transaction(\n      { toAddr: '0x' + tx.toAddr },\n      zilliqa.provider,\n    );\n    const confirmedTxn = await emptyTx.confirm(id);\n    console.log(`The transaction status is:`);\n    console.log(confirmedTxn.receipt);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default testBlockchain;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,eAAeA,cAAf,GAAgC;EAC9B,MAAM;IAAEC;EAAF,IAAkBC,OAAO,CAAC,qBAAD,CAA/B;;EACF,MAAM;IAAEC;EAAF,IAAYD,OAAO,CAAC,kBAAD,CAAzB;;EACA,MAAM;IAAEE;EAAF,IAAcF,OAAO,CAAC,qBAAD,CAA3B;;EACA,MAAM;IACJG,eADI;IAEJC;EAFI,IAGFJ,OAAO,CAAC,oBAAD,CAHX;;EAKA,MAAMK,OAAO,GAAG,IAAIH,OAAJ,CAAY,6BAAZ,CAAhB;;EACE,IAAI;IACF,MAAMI,OAAO,GACX,qZADF;IAEA,MAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAX;IACA,MAAMI,EAAE,GAAG,MAAML,OAAO,CAACM,UAAR,CAAmBC,oBAAnB,CAAwCN,OAAxC,CAAjB,CAJE,CAMF;;IACAO,OAAO,CAACC,GAAR,CAAa,wBAAb,EAAsCJ,EAAtC;IACAG,OAAO,CAACC,GAAR,CAAa,kCAAb,EARE,CAUF;;IACA,MAAMC,OAAO,GAAG,IAAIhB,WAAJ,CACd;MAAEiB,MAAM,EAAE,OAAOT,EAAE,CAACS;IAApB,CADc,EAEdX,OAAO,CAACY,QAFM,CAAhB;IAIA,MAAMC,YAAY,GAAG,MAAMH,OAAO,CAACI,OAAR,CAAgBT,EAAhB,CAA3B;IACAG,OAAO,CAACC,GAAR,CAAa,4BAAb;IACAD,OAAO,CAACC,GAAR,CAAYI,YAAY,CAACE,OAAzB;EACD,CAlBD,CAkBE,OAAOC,GAAP,EAAY;IACZR,OAAO,CAACC,GAAR,CAAYO,GAAZ;EACD;AACF;;AAED,eAAevB,cAAf"},"metadata":{},"sourceType":"module"}