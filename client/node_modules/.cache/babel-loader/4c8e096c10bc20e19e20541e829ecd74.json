{"ast":null,"code":"//zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k\n//grabs blockchain\nconst blockchain = () => window.zilPay.blockchain; //Connect\n\n\nconst Connect = () => {\n  window.zilPay.wallet.connect().then(function (retVal) {\n    console.log(retVal);\n\n    if (retVal) {\n      console.log(window.zilPay.wallet.defaultAccount.bech32);\n    }\n  });\n};\n\n_c = Connect;\nconst zilliqa = window.zilPay;\nconst utils = zilPay.utils;\nconst amount = utils.units.toQa(10, utils.units.Units.Zil); // 10 zil\n\nconst gasPrice = utils.units.toQa('1000', utils.units.Units.Li);\nconst txParams = zilliqa.transactions.new({\n  // Create params for our trasnaction.\n  toAddr: 'zil1wl38cwww2u3g8wzgutxlxtxwwc0rf7jf27zace',\n  amount: amount,\n  gasPrice: gasPrice\n});\n\ntry {\n  const txResult = await zilliqa.blockchain.createTransaction(txParams);\n} catch (err) {// if user rejected this transaction or other problem.\n}\n\nexport { Connect, blockchain }; //zilliqa, privateKey, bytes, units, recipientAddress, sendingAmount are defined in the codebase before\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect\");","map":{"version":3,"names":["blockchain","window","zilPay","Connect","wallet","connect","then","retVal","console","log","defaultAccount","bech32","zilliqa","utils","amount","units","toQa","Units","Zil","gasPrice","Li","txParams","transactions","new","toAddr","txResult","createTransaction","err"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/src/components/Navbar/ZilAssets/zilFunctions.js"],"sourcesContent":["//zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k\n\n//grabs blockchain\n const blockchain = () => window.zilPay.blockchain;\n\n \n\n \n\n\n  //Connect\n  const Connect = () => {\n    window.zilPay.wallet.connect().then(function(retVal){\n      console.log(retVal)\n      if(retVal){console.log(window.zilPay.wallet.defaultAccount.bech32)}\n      \n     })\n  }\n\n  \n\n  const zilliqa = window.zilPay;\n  const utils = zilPay.utils;\n  \n  const amount = utils.units.toQa(10, utils.units.Units.Zil); // 10 zil\n  const gasPrice = utils.units.toQa('1000', utils.units.Units.Li);\n  const txParams = zilliqa.transactions.new({ // Create params for our trasnaction.\n    toAddr: 'zil1wl38cwww2u3g8wzgutxlxtxwwc0rf7jf27zace',\n    amount: amount,\n    gasPrice: gasPrice\n  });\n  try {\n      const txResult = await zilliqa.blockchain.createTransaction(txParams);\n  } catch (err) {\n      // if user rejected this transaction or other problem.\n  }\n\n\n  \n\n\n    export {Connect, blockchain};\n\n    //zilliqa, privateKey, bytes, units, recipientAddress, sendingAmount are defined in the codebase before\n\n"],"mappings":"AAAA;AAEA;AACC,MAAMA,UAAU,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcF,UAAvC,C,CAOC;;;AACA,MAAMG,OAAO,GAAG,MAAM;EACpBF,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBC,OAArB,GAA+BC,IAA/B,CAAoC,UAASC,MAAT,EAAgB;IAClDC,OAAO,CAACC,GAAR,CAAYF,MAAZ;;IACA,IAAGA,MAAH,EAAU;MAACC,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBM,cAArB,CAAoCC,MAAhD;IAAwD;EAEnE,CAJF;AAKD,CAND;;KAAMR,O;AAUN,MAAMS,OAAO,GAAGX,MAAM,CAACC,MAAvB;AACA,MAAMW,KAAK,GAAGX,MAAM,CAACW,KAArB;AAEA,MAAMC,MAAM,GAAGD,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAiB,EAAjB,EAAqBH,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkBC,GAAvC,CAAf,C,CAA4D;;AAC5D,MAAMC,QAAQ,GAAGN,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAiB,MAAjB,EAAyBH,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkBG,EAA3C,CAAjB;AACA,MAAMC,QAAQ,GAAGT,OAAO,CAACU,YAAR,CAAqBC,GAArB,CAAyB;EAAE;EAC1CC,MAAM,EAAE,4CADgC;EAExCV,MAAM,EAAEA,MAFgC;EAGxCK,QAAQ,EAAEA;AAH8B,CAAzB,CAAjB;;AAKA,IAAI;EACA,MAAMM,QAAQ,GAAG,MAAMb,OAAO,CAACZ,UAAR,CAAmB0B,iBAAnB,CAAqCL,QAArC,CAAvB;AACH,CAFD,CAEE,OAAOM,GAAP,EAAY,CACV;AACH;;AAMC,SAAQxB,OAAR,EAAiBH,UAAjB,G,CAEA"},"metadata":{},"sourceType":"module"}