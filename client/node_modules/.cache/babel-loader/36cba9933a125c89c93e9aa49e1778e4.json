{"ast":null,"code":"//zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k\n//grabs blockchain\nconst blockchain = () => window.zilPay.blockchain;\n\nconst status = await connect();\nstatus === window.zilPay.wallet.isConnect; //Connect\n\nconst Connect = () => {\n  window.zilPay.wallet.connect().then(function (retVal) {\n    console.log(retVal);\n\n    if (retVal) {\n      console.log(window.zilPay.wallet.defaultAccount.bech32);\n    }\n  });\n};\n/*const Payable = () => {\n    const zilliqa = window.zilPay;\n    const utils = zilPay.utils;\n    \n    const amount = utils.units.toQa(10, utils.units.Units.Zil); // 10 zil\n    const gasPrice = utils.units.toQa('1000', utils.units.Units.Li);\n    const txParams = zilliqa.transactions.new({ // Create params for our trasnaction.\n      toAddr: 'zil1wl38cwww2u3g8wzgutxlxtxwwc0rf7jf27zace',\n      amount: amount,\n      gasPrice: gasPrice\n    });\n    try {\n        const txResult = await zilliqa.blockchain.createTransaction(txParams);\n    } catch (err) {\n        // if user rejected this transaction or other problem.\n    }\n }*/\n\n\n_c = Connect;\nexport { Connect, blockchain }; //zilliqa, privateKey, bytes, units, recipientAddress, sendingAmount are defined in the codebase before\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect\");","map":{"version":3,"names":["blockchain","window","zilPay","status","connect","wallet","isConnect","Connect","then","retVal","console","log","defaultAccount","bech32"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/src/components/Navbar/ZilAssets/zilFunctions.js"],"sourcesContent":["\n\n\n//zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k\n\n//grabs blockchain\n const blockchain = () => window.zilPay.blockchain;\n\n \n const status = await connect();\n status === window.zilPay.wallet.isConnect;\n \n\n\n  //Connect\n  const Connect = () => {\n    window.zilPay.wallet.connect().then(function(retVal){\n      console.log(retVal)\n      if(retVal){console.log(window.zilPay.wallet.defaultAccount.bech32)}\n      \n     })\n  }\n\n  \n  /*const Payable = () => {\n      const zilliqa = window.zilPay;\n      const utils = zilPay.utils;\n      \n      const amount = utils.units.toQa(10, utils.units.Units.Zil); // 10 zil\n      const gasPrice = utils.units.toQa('1000', utils.units.Units.Li);\n      const txParams = zilliqa.transactions.new({ // Create params for our trasnaction.\n        toAddr: 'zil1wl38cwww2u3g8wzgutxlxtxwwc0rf7jf27zace',\n        amount: amount,\n        gasPrice: gasPrice\n      });\n      try {\n          const txResult = await zilliqa.blockchain.createTransaction(txParams);\n      } catch (err) {\n          // if user rejected this transaction or other problem.\n      }\n\n  }*/\n\n\n  \n\n\n  \n\n\n    export {Connect, blockchain};\n\n    //zilliqa, privateKey, bytes, units, recipientAddress, sendingAmount are defined in the codebase before\n\n"],"mappings":"AAGA;AAEA;AACC,MAAMA,UAAU,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcF,UAAvC;;AAGA,MAAMG,MAAM,GAAG,MAAMC,OAAO,EAA5B;AACAD,MAAM,KAAKF,MAAM,CAACC,MAAP,CAAcG,MAAd,CAAqBC,SAAhC,C,CAIC;;AACA,MAAMC,OAAO,GAAG,MAAM;EACpBN,MAAM,CAACC,MAAP,CAAcG,MAAd,CAAqBD,OAArB,GAA+BI,IAA/B,CAAoC,UAASC,MAAT,EAAgB;IAClDC,OAAO,CAACC,GAAR,CAAYF,MAAZ;;IACA,IAAGA,MAAH,EAAU;MAACC,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACC,MAAP,CAAcG,MAAd,CAAqBO,cAArB,CAAoCC,MAAhD;IAAwD;EAEnE,CAJF;AAKD,CAND;AASA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAzBQN,O;AAmCJ,SAAQA,OAAR,EAAiBP,UAAjB,G,CAEA"},"metadata":{},"sourceType":"module"}