{"ast":null,"code":"'use strict';\n\nconst {\n  Duplex: DuplexStream,\n  Readable: ReadableStream,\n  Writable: WritableStream\n} = require('stream');\n\nconst {\n  CHANNEL_EXTENDED_DATATYPE: {\n    STDERR\n  }\n} = require('./protocol/constants.js');\n\nconst {\n  bufferSlice\n} = require('./protocol/utils.js');\n\nconst PACKET_SIZE = 32 * 1024;\nconst MAX_WINDOW = 2 * 1024 * 1024;\nconst WINDOW_THRESHOLD = MAX_WINDOW / 2;\n\nclass ClientStderr extends ReadableStream {\n  constructor(channel, streamOpts) {\n    super(streamOpts);\n    this._channel = channel;\n  }\n\n  _read(n) {\n    if (this._channel._waitChanDrain) {\n      this._channel._waitChanDrain = false;\n      if (this._channel.incoming.window <= WINDOW_THRESHOLD) windowAdjust(this._channel);\n    }\n  }\n\n}\n\nclass ServerStderr extends WritableStream {\n  constructor(channel) {\n    super({\n      highWaterMark: MAX_WINDOW\n    });\n    this._channel = channel;\n  }\n\n  _write(data, encoding, cb) {\n    const channel = this._channel;\n    const protocol = channel._client._protocol;\n    const outgoing = channel.outgoing;\n    const packetSize = outgoing.packetSize;\n    const id = outgoing.id;\n    let window = outgoing.window;\n    const len = data.length;\n    let p = 0;\n    if (outgoing.state !== 'open') return;\n\n    while (len - p > 0 && window > 0) {\n      let sliceLen = len - p;\n      if (sliceLen > window) sliceLen = window;\n      if (sliceLen > packetSize) sliceLen = packetSize;\n      if (p === 0 && sliceLen === len) protocol.channelExtData(id, data, STDERR);else protocol.channelExtData(id, bufferSlice(data, p, p + sliceLen), STDERR);\n      p += sliceLen;\n      window -= sliceLen;\n    }\n\n    outgoing.window = window;\n\n    if (len - p > 0) {\n      if (window === 0) channel._waitWindow = true;\n      if (p > 0) channel._chunkErr = bufferSlice(data, p, len);else channel._chunkErr = data;\n      channel._chunkcbErr = cb;\n      return;\n    }\n\n    cb();\n  }\n\n}\n\nclass Channel extends DuplexStream {\n  constructor(client, info, opts) {\n    const streamOpts = {\n      highWaterMark: MAX_WINDOW,\n      allowHalfOpen: !opts || opts && opts.allowHalfOpen !== false,\n      emitClose: false\n    };\n    super(streamOpts);\n    this.allowHalfOpen = streamOpts.allowHalfOpen;\n    const server = !!(opts && opts.server);\n    this.server = server;\n    this.type = info.type;\n    this.subtype = undefined;\n    /*\n      incoming and outgoing contain these properties:\n      {\n        id: undefined,\n        window: undefined,\n        packetSize: undefined,\n        state: 'closed'\n      }\n    */\n\n    this.incoming = info.incoming;\n    this.outgoing = info.outgoing;\n    this._callbacks = [];\n    this._client = client;\n    this._hasX11 = false;\n    this._exit = {\n      code: undefined,\n      signal: undefined,\n      dump: undefined,\n      desc: undefined\n    };\n    this.stdin = this.stdout = this;\n    if (server) this.stderr = new ServerStderr(this);else this.stderr = new ClientStderr(this, streamOpts); // Outgoing data\n\n    this._waitWindow = false; // SSH-level backpressure\n    // Incoming data\n\n    this._waitChanDrain = false; // Channel Readable side backpressure\n\n    this._chunk = undefined;\n    this._chunkcb = undefined;\n    this._chunkErr = undefined;\n    this._chunkcbErr = undefined;\n    this.on('finish', onFinish).on('prefinish', onFinish); // For node v0.11+\n\n    this.on('end', onEnd).on('close', onEnd);\n  }\n\n  _read(n) {\n    if (this._waitChanDrain) {\n      this._waitChanDrain = false;\n      if (this.incoming.window <= WINDOW_THRESHOLD) windowAdjust(this);\n    }\n  }\n\n  _write(data, encoding, cb) {\n    const protocol = this._client._protocol;\n    const outgoing = this.outgoing;\n    const packetSize = outgoing.packetSize;\n    const id = outgoing.id;\n    let window = outgoing.window;\n    const len = data.length;\n    let p = 0;\n    if (outgoing.state !== 'open') return;\n\n    while (len - p > 0 && window > 0) {\n      let sliceLen = len - p;\n      if (sliceLen > window) sliceLen = window;\n      if (sliceLen > packetSize) sliceLen = packetSize;\n      if (p === 0 && sliceLen === len) protocol.channelData(id, data);else protocol.channelData(id, bufferSlice(data, p, p + sliceLen));\n      p += sliceLen;\n      window -= sliceLen;\n    }\n\n    outgoing.window = window;\n\n    if (len - p > 0) {\n      if (window === 0) this._waitWindow = true;\n      if (p > 0) this._chunk = bufferSlice(data, p, len);else this._chunk = data;\n      this._chunkcb = cb;\n      return;\n    }\n\n    cb();\n  }\n\n  eof() {\n    if (this.outgoing.state === 'open') {\n      this.outgoing.state = 'eof';\n\n      this._client._protocol.channelEOF(this.outgoing.id);\n    }\n  }\n\n  close() {\n    if (this.outgoing.state === 'open' || this.outgoing.state === 'eof') {\n      this.outgoing.state = 'closing';\n\n      this._client._protocol.channelClose(this.outgoing.id);\n    }\n  }\n\n  destroy() {\n    this.end();\n    this.close();\n    return this;\n  } // Session type-specific methods =============================================\n\n\n  setWindow(rows, cols, height, width) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    if (this.type === 'session' && (this.subtype === 'shell' || this.subtype === 'exec') && this.writable && this.outgoing.state === 'open') {\n      this._client._protocol.windowChange(this.outgoing.id, rows, cols, height, width);\n    }\n  }\n\n  signal(signalName) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n\n    if (this.type === 'session' && this.writable && this.outgoing.state === 'open') {\n      this._client._protocol.signal(this.outgoing.id, signalName);\n    }\n  }\n\n  exit(statusOrSignal, coreDumped, msg) {\n    if (!this.server) throw new Error('Server-only method called in client mode');\n\n    if (this.type === 'session' && this.writable && this.outgoing.state === 'open') {\n      if (typeof statusOrSignal === 'number') {\n        this._client._protocol.exitStatus(this.outgoing.id, statusOrSignal);\n      } else {\n        this._client._protocol.exitSignal(this.outgoing.id, statusOrSignal, coreDumped, msg);\n      }\n    }\n  }\n\n}\n\nfunction onFinish() {\n  this.eof();\n  if (this.server || !this.allowHalfOpen) this.close();\n  this.writable = false;\n}\n\nfunction onEnd() {\n  this.readable = false;\n}\n\nfunction windowAdjust(self) {\n  if (self.outgoing.state === 'closed') return;\n  const amt = MAX_WINDOW - self.incoming.window;\n  if (amt <= 0) return;\n  self.incoming.window += amt;\n\n  self._client._protocol.channelWindowAdjust(self.outgoing.id, amt);\n}\n\nmodule.exports = {\n  Channel,\n  MAX_WINDOW,\n  PACKET_SIZE,\n  windowAdjust,\n  WINDOW_THRESHOLD\n};","map":{"version":3,"names":["Duplex","DuplexStream","Readable","ReadableStream","Writable","WritableStream","require","CHANNEL_EXTENDED_DATATYPE","STDERR","bufferSlice","PACKET_SIZE","MAX_WINDOW","WINDOW_THRESHOLD","ClientStderr","constructor","channel","streamOpts","_channel","_read","n","_waitChanDrain","incoming","window","windowAdjust","ServerStderr","highWaterMark","_write","data","encoding","cb","protocol","_client","_protocol","outgoing","packetSize","id","len","length","p","state","sliceLen","channelExtData","_waitWindow","_chunkErr","_chunkcbErr","Channel","client","info","opts","allowHalfOpen","emitClose","server","type","subtype","undefined","_callbacks","_hasX11","_exit","code","signal","dump","desc","stdin","stdout","stderr","_chunk","_chunkcb","on","onFinish","onEnd","channelData","eof","channelEOF","close","channelClose","destroy","end","setWindow","rows","cols","height","width","Error","writable","windowChange","signalName","exit","statusOrSignal","coreDumped","msg","exitStatus","exitSignal","readable","self","amt","channelWindowAdjust","module","exports"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/ssh2/lib/Channel.js"],"sourcesContent":["'use strict';\n\nconst {\n  Duplex: DuplexStream,\n  Readable: ReadableStream,\n  Writable: WritableStream,\n} = require('stream');\n\nconst {\n  CHANNEL_EXTENDED_DATATYPE: { STDERR },\n} = require('./protocol/constants.js');\nconst { bufferSlice } = require('./protocol/utils.js');\n\nconst PACKET_SIZE = 32 * 1024;\nconst MAX_WINDOW = 2 * 1024 * 1024;\nconst WINDOW_THRESHOLD = MAX_WINDOW / 2;\n\nclass ClientStderr extends ReadableStream {\n  constructor(channel, streamOpts) {\n    super(streamOpts);\n\n    this._channel = channel;\n  }\n  _read(n) {\n    if (this._channel._waitChanDrain) {\n      this._channel._waitChanDrain = false;\n      if (this._channel.incoming.window <= WINDOW_THRESHOLD)\n        windowAdjust(this._channel);\n    }\n  }\n}\n\nclass ServerStderr extends WritableStream {\n  constructor(channel) {\n    super({ highWaterMark: MAX_WINDOW });\n\n    this._channel = channel;\n  }\n\n  _write(data, encoding, cb) {\n    const channel = this._channel;\n    const protocol = channel._client._protocol;\n    const outgoing = channel.outgoing;\n    const packetSize = outgoing.packetSize;\n    const id = outgoing.id;\n    let window = outgoing.window;\n    const len = data.length;\n    let p = 0;\n\n    if (outgoing.state !== 'open')\n      return;\n\n    while (len - p > 0 && window > 0) {\n      let sliceLen = len - p;\n      if (sliceLen > window)\n        sliceLen = window;\n      if (sliceLen > packetSize)\n        sliceLen = packetSize;\n\n      if (p === 0 && sliceLen === len)\n        protocol.channelExtData(id, data, STDERR);\n      else\n        protocol.channelExtData(id, bufferSlice(data, p, p + sliceLen), STDERR);\n\n      p += sliceLen;\n      window -= sliceLen;\n    }\n\n    outgoing.window = window;\n\n    if (len - p > 0) {\n      if (window === 0)\n        channel._waitWindow = true;\n      if (p > 0)\n        channel._chunkErr = bufferSlice(data, p, len);\n      else\n        channel._chunkErr = data;\n      channel._chunkcbErr = cb;\n      return;\n    }\n\n    cb();\n  }\n}\n\nclass Channel extends DuplexStream {\n  constructor(client, info, opts) {\n    const streamOpts = {\n      highWaterMark: MAX_WINDOW,\n      allowHalfOpen: (!opts || (opts && opts.allowHalfOpen !== false)),\n      emitClose: false,\n    };\n    super(streamOpts);\n    this.allowHalfOpen = streamOpts.allowHalfOpen;\n\n    const server = !!(opts && opts.server);\n\n    this.server = server;\n    this.type = info.type;\n    this.subtype = undefined;\n\n    /*\n      incoming and outgoing contain these properties:\n      {\n        id: undefined,\n        window: undefined,\n        packetSize: undefined,\n        state: 'closed'\n      }\n    */\n    this.incoming = info.incoming;\n    this.outgoing = info.outgoing;\n    this._callbacks = [];\n\n    this._client = client;\n    this._hasX11 = false;\n    this._exit = {\n      code: undefined,\n      signal: undefined,\n      dump: undefined,\n      desc: undefined,\n    };\n\n    this.stdin = this.stdout = this;\n\n    if (server)\n      this.stderr = new ServerStderr(this);\n    else\n      this.stderr = new ClientStderr(this, streamOpts);\n\n    // Outgoing data\n    this._waitWindow = false; // SSH-level backpressure\n\n    // Incoming data\n    this._waitChanDrain = false; // Channel Readable side backpressure\n\n    this._chunk = undefined;\n    this._chunkcb = undefined;\n    this._chunkErr = undefined;\n    this._chunkcbErr = undefined;\n\n    this.on('finish', onFinish)\n        .on('prefinish', onFinish); // For node v0.11+\n\n    this.on('end', onEnd).on('close', onEnd);\n  }\n\n  _read(n) {\n    if (this._waitChanDrain) {\n      this._waitChanDrain = false;\n      if (this.incoming.window <= WINDOW_THRESHOLD)\n        windowAdjust(this);\n    }\n  }\n\n  _write(data, encoding, cb) {\n    const protocol = this._client._protocol;\n    const outgoing = this.outgoing;\n    const packetSize = outgoing.packetSize;\n    const id = outgoing.id;\n    let window = outgoing.window;\n    const len = data.length;\n    let p = 0;\n\n    if (outgoing.state !== 'open')\n      return;\n\n    while (len - p > 0 && window > 0) {\n      let sliceLen = len - p;\n      if (sliceLen > window)\n        sliceLen = window;\n      if (sliceLen > packetSize)\n        sliceLen = packetSize;\n\n      if (p === 0 && sliceLen === len)\n        protocol.channelData(id, data);\n      else\n        protocol.channelData(id, bufferSlice(data, p, p + sliceLen));\n\n      p += sliceLen;\n      window -= sliceLen;\n    }\n\n    outgoing.window = window;\n\n    if (len - p > 0) {\n      if (window === 0)\n        this._waitWindow = true;\n      if (p > 0)\n        this._chunk = bufferSlice(data, p, len);\n      else\n        this._chunk = data;\n      this._chunkcb = cb;\n      return;\n    }\n\n    cb();\n  }\n\n  eof() {\n    if (this.outgoing.state === 'open') {\n      this.outgoing.state = 'eof';\n      this._client._protocol.channelEOF(this.outgoing.id);\n    }\n  }\n\n  close() {\n    if (this.outgoing.state === 'open' || this.outgoing.state === 'eof') {\n      this.outgoing.state = 'closing';\n      this._client._protocol.channelClose(this.outgoing.id);\n    }\n  }\n\n  destroy() {\n    this.end();\n    this.close();\n    return this;\n  }\n\n  // Session type-specific methods =============================================\n  setWindow(rows, cols, height, width) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    if (this.type === 'session'\n        && (this.subtype === 'shell' || this.subtype === 'exec')\n        && this.writable\n        && this.outgoing.state === 'open') {\n      this._client._protocol.windowChange(this.outgoing.id,\n                                          rows,\n                                          cols,\n                                          height,\n                                          width);\n    }\n  }\n\n  signal(signalName) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    if (this.type === 'session'\n        && this.writable\n        && this.outgoing.state === 'open') {\n      this._client._protocol.signal(this.outgoing.id, signalName);\n    }\n  }\n\n  exit(statusOrSignal, coreDumped, msg) {\n    if (!this.server)\n      throw new Error('Server-only method called in client mode');\n\n    if (this.type === 'session'\n        && this.writable\n        && this.outgoing.state === 'open') {\n      if (typeof statusOrSignal === 'number') {\n        this._client._protocol.exitStatus(this.outgoing.id, statusOrSignal);\n      } else {\n        this._client._protocol.exitSignal(this.outgoing.id,\n                                          statusOrSignal,\n                                          coreDumped,\n                                          msg);\n      }\n    }\n  }\n\n}\n\nfunction onFinish() {\n  this.eof();\n  if (this.server || !this.allowHalfOpen)\n    this.close();\n  this.writable = false;\n}\n\nfunction onEnd() {\n  this.readable = false;\n}\n\nfunction windowAdjust(self) {\n  if (self.outgoing.state === 'closed')\n    return;\n  const amt = MAX_WINDOW - self.incoming.window;\n  if (amt <= 0)\n    return;\n  self.incoming.window += amt;\n  self._client._protocol.channelWindowAdjust(self.outgoing.id, amt);\n}\n\nmodule.exports = {\n  Channel,\n  MAX_WINDOW,\n  PACKET_SIZE,\n  windowAdjust,\n  WINDOW_THRESHOLD,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}