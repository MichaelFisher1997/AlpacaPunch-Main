{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\n\nconst {\n  inspect\n} = require('util'); // Only use this for integers! Decimal numbers do not work with this function.\n\n\nfunction addNumericalSeparator(val) {\n  let res = '';\n  let i = val.length;\n  const start = val[0] === '-' ? 1 : 0;\n\n  for (; i >= start + 4; i -= 3) res = `_${val.slice(i - 3, i)}${res}`;\n\n  return `${val.slice(0, i)}${res}`;\n}\n\nfunction oneOf(expected, thing) {\n  assert(typeof thing === 'string', '`thing` has to be of type string');\n\n  if (Array.isArray(expected)) {\n    const len = expected.length;\n    assert(len > 0, 'At least one expected value needs to be specified');\n    expected = expected.map(i => String(i));\n\n    if (len > 2) {\n      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` + expected[len - 1];\n    } else if (len === 2) {\n      return `one of ${thing} ${expected[0]} or ${expected[1]}`;\n    }\n\n    return `of ${thing} ${expected[0]}`;\n  }\n\n  return `of ${thing} ${String(expected)}`;\n}\n\nexports.ERR_INTERNAL_ASSERTION = class ERR_INTERNAL_ASSERTION extends Error {\n  constructor(message) {\n    super();\n    Error.captureStackTrace(this, ERR_INTERNAL_ASSERTION);\n    const suffix = 'This is caused by either a bug in ssh2 ' + 'or incorrect usage of ssh2 internals.\\n' + 'Please open an issue with this stack trace at ' + 'https://github.com/mscdex/ssh2/issues\\n';\n    this.message = message === undefined ? suffix : `${message}\\n${suffix}`;\n  }\n\n};\nconst MAX_32BIT_INT = 2 ** 32;\n\nconst MAX_32BIT_BIGINT = (() => {\n  try {\n    return new Function('return 2n ** 32n')();\n  } catch {}\n})();\n\nexports.ERR_OUT_OF_RANGE = class ERR_OUT_OF_RANGE extends RangeError {\n  constructor(str, range, input, replaceDefaultBoolean) {\n    super();\n    Error.captureStackTrace(this, ERR_OUT_OF_RANGE);\n    assert(range, 'Missing \"range\" argument');\n    let msg = replaceDefaultBoolean ? str : `The value of \"${str}\" is out of range.`;\n    let received;\n\n    if (Number.isInteger(input) && Math.abs(input) > MAX_32BIT_INT) {\n      received = addNumericalSeparator(String(input));\n    } else if (typeof input === 'bigint') {\n      received = String(input);\n      if (input > MAX_32BIT_BIGINT || input < -MAX_32BIT_BIGINT) received = addNumericalSeparator(received);\n      received += 'n';\n    } else {\n      received = inspect(input);\n    }\n\n    msg += ` It must be ${range}. Received ${received}`;\n    this.message = msg;\n  }\n\n};\n\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor(name, expected, actual) {\n    super();\n    Error.captureStackTrace(this, ERR_INVALID_ARG_TYPE);\n    assert(typeof name === 'string', `'name' must be a string`); // determiner: 'must be' or 'must not be'\n\n    let determiner;\n\n    if (typeof expected === 'string' && expected.startsWith('not ')) {\n      determiner = 'must not be';\n      expected = expected.replace(/^not /, '');\n    } else {\n      determiner = 'must be';\n    }\n\n    let msg;\n\n    if (name.endsWith(' argument')) {\n      // For cases like 'first argument'\n      msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;\n    } else {\n      const type = name.includes('.') ? 'property' : 'argument';\n      msg = `The \"${name}\" ${type} ${determiner} ${oneOf(expected, 'type')}`;\n    }\n\n    msg += `. Received type ${typeof actual}`;\n    this.message = msg;\n  }\n\n}\n\nexports.ERR_INVALID_ARG_TYPE = ERR_INVALID_ARG_TYPE;\n\nexports.validateNumber = function validateNumber(value, name) {\n  if (typeof value !== 'number') throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\n};","map":{"version":3,"names":["assert","require","inspect","addNumericalSeparator","val","res","i","length","start","slice","oneOf","expected","thing","Array","isArray","len","map","String","join","exports","ERR_INTERNAL_ASSERTION","Error","constructor","message","captureStackTrace","suffix","undefined","MAX_32BIT_INT","MAX_32BIT_BIGINT","Function","ERR_OUT_OF_RANGE","RangeError","str","range","input","replaceDefaultBoolean","msg","received","Number","isInteger","Math","abs","ERR_INVALID_ARG_TYPE","TypeError","name","actual","determiner","startsWith","replace","endsWith","type","includes","validateNumber","value"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/ssh2/lib/protocol/node-fs-compat.js"],"sourcesContent":["'use strict';\n\nconst assert = require('assert');\nconst { inspect } = require('util');\n\n// Only use this for integers! Decimal numbers do not work with this function.\nfunction addNumericalSeparator(val) {\n  let res = '';\n  let i = val.length;\n  const start = val[0] === '-' ? 1 : 0;\n  for (; i >= start + 4; i -= 3)\n    res = `_${val.slice(i - 3, i)}${res}`;\n  return `${val.slice(0, i)}${res}`;\n}\n\nfunction oneOf(expected, thing) {\n  assert(typeof thing === 'string', '`thing` has to be of type string');\n  if (Array.isArray(expected)) {\n    const len = expected.length;\n    assert(len > 0, 'At least one expected value needs to be specified');\n    expected = expected.map((i) => String(i));\n    if (len > 2) {\n      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or `\n              + expected[len - 1];\n    } else if (len === 2) {\n      return `one of ${thing} ${expected[0]} or ${expected[1]}`;\n    }\n    return `of ${thing} ${expected[0]}`;\n  }\n  return `of ${thing} ${String(expected)}`;\n}\n\n\nexports.ERR_INTERNAL_ASSERTION = class ERR_INTERNAL_ASSERTION extends Error {\n  constructor(message) {\n    super();\n    Error.captureStackTrace(this, ERR_INTERNAL_ASSERTION);\n\n    const suffix = 'This is caused by either a bug in ssh2 '\n                   + 'or incorrect usage of ssh2 internals.\\n'\n                   + 'Please open an issue with this stack trace at '\n                   + 'https://github.com/mscdex/ssh2/issues\\n';\n\n    this.message = (message === undefined ? suffix : `${message}\\n${suffix}`);\n  }\n};\n\nconst MAX_32BIT_INT = 2 ** 32;\nconst MAX_32BIT_BIGINT = (() => {\n  try {\n    return new Function('return 2n ** 32n')();\n  } catch {}\n})();\nexports.ERR_OUT_OF_RANGE = class ERR_OUT_OF_RANGE extends RangeError {\n  constructor(str, range, input, replaceDefaultBoolean) {\n    super();\n    Error.captureStackTrace(this, ERR_OUT_OF_RANGE);\n\n    assert(range, 'Missing \"range\" argument');\n    let msg = (replaceDefaultBoolean\n               ? str\n               : `The value of \"${str}\" is out of range.`);\n    let received;\n    if (Number.isInteger(input) && Math.abs(input) > MAX_32BIT_INT) {\n      received = addNumericalSeparator(String(input));\n    } else if (typeof input === 'bigint') {\n      received = String(input);\n      if (input > MAX_32BIT_BIGINT || input < -MAX_32BIT_BIGINT)\n        received = addNumericalSeparator(received);\n      received += 'n';\n    } else {\n      received = inspect(input);\n    }\n    msg += ` It must be ${range}. Received ${received}`;\n\n    this.message = msg;\n  }\n};\n\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor(name, expected, actual) {\n    super();\n    Error.captureStackTrace(this, ERR_INVALID_ARG_TYPE);\n\n    assert(typeof name === 'string', `'name' must be a string`);\n\n    // determiner: 'must be' or 'must not be'\n    let determiner;\n    if (typeof expected === 'string' && expected.startsWith('not ')) {\n      determiner = 'must not be';\n      expected = expected.replace(/^not /, '');\n    } else {\n      determiner = 'must be';\n    }\n\n    let msg;\n    if (name.endsWith(' argument')) {\n      // For cases like 'first argument'\n      msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;\n    } else {\n      const type = (name.includes('.') ? 'property' : 'argument');\n      msg = `The \"${name}\" ${type} ${determiner} ${oneOf(expected, 'type')}`;\n    }\n\n    msg += `. Received type ${typeof actual}`;\n\n    this.message = msg;\n  }\n}\nexports.ERR_INVALID_ARG_TYPE = ERR_INVALID_ARG_TYPE;\n\nexports.validateNumber = function validateNumber(value, name) {\n  if (typeof value !== 'number')\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}