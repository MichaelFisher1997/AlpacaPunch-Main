{"ast":null,"code":"const {\n  Zilliqa\n} = require('@zilliqa-js/zilliqa');\n\nconst {\n  getPubKeyFromPrivateKey\n} = require('@zilliqa-js/crypto');\n\nconst {\n  BN,\n  Long,\n  bytes,\n  units\n} = require('@zilliqa-js/util');\n\nconst api = 'https://dev-api.zilliqa.com';\nconst chainId = 333; // Testnet\n\nconst msgVersion = 1;\nconst zilliqa = new Zilliqa(api);\nconst toAddress = 'BENCH32_ADDRESS';\nconst fromPrivateKey = 'SENDER_PRIVATE_KEY';\nconst fromPublicKey = getPubKeyFromPrivateKey(fromPrivateKey);\nconst fromAddress = getAddressFromPrivateKey(fromPrivateKey);\nconst amountToSendInZil = 0.17;\nconst gasPriceInZil = 0.002;\nconst nextNonce = (await zilliqa.blockchain.getBalance(fromAddress)).result.nonce + 1;\nconst rawTx = zilliqa.transactions.new({\n  version: bytes.pack(chainId, msgVersion),\n  amount: new BN(units.toQa(amountToSendInZil * 100000, units.Units.Li)),\n  nonce: nextNonce,\n  gasLimit: Long.fromNumber(50),\n  // normal (non-contract) transactions cost 50 gas after network upgrade in mid april 2021\n  gasPrice: new BN(units.toQa(gasPriceInZil * 1000000, units.Units.Li)),\n  // the minimum gas price is 1,000 li\n  toAddr: toAddress,\n  pubKey: fromPublicKey // this determines which account is used to send the tx\n\n});\nzilliqa.wallet.addByPrivateKey(fromPrivateKey); // signWith uses the specified address to perform the signing of the transaction.\n// note that we provided the nonce to use when constructing the transaction.\n// if the nonce is not provided, zilliqa-js will automatically try to determine the correct nonce to use.\n// however, if there is no network connection, zilliqa-js will not be able to\n// do that, and signing will fail.\n\nconst signedTx = await zilliqa.wallet.signWith(rawTx, fromAddress);\nconsole.log(signedTx.txParams.signature); // 128-bit signature\n\nconst res = await zilliqa.provider.send('CreateTransaction', signedTx.txParams);\nconsole.log(res.result && res.result.TranID); // 32-byte transaction hash\n// returns a Promise<Transaction>\n// in this case, we try polling the node 33 times, increasing the interval\n// between attempts by 1000ms each time. this works out roughly to the block\n// time on the Zilliqa main net.\n\nconst tx = await signedTx.confirm(res.result.TranID, 33, 1000);\nassert(signedTx.isConfirmed() === true);\nexport default rawTx;","map":{"version":3,"names":["Zilliqa","require","getPubKeyFromPrivateKey","BN","Long","bytes","units","api","chainId","msgVersion","zilliqa","toAddress","fromPrivateKey","fromPublicKey","fromAddress","getAddressFromPrivateKey","amountToSendInZil","gasPriceInZil","nextNonce","blockchain","getBalance","result","nonce","rawTx","transactions","new","version","pack","amount","toQa","Units","Li","gasLimit","fromNumber","gasPrice","toAddr","pubKey","wallet","addByPrivateKey","signedTx","signWith","console","log","txParams","signature","res","provider","send","TranID","tx","confirm","assert","isConfirmed"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/src/components/Navbar/ZilAssets/PayableZil.js"],"sourcesContent":["const { Zilliqa } = require('@zilliqa-js/zilliqa');\nconst { getPubKeyFromPrivateKey } = require('@zilliqa-js/crypto');\nconst { BN, Long, bytes, units } = require('@zilliqa-js/util');\n\nconst api = 'https://dev-api.zilliqa.com';\nconst chainId = 333; // Testnet\nconst msgVersion = 1;\nconst zilliqa = new Zilliqa(api);\n\nconst toAddress = 'BENCH32_ADDRESS';\nconst fromPrivateKey = 'SENDER_PRIVATE_KEY';\nconst fromPublicKey = getPubKeyFromPrivateKey(fromPrivateKey);\nconst fromAddress = getAddressFromPrivateKey(fromPrivateKey);\nconst amountToSendInZil = 0.17;\nconst gasPriceInZil = 0.002;\nconst nextNonce =\n  (await zilliqa.blockchain.getBalance(fromAddress)).result.nonce + 1;\n\nconst rawTx = zilliqa.transactions.new({\n  version: bytes.pack(chainId, msgVersion),\n  amount: new BN(units.toQa(amountToSendInZil * 100000, units.Units.Li)),\n  nonce: nextNonce,\n  gasLimit: Long.fromNumber(50), // normal (non-contract) transactions cost 50 gas after network upgrade in mid april 2021\n  gasPrice: new BN(units.toQa(gasPriceInZil * 1000000, units.Units.Li)), // the minimum gas price is 1,000 li\n  toAddr: toAddress,\n  pubKey: fromPublicKey, // this determines which account is used to send the tx\n});\n\n\nzilliqa.wallet.addByPrivateKey(fromPrivateKey);\n// signWith uses the specified address to perform the signing of the transaction.\n// note that we provided the nonce to use when constructing the transaction.\n// if the nonce is not provided, zilliqa-js will automatically try to determine the correct nonce to use.\n// however, if there is no network connection, zilliqa-js will not be able to\n// do that, and signing will fail.\nconst signedTx = await zilliqa.wallet.signWith(rawTx, fromAddress);\n\nconsole.log(signedTx.txParams.signature); // 128-bit signature\n\nconst res = await zilliqa.provider.send('CreateTransaction', signedTx.txParams);\n\nconsole.log(res.result && res.result.TranID); // 32-byte transaction hash\n\n// returns a Promise<Transaction>\n// in this case, we try polling the node 33 times, increasing the interval\n// between attempts by 1000ms each time. this works out roughly to the block\n// time on the Zilliqa main net.\nconst tx = await signedTx.confirm(res.result.TranID, 33, 1000);\n\nassert(signedTx.isConfirmed() === true);\n\n\nexport default rawTx;"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAcC,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;EAAEC;AAAF,IAA8BD,OAAO,CAAC,oBAAD,CAA3C;;AACA,MAAM;EAAEE,EAAF;EAAMC,IAAN;EAAYC,KAAZ;EAAmBC;AAAnB,IAA6BL,OAAO,CAAC,kBAAD,CAA1C;;AAEA,MAAMM,GAAG,GAAG,6BAAZ;AACA,MAAMC,OAAO,GAAG,GAAhB,C,CAAqB;;AACrB,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,OAAO,GAAG,IAAIV,OAAJ,CAAYO,GAAZ,CAAhB;AAEA,MAAMI,SAAS,GAAG,iBAAlB;AACA,MAAMC,cAAc,GAAG,oBAAvB;AACA,MAAMC,aAAa,GAAGX,uBAAuB,CAACU,cAAD,CAA7C;AACA,MAAME,WAAW,GAAGC,wBAAwB,CAACH,cAAD,CAA5C;AACA,MAAMI,iBAAiB,GAAG,IAA1B;AACA,MAAMC,aAAa,GAAG,KAAtB;AACA,MAAMC,SAAS,GACb,CAAC,MAAMR,OAAO,CAACS,UAAR,CAAmBC,UAAnB,CAA8BN,WAA9B,CAAP,EAAmDO,MAAnD,CAA0DC,KAA1D,GAAkE,CADpE;AAGA,MAAMC,KAAK,GAAGb,OAAO,CAACc,YAAR,CAAqBC,GAArB,CAAyB;EACrCC,OAAO,EAAErB,KAAK,CAACsB,IAAN,CAAWnB,OAAX,EAAoBC,UAApB,CAD4B;EAErCmB,MAAM,EAAE,IAAIzB,EAAJ,CAAOG,KAAK,CAACuB,IAAN,CAAWb,iBAAiB,GAAG,MAA/B,EAAuCV,KAAK,CAACwB,KAAN,CAAYC,EAAnD,CAAP,CAF6B;EAGrCT,KAAK,EAAEJ,SAH8B;EAIrCc,QAAQ,EAAE5B,IAAI,CAAC6B,UAAL,CAAgB,EAAhB,CAJ2B;EAIN;EAC/BC,QAAQ,EAAE,IAAI/B,EAAJ,CAAOG,KAAK,CAACuB,IAAN,CAAWZ,aAAa,GAAG,OAA3B,EAAoCX,KAAK,CAACwB,KAAN,CAAYC,EAAhD,CAAP,CAL2B;EAKkC;EACvEI,MAAM,EAAExB,SAN6B;EAOrCyB,MAAM,EAAEvB,aAP6B,CAOd;;AAPc,CAAzB,CAAd;AAWAH,OAAO,CAAC2B,MAAR,CAAeC,eAAf,CAA+B1B,cAA/B,E,CACA;AACA;AACA;AACA;AACA;;AACA,MAAM2B,QAAQ,GAAG,MAAM7B,OAAO,CAAC2B,MAAR,CAAeG,QAAf,CAAwBjB,KAAxB,EAA+BT,WAA/B,CAAvB;AAEA2B,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,QAAT,CAAkBC,SAA9B,E,CAA0C;;AAE1C,MAAMC,GAAG,GAAG,MAAMnC,OAAO,CAACoC,QAAR,CAAiBC,IAAjB,CAAsB,mBAAtB,EAA2CR,QAAQ,CAACI,QAApD,CAAlB;AAEAF,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACxB,MAAJ,IAAcwB,GAAG,CAACxB,MAAJ,CAAW2B,MAArC,E,CAA8C;AAE9C;AACA;AACA;AACA;;AACA,MAAMC,EAAE,GAAG,MAAMV,QAAQ,CAACW,OAAT,CAAiBL,GAAG,CAACxB,MAAJ,CAAW2B,MAA5B,EAAoC,EAApC,EAAwC,IAAxC,CAAjB;AAEAG,MAAM,CAACZ,QAAQ,CAACa,WAAT,OAA2B,IAA5B,CAAN;AAGA,eAAe7B,KAAf"},"metadata":{},"sourceType":"module"}