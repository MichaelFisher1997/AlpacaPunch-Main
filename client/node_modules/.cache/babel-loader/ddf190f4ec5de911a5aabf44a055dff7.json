{"ast":null,"code":"const {\n  Zilliqa\n} = require('@zilliqa-js/zilliqa'); //zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k\n//grabs blockchain\n\n\nconst blockchain = () => window.zilPay.blockchain;\n\nconst zil = 0.063; //GBP to zil converter\n\nfunction convert(GBP) {\n  let con = zil * GBP;\n  return {\n    con\n  };\n}\n/*const status = await connect();\nstatus === window.zilPay.wallet.isConnect;*/\n//Connect\n\n\nconst Connect = () => {\n  window.zilPay.wallet.connect().then(function (retVal) {\n    console.log(retVal);\n\n    if (retVal) {\n      console.log(window.zilPay.wallet.defaultAccount.bech32);\n    }\n  });\n};\n\n_c = Connect;\n\nfunction payable() {\n  let tx = zilliqa.transactions.new({\n    version: 65537,\n    toAddr: 'zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k',\n    amount: units.toQa('1', units.Units.Zil),\n    gasPrice: units.toQa('2000', units.Units.Li),\n    gasLimit: Long.fromNumber(50)\n  });\n}\n\nexport { Connect, blockchain }; //zilliqa, privateKey, bytes, units, recipientAddress, sendingAmount are defined in the codebase before\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect\");","map":{"version":3,"names":["Zilliqa","require","blockchain","window","zilPay","zil","convert","GBP","con","Connect","wallet","connect","then","retVal","console","log","defaultAccount","bech32","payable","tx","zilliqa","transactions","new","version","toAddr","amount","units","toQa","Units","Zil","gasPrice","Li","gasLimit","Long","fromNumber"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/src/components/Navbar/ZilAssets/zilFunctions.js"],"sourcesContent":["const { Zilliqa } = require('@zilliqa-js/zilliqa');\n\n//zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k\n\n//grabs blockchain\n const blockchain = () => window.zilPay.blockchain;\n\n const zil = 0.063;\n\n\n //GBP to zil converter\n function convert(GBP){\n   let con = zil*GBP\n    return{\n      con\n    }\n }\n\n \n /*const status = await connect();\n status === window.zilPay.wallet.isConnect;*/\n \n\n\n  //Connect\n  const Connect = () => {\n    window.zilPay.wallet.connect().then(function(retVal){\n      console.log(retVal)\n      if(retVal){console.log(window.zilPay.wallet.defaultAccount.bech32)}\n      \n     })\n  }\n\n  function payable() {\n    let tx = zilliqa.transactions.new({\n      version: 65537,\n      toAddr: 'zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k',\n      amount: units.toQa('1', units.Units.Zil),\n      gasPrice: units.toQa('2000', units.Units.Li),\n      gasLimit: Long.fromNumber(50),\n    });\n\n  }\n\n  \n \n\n\n\n  \n\n\n  \n\n\n  \n\n\n    export {Connect, blockchain};\n\n    //zilliqa, privateKey, bytes, units, recipientAddress, sendingAmount are defined in the codebase before\n\n"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAcC,OAAO,CAAC,qBAAD,CAA3B,C,CAEA;AAEA;;;AACC,MAAMC,UAAU,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcF,UAAvC;;AAEA,MAAMG,GAAG,GAAG,KAAZ,C,CAGA;;AACA,SAASC,OAAT,CAAiBC,GAAjB,EAAqB;EACnB,IAAIC,GAAG,GAAGH,GAAG,GAACE,GAAd;EACC,OAAM;IACJC;EADI,CAAN;AAGF;AAGD;AACD;AAIE;;;AACA,MAAMC,OAAO,GAAG,MAAM;EACpBN,MAAM,CAACC,MAAP,CAAcM,MAAd,CAAqBC,OAArB,GAA+BC,IAA/B,CAAoC,UAASC,MAAT,EAAgB;IAClDC,OAAO,CAACC,GAAR,CAAYF,MAAZ;;IACA,IAAGA,MAAH,EAAU;MAACC,OAAO,CAACC,GAAR,CAAYZ,MAAM,CAACC,MAAP,CAAcM,MAAd,CAAqBM,cAArB,CAAoCC,MAAhD;IAAwD;EAEnE,CAJF;AAKD,CAND;;KAAMR,O;;AAQN,SAASS,OAAT,GAAmB;EACjB,IAAIC,EAAE,GAAGC,OAAO,CAACC,YAAR,CAAqBC,GAArB,CAAyB;IAChCC,OAAO,EAAE,KADuB;IAEhCC,MAAM,EAAE,4CAFwB;IAGhCC,MAAM,EAAEC,KAAK,CAACC,IAAN,CAAW,GAAX,EAAgBD,KAAK,CAACE,KAAN,CAAYC,GAA5B,CAHwB;IAIhCC,QAAQ,EAAEJ,KAAK,CAACC,IAAN,CAAW,MAAX,EAAmBD,KAAK,CAACE,KAAN,CAAYG,EAA/B,CAJsB;IAKhCC,QAAQ,EAAEC,IAAI,CAACC,UAAL,CAAgB,EAAhB;EALsB,CAAzB,CAAT;AAQD;;AAgBC,SAAQzB,OAAR,EAAiBP,UAAjB,G,CAEA"},"metadata":{},"sourceType":"module"}