{"ast":null,"code":"const mysql = require('mysql2');\n\nconst {\n  Client\n} = require('ssh2'); // create an instance of SSH Client\n\n\nconst sshClient = new Client(); // define connection config for the database\n\nconst dbServer = {\n  host: '139.162.192.227',\n  port: '3306',\n  user: 'remoteAlpaca',\n  password: 'Alpaca123',\n  database: 'AlpacaData'\n}; // define connection config for the ssh tunnel\n\nconst tunnelConfig = {\n  host: '139.162.192.227',\n  port: 22,\n  username: 'root',\n  password: 'Alpaca123'\n};\nconst forwardConfig = {\n  srcHost: '127.0.0.1',\n  srcPort: 3306,\n  dstHost: dbServer.host,\n  dstPort: dbServer.port\n};\nconst SSHConnection = new Promise((resolve, reject) => {\n  sshClient.on('ready', () => {\n    sshClient.forwardOut(forwardConfig.srcHost, forwardConfig.srcPort, forwardConfig.dstHost, forwardConfig.dstPort, (err, stream) => {\n      if (err) reject(err); // create a new DB server object including stream\n\n      const updatedDbServer = { ...dbServer,\n        stream\n      }; // connect to mysql\n\n      const connection = mysql.createConnection(updatedDbServer); // check for successful connection\n      //  resolve or reject the Promise accordingly  \n\n      connection.connect(error => {\n        if (error) {\n          reject(error);\n        }\n\n        resolve(connection);\n      });\n      connection.query('SELECT * FROM customers', function (err, rows, fields) {\n        if (err) throw err;\n        console.log(rows);\n        connection.end();\n      });\n    });\n  }).connect(tunnelConfig);\n});\nexport default SSHConnection;","map":{"version":3,"names":["mysql","require","Client","sshClient","dbServer","host","port","user","password","database","tunnelConfig","username","forwardConfig","srcHost","srcPort","dstHost","dstPort","SSHConnection","Promise","resolve","reject","on","forwardOut","err","stream","updatedDbServer","connection","createConnection","connect","error","query","rows","fields","console","log","end"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/src/DBfiles/dbtest1.js"],"sourcesContent":["const mysql = require('mysql2');\nconst { Client } = require('ssh2');\n// create an instance of SSH Client\nconst sshClient = new Client();\n\n// define connection config for the database\nconst dbServer = {\n    host: '139.162.192.227',\n    port: '3306',\n    user: 'remoteAlpaca',\n    password: 'Alpaca123',\n    database: 'AlpacaData'\n}\n\n// define connection config for the ssh tunnel\nconst tunnelConfig = {\n    host: '139.162.192.227',\n    port: 22,\n    username: 'root',\n    password: 'Alpaca123'\n}\n\n\nconst forwardConfig = {\n    srcHost: '127.0.0.1',\n    srcPort: 3306,\n    dstHost: dbServer.host,\n    dstPort: dbServer.port\n};\n\n\nconst SSHConnection = new Promise((resolve, reject) => {\n    sshClient.on('ready', () => {\n        sshClient.forwardOut(\n        forwardConfig.srcHost,\n        forwardConfig.srcPort,\n        forwardConfig.dstHost,\n        forwardConfig.dstPort,\n        (err, stream) => {\n             if (err) reject(err);\n             // create a new DB server object including stream\n             const updatedDbServer = {\n                 ...dbServer,\n                 stream\n            };\n            // connect to mysql\n            const connection =  mysql.createConnection(updatedDbServer);\n            // check for successful connection\n           //  resolve or reject the Promise accordingly  \n           connection.connect((error) => {\n            if (error) {\n                reject(error);\n            }\n            resolve(connection);\n            });\n            connection.query('SELECT * FROM customers', function(err, rows, fields) {\n                if (err) throw err;\n                console.log(rows);\n                connection.end();\n                });\n});\n}).connect(tunnelConfig);\n});\n\n\nexport default SSHConnection;\n\n\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAArB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,MAAD,CAA1B,C,CACA;;;AACA,MAAME,SAAS,GAAG,IAAID,MAAJ,EAAlB,C,CAEA;;AACA,MAAME,QAAQ,GAAG;EACbC,IAAI,EAAE,iBADO;EAEbC,IAAI,EAAE,MAFO;EAGbC,IAAI,EAAE,cAHO;EAIbC,QAAQ,EAAE,WAJG;EAKbC,QAAQ,EAAE;AALG,CAAjB,C,CAQA;;AACA,MAAMC,YAAY,GAAG;EACjBL,IAAI,EAAE,iBADW;EAEjBC,IAAI,EAAE,EAFW;EAGjBK,QAAQ,EAAE,MAHO;EAIjBH,QAAQ,EAAE;AAJO,CAArB;AAQA,MAAMI,aAAa,GAAG;EAClBC,OAAO,EAAE,WADS;EAElBC,OAAO,EAAE,IAFS;EAGlBC,OAAO,EAAEX,QAAQ,CAACC,IAHA;EAIlBW,OAAO,EAAEZ,QAAQ,CAACE;AAJA,CAAtB;AAQA,MAAMW,aAAa,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EACnDjB,SAAS,CAACkB,EAAV,CAAa,OAAb,EAAsB,MAAM;IACxBlB,SAAS,CAACmB,UAAV,CACAV,aAAa,CAACC,OADd,EAEAD,aAAa,CAACE,OAFd,EAGAF,aAAa,CAACG,OAHd,EAIAH,aAAa,CAACI,OAJd,EAKA,CAACO,GAAD,EAAMC,MAAN,KAAiB;MACZ,IAAID,GAAJ,EAASH,MAAM,CAACG,GAAD,CAAN,CADG,CAEZ;;MACA,MAAME,eAAe,GAAG,EACpB,GAAGrB,QADiB;QAEpBoB;MAFoB,CAAxB,CAHY,CAOb;;MACA,MAAME,UAAU,GAAI1B,KAAK,CAAC2B,gBAAN,CAAuBF,eAAvB,CAApB,CARa,CASb;MACD;;MACAC,UAAU,CAACE,OAAX,CAAoBC,KAAD,IAAW;QAC7B,IAAIA,KAAJ,EAAW;UACPT,MAAM,CAACS,KAAD,CAAN;QACH;;QACDV,OAAO,CAACO,UAAD,CAAP;MACC,CALF;MAMCA,UAAU,CAACI,KAAX,CAAiB,yBAAjB,EAA4C,UAASP,GAAT,EAAcQ,IAAd,EAAoBC,MAApB,EAA4B;QACpE,IAAIT,GAAJ,EAAS,MAAMA,GAAN;QACTU,OAAO,CAACC,GAAR,CAAYH,IAAZ;QACAL,UAAU,CAACS,GAAX;MACC,CAJL;IAKX,CA3BO;EA4BP,CA7BG,EA6BDP,OA7BC,CA6BOlB,YA7BP;AA8BH,CA/BqB,CAAtB;AAkCA,eAAeO,aAAf"},"metadata":{},"sourceType":"module"}