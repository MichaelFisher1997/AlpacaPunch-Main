{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('mitt'), require('websocket')) : typeof define === 'function' && define.amd ? define(['exports', 'tslib', 'mitt', 'websocket'], factory) : factory(global.zjsSubscriptions = {}, global.tslib, global.mitt, global.websocket);\n})(this, function (exports, tslib, mitt, websocket) {\n  'use strict';\n\n  mitt = mitt && mitt.hasOwnProperty('default') ? mitt['default'] : mitt; //  Copyright (C) 2018 Zilliqa\n\n  (function (SocketConnect) {\n    SocketConnect[\"READY\"] = \"ready\";\n    SocketConnect[\"CONNECT\"] = \"connect\";\n    SocketConnect[\"ERROR\"] = \"error\";\n    SocketConnect[\"CLOSE\"] = \"close\";\n    SocketConnect[\"RECONNECT\"] = \"reconnect\";\n  })(exports.SocketConnect || (exports.SocketConnect = {}));\n\n  (function (SocketState) {\n    SocketState[\"SOCKET_CONNECT\"] = \"socket_connect\";\n    SocketState[\"SOCKET_MESSAGE\"] = \"socket_message\";\n    SocketState[\"SOCKET_READY\"] = \"socket_ready\";\n    SocketState[\"SOCKET_CLOSE\"] = \"socket_close\";\n    SocketState[\"SOCKET_ERROR\"] = \"socket_error\";\n  })(exports.SocketState || (exports.SocketState = {}));\n\n  (function (MessageType) {\n    MessageType[\"NEW_BLOCK\"] = \"NewBlock\";\n    MessageType[\"EVENT_LOG\"] = \"EventLog\";\n    MessageType[\"NOTIFICATION\"] = \"Notification\";\n    MessageType[\"UNSUBSCRIBE\"] = \"Unsubscribe\";\n  })(exports.MessageType || (exports.MessageType = {}));\n\n  (function (QueryParam) {\n    QueryParam[\"NEW_BLOCK\"] = \"NewBlock\";\n    QueryParam[\"EVENT_LOG\"] = \"EventLog\";\n    QueryParam[\"UNSUBSCRIBE\"] = \"Unsubscribe\";\n  })(exports.QueryParam || (exports.QueryParam = {}));\n\n  (function (StatusType) {\n    StatusType[\"SUBSCRIBE_NEW_BLOCK\"] = \"SubscribeNewBlock\";\n    StatusType[\"SUBSCRIBE_EVENT_LOG\"] = \"SubscribeEventLog\";\n  })(exports.StatusType || (exports.StatusType = {})); //  Copyright (C) 2018 Zilliqa\n\n\n  var WebSocketProvider =\n  /** @class */\n  function () {\n    // basically, options is a collection of metadata things like protocol or headers\n    function WebSocketProvider(url, options) {\n      this.handlers = {};\n      this.url = url;\n      this.options = options;\n      this.emitter = new mitt(this.handlers);\n      this.websocket = WebSocketProvider.NewWebSocket(url, options);\n      this.subscriptions = {};\n      this.registerEventListeners();\n    }\n\n    WebSocketProvider.NewWebSocket = function (url, options) {\n      if (typeof window !== 'undefined' && window.WebSocket) {\n        return new WebSocket(url, options !== undefined ? options.protocol : []);\n      } else {\n        var headers = options !== undefined ? options.headers || {} : undefined;\n        var urlObject = new URL(url);\n\n        if (headers !== undefined && !headers.authorization && urlObject.username && urlObject.password) {\n          var authToken = Buffer.from(urlObject.username + \":\" + urlObject.password).toString('base64');\n          headers.authorization = \"Basic \" + authToken;\n        }\n\n        return new websocket.w3cwebsocket(url, options !== undefined ? options.protocol : undefined, undefined, headers, undefined, options !== undefined ? options.clientConfig : undefined);\n      }\n    };\n\n    WebSocketProvider.prototype.registerEventListeners = function () {\n      this.websocket.onopen = this.onConnect.bind(this);\n      this.websocket.onclose = this.onClose.bind(this);\n      this.websocket.onmessage = this.onMessage.bind(this);\n      this.websocket.onerror = this.onError.bind(this);\n    };\n\n    WebSocketProvider.prototype.removeAllSocketListeners = function () {\n      this.removeEventListener(exports.SocketState.SOCKET_MESSAGE);\n      this.removeEventListener(exports.SocketState.SOCKET_READY);\n      this.removeEventListener(exports.SocketState.SOCKET_CLOSE);\n      this.removeEventListener(exports.SocketState.SOCKET_ERROR);\n      this.removeEventListener(exports.SocketState.SOCKET_CONNECT);\n    };\n\n    WebSocketProvider.prototype.removeEventListener = function (type, handler) {\n      if (!type) {\n        this.handlers = {};\n        return;\n      }\n\n      if (!handler) {\n        delete this.handlers[type];\n      } else {\n        return this.emitter.off(type, handler);\n      }\n    };\n\n    WebSocketProvider.prototype.reconnect = function () {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.removeAllSocketListeners();\n\n        _this.websocket = WebSocketProvider.NewWebSocket(_this.url, _this.options);\n\n        _this.registerEventListeners();\n      }, 5000);\n    };\n\n    WebSocketProvider.prototype.onClose = function (event) {\n      return tslib.__awaiter(this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_a) {\n          // reconnect\n          if (this.subscriptions !== null && !event.wasClean) {\n            this.emitter.emit(exports.SocketConnect.RECONNECT, event);\n            this.reconnect();\n            return [2\n            /*return*/\n            ];\n          } // normal close\n\n\n          if (this.websocket.CONNECTING) {\n            this.emitter.emit(exports.SocketConnect.CLOSE, event);\n            this.websocket.close();\n            return [2\n            /*return*/\n            ];\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    WebSocketProvider.prototype.onError = function (event) {\n      this.emitter.emit(exports.SocketConnect.ERROR, event);\n\n      if (this.websocket.CONNECTING) {\n        this.websocket.close();\n      }\n\n      return;\n    };\n\n    WebSocketProvider.prototype.onConnect = function () {\n      return tslib.__awaiter(this, void 0, void 0, function () {\n        var subscriptionKeys, subscriptionKeys_1, subscriptionKeys_1_1, key, id, parameters, e_1_1;\n\n        var e_1, _a;\n\n        return tslib.__generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!this.subscriptions) {\n                this.subscriptions = {};\n              }\n\n              subscriptionKeys = Object.keys(this.subscriptions);\n              if (!(subscriptionKeys.length > 0)) return [3\n              /*break*/\n              , 8];\n              _b.label = 1;\n\n            case 1:\n              _b.trys.push([1, 6, 7, 8]);\n\n              subscriptionKeys_1 = tslib.__values(subscriptionKeys), subscriptionKeys_1_1 = subscriptionKeys_1.next();\n              _b.label = 2;\n\n            case 2:\n              if (!!subscriptionKeys_1_1.done) return [3\n              /*break*/\n              , 5];\n              key = subscriptionKeys_1_1.value;\n              id = key;\n              parameters = this.subscriptions[key].parameters;\n              delete this.subscriptions[id];\n              return [4\n              /*yield*/\n              , this.subscribe(parameters)];\n\n            case 3:\n              _b.sent();\n\n              _b.label = 4;\n\n            case 4:\n              subscriptionKeys_1_1 = subscriptionKeys_1.next();\n              return [3\n              /*break*/\n              , 2];\n\n            case 5:\n              return [3\n              /*break*/\n              , 8];\n\n            case 6:\n              e_1_1 = _b.sent();\n              e_1 = {\n                error: e_1_1\n              };\n              return [3\n              /*break*/\n              , 8];\n\n            case 7:\n              try {\n                if (subscriptionKeys_1_1 && !subscriptionKeys_1_1.done && (_a = subscriptionKeys_1.return)) _a.call(subscriptionKeys_1);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n\n              return [7\n              /*endfinally*/\n              ];\n\n            case 8:\n              this.emitter.emit(exports.SocketState.SOCKET_CONNECT);\n              this.emitter.emit(exports.SocketConnect.CONNECT);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    WebSocketProvider.prototype.onMessage = function (msg) {\n      var e_2, _a;\n\n      if (msg.data) {\n        var dataObj = JSON.parse(msg.data);\n\n        if (dataObj.type === exports.MessageType.NOTIFICATION) {\n          this.emitter.emit(exports.SocketState.SOCKET_MESSAGE, dataObj);\n\n          try {\n            for (var _b = tslib.__values(dataObj.values), _c = _b.next(); !_c.done; _c = _b.next()) {\n              var value = _c.value;\n\n              if (value.query === exports.MessageType.NEW_BLOCK) {\n                this.emitter.emit(exports.MessageType.NEW_BLOCK, value);\n              } else if (value.query === exports.MessageType.EVENT_LOG) {\n                this.emitter.emit(exports.MessageType.EVENT_LOG, value);\n              } else if (value.query === exports.MessageType.UNSUBSCRIBE) {\n                this.emitter.emit(exports.MessageType.UNSUBSCRIBE, value);\n              } else {\n                throw new Error('unsupported value type');\n              }\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        } else if (dataObj.query === exports.QueryParam.NEW_BLOCK) {\n          // subscribe NewBlock succeed\n          this.subscriptions[dataObj.query] = {\n            id: dataObj.query,\n            parameters: dataObj\n          };\n          this.emitter.emit(exports.StatusType.SUBSCRIBE_NEW_BLOCK, dataObj);\n          this.emitter.emit(exports.SocketConnect.RECONNECT);\n        } else if (dataObj.query === exports.QueryParam.EVENT_LOG) {\n          // subscribe EventLog succeed\n          this.subscriptions[dataObj.query] = {\n            id: dataObj.query,\n            parameters: dataObj\n          };\n          this.emitter.emit(exports.StatusType.SUBSCRIBE_EVENT_LOG, dataObj);\n          this.emitter.emit(exports.SocketConnect.RECONNECT);\n        } else if (dataObj.query === exports.QueryParam.UNSUBSCRIBE) {\n          this.emitter.emit(exports.MessageType.UNSUBSCRIBE, dataObj);\n        } else {\n          throw new Error('unsupported message type');\n        }\n      } else {\n        throw new Error('message data is empty');\n      }\n    };\n\n    WebSocketProvider.prototype.addEventListener = function (type, handler) {\n      this.emitter.on(type, handler);\n    };\n\n    WebSocketProvider.prototype.connecting = function () {\n      return this.websocket.readyState === this.websocket.CONNECTING;\n    };\n\n    WebSocketProvider.prototype.send = function (query) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this.connecting()) {\n          try {\n            _this.websocket.send(JSON.stringify(query));\n          } catch (error) {\n            throw error;\n          }\n\n          var queryParam = void 0;\n\n          if (query.query === exports.QueryParam.NEW_BLOCK) {\n            queryParam = exports.StatusType.SUBSCRIBE_NEW_BLOCK;\n          } else if (query.query === exports.QueryParam.EVENT_LOG) {\n            queryParam = exports.StatusType.SUBSCRIBE_EVENT_LOG;\n          } else {\n            queryParam = query.query;\n          }\n\n          _this.emitter.on(queryParam, function (data) {\n            resolve(data);\n          });\n\n          _this.emitter.on(exports.SocketConnect.ERROR, reject);\n        }\n\n        var connectHandler = function () {\n          _this.send(query).then(resolve).catch(reject);\n        };\n\n        var offConnectHandler = function () {\n          _this.emitter.off(exports.SocketConnect.CONNECT, connectHandler);\n        };\n\n        _this.emitter.on(exports.SocketConnect.CONNECT, connectHandler);\n\n        _this.emitter.on(exports.SocketConnect.RECONNECT, offConnectHandler);\n      });\n    };\n\n    WebSocketProvider.prototype.subscribe = function (payload) {\n      return tslib.__awaiter(this, void 0, void 0, function () {\n        var result;\n        return tslib.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.send(payload)];\n\n            case 1:\n              result = _a.sent();\n              return [2\n              /*return*/\n              , result.query === payload.query];\n          }\n        });\n      });\n    };\n\n    WebSocketProvider.prototype.unsubscribe = function (payload) {\n      return tslib.__awaiter(this, void 0, void 0, function () {\n        var result, succeed;\n        return tslib.__generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.send(payload)];\n\n            case 1:\n              result = _a.sent();\n              succeed = result.query === payload.query;\n\n              if (succeed) {\n                this.subscriptions[payload.query] = null;\n              }\n\n              return [2\n              /*return*/\n              , succeed];\n          }\n        });\n      });\n    };\n\n    return WebSocketProvider;\n  }(); //  Copyright (C) 2018 Zilliqa\n\n\n  var Subscription =\n  /** @class */\n  function (_super) {\n    tslib.__extends(Subscription, _super);\n\n    function Subscription(subject, url, options) {\n      var _this = _super.call(this, url, options) || this;\n\n      _this.subject = subject;\n      return _this;\n    }\n\n    Subscription.prototype.start = function () {\n      return tslib.__awaiter(this, void 0, void 0, function () {\n        return tslib.__generator(this, function (_a) {\n          return [2\n          /*return*/\n          , _super.prototype.subscribe.call(this, this.subject)];\n        });\n      });\n    };\n\n    Subscription.prototype.stop = function () {\n      return tslib.__awaiter(this, void 0, void 0, function () {\n        var event;\n        return tslib.__generator(this, function (_a) {\n          event = this.subject.query === exports.QueryParam.NEW_BLOCK ? {\n            query: exports.QueryParam.UNSUBSCRIBE,\n            type: exports.QueryParam.NEW_BLOCK\n          } : {\n            query: exports.QueryParam.UNSUBSCRIBE,\n            type: exports.QueryParam.EVENT_LOG\n          };\n          return [2\n          /*return*/\n          , _super.prototype.unsubscribe.call(this, event)];\n        });\n      });\n    };\n\n    return Subscription;\n  }(WebSocketProvider); //  Copyright (C) 2018 Zilliqa\n\n\n  var NewTxBlockSubscription =\n  /** @class */\n  function (_super) {\n    tslib.__extends(NewTxBlockSubscription, _super);\n\n    function NewTxBlockSubscription(url, options) {\n      return _super.call(this, {\n        query: exports.QueryParam.NEW_BLOCK\n      }, url, options) || this;\n    }\n\n    return NewTxBlockSubscription;\n  }(Subscription); //  Copyright (C) 2018 Zilliqa\n\n\n  var NewEventSubscription =\n  /** @class */\n  function (_super) {\n    tslib.__extends(NewEventSubscription, _super);\n\n    function NewEventSubscription(url, options) {\n      var _this = _super.call(this, {\n        query: exports.QueryParam.EVENT_LOG\n      }, url, options) || this;\n\n      _this.subject = {\n        query: 'EventLog',\n        addresses: options !== undefined ? options.addresses : []\n      };\n      return _this;\n    }\n\n    return NewEventSubscription;\n  }(Subscription); //  Copyright (C) 2018 Zilliqa\n\n\n  var SubscriptionBuilder =\n  /** @class */\n  function () {\n    function SubscriptionBuilder() {}\n\n    SubscriptionBuilder.prototype.buildNewBlockSubscriptions = function (url, options) {\n      return new NewTxBlockSubscription(url, options);\n    };\n\n    SubscriptionBuilder.prototype.buildEventLogSubscriptions = function (url, options) {\n      return new NewEventSubscription(url, options);\n    };\n\n    return SubscriptionBuilder;\n  }(); //  Copyright (C) 2018 Zilliqa\n\n\n  exports.NewTxBlockSubscription = NewTxBlockSubscription;\n  exports.Subscription = Subscription;\n  exports.WebSocketProvider = WebSocketProvider;\n  exports.NewEventSubscription = NewEventSubscription;\n  exports.SubscriptionBuilder = SubscriptionBuilder;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["SocketConnect","SocketState","MessageType","QueryParam","StatusType","url","options","emitter","mitt","handlers","websocket","WebSocketProvider","NewWebSocket","subscriptions","registerEventListeners","window","WebSocket","undefined","protocol","headers","urlObject","URL","authorization","username","password","authToken","Buffer","from","toString","W3CWebsocket","clientConfig","onopen","onConnect","bind","onclose","onClose","onmessage","onMessage","onerror","onError","removeEventListener","SOCKET_MESSAGE","SOCKET_READY","SOCKET_CLOSE","SOCKET_ERROR","SOCKET_CONNECT","type","handler","off","setTimeout","_this","removeAllSocketListeners","event","wasClean","emit","RECONNECT","reconnect","CONNECTING","CLOSE","close","ERROR","subscriptionKeys","Object","keys","length","subscriptionKeys_1","subscriptionKeys_1_1","key","id","parameters","subscribe","_b","CONNECT","msg","data","dataObj","JSON","parse","NOTIFICATION","values","__values","_c","value","query","NEW_BLOCK","EVENT_LOG","UNSUBSCRIBE","Error","SUBSCRIBE_NEW_BLOCK","SUBSCRIBE_EVENT_LOG","on","readyState","Promise","resolve","reject","connecting","send","stringify","error","queryParam","connectHandler","then","catch","offConnectHandler","payload","result","_a","succeed","__extends","subject","_super","Subscription","call","unsubscribe","addresses","SubscriptionBuilder","NewTxBlockSubscription","NewEventSubscription"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/subscriptions/src/types.ts","/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/subscriptions/src/ws.ts","/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/subscriptions/src/subscription.ts","/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/subscriptions/src/newblock.ts","/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/subscriptions/src/newevent.ts","/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/subscriptions/src/builder.ts","/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/@zilliqa-js/subscriptions/src/index.ts"],"sourcesContent":["//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { IClientConfig } from 'websocket';\n\nexport enum SocketConnect {\n  READY = 'ready',\n  CONNECT = 'connect',\n  ERROR = 'error',\n  CLOSE = 'close',\n  RECONNECT = 'reconnect',\n}\n\nexport enum SocketState {\n  SOCKET_CONNECT = 'socket_connect',\n  SOCKET_MESSAGE = 'socket_message',\n  SOCKET_READY = 'socket_ready',\n  SOCKET_CLOSE = 'socket_close',\n  SOCKET_ERROR = 'socket_error',\n}\n\n// message type pushed by server side\nexport enum MessageType {\n  NEW_BLOCK = 'NewBlock',\n  EVENT_LOG = 'EventLog',\n  NOTIFICATION = 'Notification',\n  UNSUBSCRIBE = 'Unsubscribe',\n}\n\n// message type that we can query with to server\nexport enum QueryParam {\n  NEW_BLOCK = 'NewBlock',\n  EVENT_LOG = 'EventLog',\n  UNSUBSCRIBE = 'Unsubscribe',\n}\n\n// indicate that whether we subscribe successfully\nexport enum StatusType {\n  SUBSCRIBE_NEW_BLOCK = 'SubscribeNewBlock',\n  SUBSCRIBE_EVENT_LOG = 'SubscribeEventLog',\n}\n\nexport interface NewBlockQuery {\n  query: string;\n}\n\nexport interface NewEventQuery {\n  query: string;\n  addresses: string[];\n}\n\nexport interface Unsubscribe {\n  query: string;\n  type: string;\n}\n\nexport interface SubscriptionOption {\n  addresses?: string[];\n  clientConfig?: IClientConfig;\n  headers?: {\n    authorization?: string;\n  };\n  protocol?: string;\n  protocols?: string | string[];\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport mitt from 'mitt';\nimport { w3cwebsocket as W3CWebsocket } from 'websocket';\nimport {\n  MessageType,\n  NewBlockQuery,\n  NewEventQuery,\n  QueryParam,\n  SocketConnect,\n  SocketState,\n  StatusType,\n  SubscriptionOption,\n  Unsubscribe,\n} from './types';\n\nexport class WebSocketProvider {\n  public static NewWebSocket(\n    url: string,\n    options?: SubscriptionOption,\n  ): WebSocket | W3CWebsocket {\n    if (typeof window !== 'undefined' && (<any>window).WebSocket) {\n      return new WebSocket(url, options !== undefined ? options.protocol : []);\n    } else {\n      const headers = options !== undefined ? options.headers || {} : undefined;\n      const urlObject = new URL(url);\n      if (\n        headers !== undefined &&\n        !headers.authorization &&\n        urlObject.username &&\n        urlObject.password\n      ) {\n        const authToken = Buffer.from(\n          `${urlObject.username}:${urlObject.password}`,\n        ).toString('base64');\n        headers.authorization = `Basic ${authToken}`;\n      }\n\n      return new W3CWebsocket(\n        url,\n        options !== undefined ? options.protocol : undefined,\n        undefined,\n        headers,\n        undefined,\n        options !== undefined ? options.clientConfig : undefined,\n      );\n    }\n  }\n\n  url: string;\n  options?: SubscriptionOption;\n  emitter: mitt.Emitter;\n  handlers: any = {};\n  websocket: WebSocket | W3CWebsocket;\n\n  subscriptions: any;\n\n  // basically, options is a collection of metadata things like protocol or headers\n  constructor(url: string, options?: SubscriptionOption) {\n    this.url = url;\n    this.options = options;\n    this.emitter = new mitt(this.handlers);\n    this.websocket = WebSocketProvider.NewWebSocket(url, options);\n    this.subscriptions = {};\n    this.registerEventListeners();\n  }\n\n  registerEventListeners() {\n    this.websocket.onopen = this.onConnect.bind(this);\n    this.websocket.onclose = this.onClose.bind(this);\n    this.websocket.onmessage = this.onMessage.bind(this);\n    this.websocket.onerror = this.onError.bind(this);\n  }\n\n  removeAllSocketListeners() {\n    this.removeEventListener(SocketState.SOCKET_MESSAGE);\n    this.removeEventListener(SocketState.SOCKET_READY);\n    this.removeEventListener(SocketState.SOCKET_CLOSE);\n    this.removeEventListener(SocketState.SOCKET_ERROR);\n    this.removeEventListener(SocketState.SOCKET_CONNECT);\n  }\n\n  removeEventListener(type?: string, handler?: mitt.Handler) {\n    if (!type) {\n      this.handlers = {};\n      return;\n    }\n    if (!handler) {\n      delete this.handlers[type];\n    } else {\n      return this.emitter.off(type, handler);\n    }\n  }\n\n  reconnect() {\n    setTimeout(() => {\n      this.removeAllSocketListeners();\n      this.websocket = WebSocketProvider.NewWebSocket(this.url, this.options);\n      this.registerEventListeners();\n    }, 5000);\n  }\n\n  async onClose(event: CloseEvent) {\n    // reconnect\n    if (this.subscriptions !== null && !event.wasClean) {\n      this.emitter.emit(SocketConnect.RECONNECT, event);\n      this.reconnect();\n      return;\n    }\n\n    // normal close\n    if (this.websocket.CONNECTING) {\n      this.emitter.emit(SocketConnect.CLOSE, event);\n      this.websocket.close();\n      return;\n    }\n  }\n\n  onError(event: Event) {\n    this.emitter.emit(SocketConnect.ERROR, event);\n    if (this.websocket.CONNECTING) {\n      this.websocket.close();\n    }\n    return;\n  }\n\n  async onConnect() {\n    if (!this.subscriptions) {\n      this.subscriptions = {};\n    }\n    // retry logic\n    const subscriptionKeys = Object.keys(this.subscriptions);\n    if (subscriptionKeys.length > 0) {\n      for (const key of subscriptionKeys) {\n        const id = key;\n        const parameters = this.subscriptions[key].parameters;\n        delete this.subscriptions[id];\n        await this.subscribe(parameters);\n      }\n    }\n\n    this.emitter.emit(SocketState.SOCKET_CONNECT);\n    this.emitter.emit(SocketConnect.CONNECT);\n  }\n\n  onMessage(msg: MessageEvent) {\n    if (msg.data) {\n      const dataObj = JSON.parse(msg.data);\n      if (dataObj.type === MessageType.NOTIFICATION) {\n        this.emitter.emit(SocketState.SOCKET_MESSAGE, dataObj);\n        for (const value of dataObj.values) {\n          if (value.query === MessageType.NEW_BLOCK) {\n            this.emitter.emit(MessageType.NEW_BLOCK, value);\n          } else if (value.query === MessageType.EVENT_LOG) {\n            this.emitter.emit(MessageType.EVENT_LOG, value);\n          } else if (value.query === MessageType.UNSUBSCRIBE) {\n            this.emitter.emit(MessageType.UNSUBSCRIBE, value);\n          } else {\n            throw new Error('unsupported value type');\n          }\n        }\n      } else if (dataObj.query === QueryParam.NEW_BLOCK) {\n        // subscribe NewBlock succeed\n        this.subscriptions[dataObj.query] = {\n          id: dataObj.query,\n          parameters: dataObj,\n        };\n        this.emitter.emit(StatusType.SUBSCRIBE_NEW_BLOCK, dataObj);\n        this.emitter.emit(SocketConnect.RECONNECT);\n      } else if (dataObj.query === QueryParam.EVENT_LOG) {\n        // subscribe EventLog succeed\n        this.subscriptions[dataObj.query] = {\n          id: dataObj.query,\n          parameters: dataObj,\n        };\n        this.emitter.emit(StatusType.SUBSCRIBE_EVENT_LOG, dataObj);\n        this.emitter.emit(SocketConnect.RECONNECT);\n      } else if (dataObj.query === QueryParam.UNSUBSCRIBE) {\n        this.emitter.emit(MessageType.UNSUBSCRIBE, dataObj);\n      } else {\n        throw new Error('unsupported message type');\n      }\n    } else {\n      throw new Error('message data is empty');\n    }\n  }\n\n  addEventListener(type: string, handler: mitt.Handler) {\n    this.emitter.on(type, handler);\n  }\n\n  connecting() {\n    return this.websocket.readyState === this.websocket.CONNECTING;\n  }\n\n  send(query: NewBlockQuery | NewEventQuery): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (!this.connecting()) {\n        try {\n          this.websocket.send(JSON.stringify(query));\n        } catch (error) {\n          throw error;\n        }\n        let queryParam;\n        if (query.query === QueryParam.NEW_BLOCK) {\n          queryParam = StatusType.SUBSCRIBE_NEW_BLOCK;\n        } else if (query.query === QueryParam.EVENT_LOG) {\n          queryParam = StatusType.SUBSCRIBE_EVENT_LOG;\n        } else {\n          queryParam = query.query;\n        }\n        this.emitter.on(queryParam, (data) => {\n          resolve(data);\n        });\n        this.emitter.on(SocketConnect.ERROR, reject);\n      }\n\n      const connectHandler = () => {\n        this.send(query).then(resolve).catch(reject);\n      };\n\n      const offConnectHandler = () => {\n        this.emitter.off(SocketConnect.CONNECT, connectHandler);\n      };\n      this.emitter.on(SocketConnect.CONNECT, connectHandler);\n      this.emitter.on(SocketConnect.RECONNECT, offConnectHandler);\n    });\n  }\n\n  async subscribe(payload: NewBlockQuery | NewEventQuery): Promise<boolean> {\n    const result = await this.send(payload);\n    return result.query === payload.query;\n  }\n\n  async unsubscribe(payload: Unsubscribe): Promise<boolean> {\n    const result = await this.send(payload);\n    // todo handle separately\n    const succeed = result.query === payload.query;\n    if (succeed) {\n      this.subscriptions[payload.query] = null;\n    }\n    return succeed;\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { WebSocketProvider } from './ws';\nimport {\n  NewBlockQuery,\n  NewEventQuery,\n  QueryParam,\n  SubscriptionOption,\n} from './types';\n\nexport class Subscription extends WebSocketProvider {\n  subject: NewBlockQuery | NewEventQuery;\n\n  constructor(\n    subject: NewBlockQuery | NewEventQuery,\n    url: string,\n    options?: SubscriptionOption,\n  ) {\n    super(url, options);\n    this.subject = subject;\n  }\n\n  async start(): Promise<boolean> {\n    return super.subscribe(this.subject);\n  }\n\n  async stop() {\n    const event =\n      this.subject.query === QueryParam.NEW_BLOCK\n        ? {\n            query: QueryParam.UNSUBSCRIBE,\n            type: QueryParam.NEW_BLOCK,\n          }\n        : { query: QueryParam.UNSUBSCRIBE, type: QueryParam.EVENT_LOG };\n    return super.unsubscribe(event);\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Subscription } from './subscription';\nimport { QueryParam, SubscriptionOption } from './types';\n\nexport class NewTxBlockSubscription extends Subscription {\n  constructor(url: string, options?: SubscriptionOption) {\n    super({ query: QueryParam.NEW_BLOCK }, url, options);\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Subscription } from './subscription';\nimport { QueryParam, SubscriptionOption } from './types';\n\nexport class NewEventSubscription extends Subscription {\n  constructor(url: string, options?: SubscriptionOption) {\n    super({ query: QueryParam.EVENT_LOG }, url, options);\n    this.subject = {\n      query: 'EventLog',\n      addresses: options !== undefined ? options.addresses : [],\n    };\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { NewTxBlockSubscription } from './newblock';\nimport { NewEventSubscription } from './newevent';\nimport { SubscriptionOption } from './types';\n\nexport class SubscriptionBuilder {\n  buildNewBlockSubscriptions(url: string, options?: SubscriptionOption) {\n    return new NewTxBlockSubscription(url, options);\n  }\n\n  buildEventLogSubscriptions(url: string, options?: SubscriptionOption) {\n    return new NewEventSubscription(url, options);\n  }\n}\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of zilliqa-js\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nexport * from './newblock';\nexport * from './subscription';\nexport * from './ws';\nexport * from './types';\nexport * from './newevent';\nexport * from './builder';\n"]},"metadata":{},"sourceType":"script"}