{"ast":null,"code":"'use strict';\n\nconst {\n  Socket\n} = require('net');\n\nconst {\n  Duplex\n} = require('stream');\n\nconst {\n  resolve\n} = require('path');\n\nconst {\n  readFile\n} = require('fs');\n\nconst {\n  execFile,\n  spawn\n} = require('child_process');\n\nconst {\n  isParsedKey,\n  parseKey\n} = require('./protocol/keyParser.js');\n\nconst {\n  makeBufferParser,\n  readUInt32BE,\n  writeUInt32BE,\n  writeUInt32LE\n} = require('./protocol/utils.js');\n\nfunction once(cb) {\n  let called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    cb(...arguments);\n  };\n}\n\nfunction concat(buf1, buf2) {\n  const combined = Buffer.allocUnsafe(buf1.length + buf2.length);\n  buf1.copy(combined, 0);\n  buf2.copy(combined, buf1.length);\n  return combined;\n}\n\nfunction noop() {}\n\nconst EMPTY_BUF = Buffer.alloc(0);\nconst binaryParser = makeBufferParser();\n\nclass BaseAgent {\n  getIdentities(cb) {\n    cb(new Error('Missing getIdentities() implementation'));\n  }\n\n  sign(pubKey, data, options, cb) {\n    if (typeof options === 'function') cb = options;\n    cb(new Error('Missing sign() implementation'));\n  }\n\n}\n\nclass OpenSSHAgent extends BaseAgent {\n  constructor(socketPath) {\n    super();\n    this.socketPath = socketPath;\n  }\n\n  getStream(cb) {\n    cb = once(cb);\n    const sock = new Socket();\n    sock.on('connect', () => {\n      cb(null, sock);\n    });\n    sock.on('close', onFail).on('end', onFail).on('error', onFail);\n    sock.connect(this.socketPath);\n\n    function onFail() {\n      try {\n        sock.destroy();\n      } catch {}\n\n      cb(new Error('Failed to connect to agent'));\n    }\n  }\n\n  getIdentities(cb) {\n    cb = once(cb);\n    this.getStream((err, stream) => {\n      function onFail(err) {\n        if (stream) {\n          try {\n            stream.destroy();\n          } catch {}\n        }\n\n        if (!err) err = new Error('Failed to retrieve identities from agent');\n        cb(err);\n      }\n\n      if (err) return onFail(err);\n      const protocol = new AgentProtocol(true);\n      protocol.on('error', onFail);\n      protocol.pipe(stream).pipe(protocol);\n      stream.on('close', onFail).on('end', onFail).on('error', onFail);\n      protocol.getIdentities((err, keys) => {\n        if (err) return onFail(err);\n\n        try {\n          stream.destroy();\n        } catch {}\n\n        cb(null, keys);\n      });\n    });\n  }\n\n  sign(pubKey, data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = undefined;\n    } else if (typeof options !== 'object' || options === null) {\n      options = undefined;\n    }\n\n    cb = once(cb);\n    this.getStream((err, stream) => {\n      function onFail(err) {\n        if (stream) {\n          try {\n            stream.destroy();\n          } catch {}\n        }\n\n        if (!err) err = new Error('Failed to sign data with agent');\n        cb(err);\n      }\n\n      if (err) return onFail(err);\n      const protocol = new AgentProtocol(true);\n      protocol.on('error', onFail);\n      protocol.pipe(stream).pipe(protocol);\n      stream.on('close', onFail).on('end', onFail).on('error', onFail);\n      protocol.sign(pubKey, data, options, (err, sig) => {\n        if (err) return onFail(err);\n\n        try {\n          stream.destroy();\n        } catch {}\n\n        cb(null, sig);\n      });\n    });\n  }\n\n}\n\nconst PageantAgent = (() => {\n  const RET_ERR_BADARGS = 10;\n  const RET_ERR_UNAVAILABLE = 11;\n  const RET_ERR_NOMAP = 12;\n  const RET_ERR_BINSTDIN = 13;\n  const RET_ERR_BINSTDOUT = 14;\n  const RET_ERR_BADLEN = 15;\n  const EXEPATH = resolve(__dirname, '..', 'util/pagent.exe');\n  const ERROR = {\n    [RET_ERR_BADARGS]: new Error('Invalid pagent.exe arguments'),\n    [RET_ERR_UNAVAILABLE]: new Error('Pageant is not running'),\n    [RET_ERR_NOMAP]: new Error('pagent.exe could not create an mmap'),\n    [RET_ERR_BINSTDIN]: new Error('pagent.exe could not set mode for stdin'),\n    [RET_ERR_BINSTDOUT]: new Error('pagent.exe could not set mode for stdout'),\n    [RET_ERR_BADLEN]: new Error('pagent.exe did not get expected input payload')\n  };\n\n  function destroy(stream) {\n    stream.buffer = null;\n\n    if (stream.proc) {\n      stream.proc.kill();\n      stream.proc = undefined;\n    }\n  }\n\n  class PageantSocket extends Duplex {\n    constructor() {\n      super();\n      this.proc = undefined;\n      this.buffer = null;\n    }\n\n    _read(n) {}\n\n    _write(data, encoding, cb) {\n      if (this.buffer === null) {\n        this.buffer = data;\n      } else {\n        const newBuffer = Buffer.allocUnsafe(this.buffer.length + data.length);\n        this.buffer.copy(newBuffer, 0);\n        data.copy(newBuffer, this.buffer.length);\n        this.buffer = newBuffer;\n      } // Wait for at least all length bytes\n\n\n      if (this.buffer.length < 4) return cb();\n      const len = readUInt32BE(this.buffer, 0); // Make sure we have a full message before querying pageant\n\n      if (this.buffer.length - 4 < len) return cb();\n      data = this.buffer.slice(0, 4 + len);\n      if (this.buffer.length > 4 + len) return cb(new Error('Unexpected multiple agent requests'));\n      this.buffer = null;\n      let error;\n      const proc = this.proc = spawn(EXEPATH, [data.length]);\n      proc.stdout.on('data', data => {\n        this.push(data);\n      });\n      proc.on('error', err => {\n        error = err;\n        cb(error);\n      });\n      proc.on('close', code => {\n        this.proc = undefined;\n\n        if (!error) {\n          if (error = ERROR[code]) return cb(error);\n          cb();\n        }\n      });\n      proc.stdin.end(data);\n    }\n\n    _final(cb) {\n      destroy(this);\n      cb();\n    }\n\n    _destroy(err, cb) {\n      destroy(this);\n      cb();\n    }\n\n  }\n\n  return class PageantAgent extends OpenSSHAgent {\n    getStream(cb) {\n      cb(null, new PageantSocket());\n    }\n\n  };\n})();\n\nconst CygwinAgent = (() => {\n  const RE_CYGWIN_SOCK = /^!<socket >(\\d+) s ([A-Z0-9]{8}-[A-Z0-9]{8}-[A-Z0-9]{8}-[A-Z0-9]{8})/;\n  return class CygwinAgent extends OpenSSHAgent {\n    getStream(cb) {\n      cb = once(cb); // The cygwin ssh-agent connection process looks like this:\n      //   1. Read the \"socket\" as a file to get the underlying TCP port and a\n      //      special \"secret\" that must be sent to the TCP server.\n      //   2. Connect to the server listening on localhost at the TCP port.\n      //   3. Send the \"secret\" to the server.\n      //   4. The server sends back the same \"secret\".\n      //   5. Send three 32-bit integer values of zero. This is ordinarily the\n      //      pid, uid, and gid of this process, but cygwin will actually\n      //      send us the correct values as a response.\n      //   6. The server sends back the pid, uid, gid.\n      //   7. Disconnect.\n      //   8. Repeat steps 2-6, except send the received pid, uid, and gid in\n      //      step 5 instead of zeroes.\n      //   9. Connection is ready to be used.\n\n      let socketPath = this.socketPath;\n      let triedCygpath = false;\n      readFile(socketPath, function readCygsocket(err, data) {\n        if (err) {\n          if (triedCygpath) return cb(new Error('Invalid cygwin unix socket path')); // Try using `cygpath` to convert a possible *nix-style path to the\n          // real Windows path before giving up ...\n\n          execFile('cygpath', ['-w', socketPath], (err, stdout, stderr) => {\n            if (err || stdout.length === 0) return cb(new Error('Invalid cygwin unix socket path'));\n            triedCygpath = true;\n            socketPath = stdout.toString().replace(/[\\r\\n]/g, '');\n            readFile(socketPath, readCygsocket);\n          });\n          return;\n        }\n\n        const m = RE_CYGWIN_SOCK.exec(data.toString('ascii'));\n        if (!m) return cb(new Error('Malformed cygwin unix socket file'));\n        let state;\n        let bc = 0;\n        let isRetrying = false;\n        const inBuf = [];\n        let sock; // Use 0 for pid, uid, and gid to ensure we get an error and also\n        // a valid uid and gid from cygwin so that we don't have to figure it\n        // out ourselves\n\n        let credsBuf = Buffer.alloc(12); // Parse cygwin unix socket file contents\n\n        const port = parseInt(m[1], 10);\n        const secret = m[2].replace(/-/g, '');\n        const secretBuf = Buffer.allocUnsafe(16);\n\n        for (let i = 0, j = 0; j < 32; ++i, j += 2) secretBuf[i] = parseInt(secret.substring(j, j + 2), 16); // Convert to host order (always LE for Windows)\n\n\n        for (let i = 0; i < 16; i += 4) writeUInt32LE(secretBuf, readUInt32BE(secretBuf, i), i);\n\n        tryConnect();\n\n        function _onconnect() {\n          bc = 0;\n          state = 'secret';\n          sock.write(secretBuf);\n        }\n\n        function _ondata(data) {\n          bc += data.length;\n\n          if (state === 'secret') {\n            // The secret we sent is echoed back to us by cygwin, not sure of\n            // the reason for that, but we ignore it nonetheless ...\n            if (bc === 16) {\n              bc = 0;\n              state = 'creds';\n              sock.write(credsBuf);\n            }\n\n            return;\n          }\n\n          if (state === 'creds') {\n            // If this is the first attempt, make sure to gather the valid\n            // uid and gid for our next attempt\n            if (!isRetrying) inBuf.push(data);\n\n            if (bc === 12) {\n              sock.removeListener('connect', _onconnect);\n              sock.removeListener('data', _ondata);\n              sock.removeListener('error', onFail);\n              sock.removeListener('end', onFail);\n              sock.removeListener('close', onFail);\n              if (isRetrying) return cb(null, sock);\n              isRetrying = true;\n              credsBuf = Buffer.concat(inBuf);\n              writeUInt32LE(credsBuf, process.pid, 0);\n              sock.on('error', () => {});\n              sock.destroy();\n              tryConnect();\n            }\n          }\n        }\n\n        function onFail() {\n          cb(new Error('Problem negotiating cygwin unix socket security'));\n        }\n\n        function tryConnect() {\n          sock = new Socket();\n          sock.on('connect', _onconnect);\n          sock.on('data', _ondata);\n          sock.on('error', onFail);\n          sock.on('end', onFail);\n          sock.on('close', onFail);\n          sock.connect(port);\n        }\n      });\n    }\n\n  };\n})(); // Format of `//./pipe/ANYTHING`, with forward slashes and backward slashes\n// being interchangeable\n\n\nconst WINDOWS_PIPE_REGEX = /^[/\\\\][/\\\\]\\.[/\\\\]pipe[/\\\\].+/;\n\nfunction createAgent(path) {\n  if (process.platform === 'win32' && !WINDOWS_PIPE_REGEX.test(path)) {\n    return path === 'pageant' ? new PageantAgent() : new CygwinAgent(path);\n  }\n\n  return new OpenSSHAgent(path);\n}\n\nconst AgentProtocol = (() => {\n  // Client->Server messages\n  const SSH_AGENTC_REQUEST_IDENTITIES = 11;\n  const SSH_AGENTC_SIGN_REQUEST = 13; // const SSH_AGENTC_ADD_IDENTITY = 17;\n  // const SSH_AGENTC_REMOVE_IDENTITY = 18;\n  // const SSH_AGENTC_REMOVE_ALL_IDENTITIES = 19;\n  // const SSH_AGENTC_ADD_SMARTCARD_KEY = 20;\n  // const SSH_AGENTC_REMOVE_SMARTCARD_KEY = 21;\n  // const SSH_AGENTC_LOCK = 22;\n  // const SSH_AGENTC_UNLOCK = 23;\n  // const SSH_AGENTC_ADD_ID_CONSTRAINED = 25;\n  // const SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED = 26;\n  // const SSH_AGENTC_EXTENSION = 27;\n  // Server->Client messages\n\n  const SSH_AGENT_FAILURE = 5; // const SSH_AGENT_SUCCESS = 6;\n\n  const SSH_AGENT_IDENTITIES_ANSWER = 12;\n  const SSH_AGENT_SIGN_RESPONSE = 14; // const SSH_AGENT_EXTENSION_FAILURE = 28;\n  // const SSH_AGENT_CONSTRAIN_LIFETIME = 1;\n  // const SSH_AGENT_CONSTRAIN_CONFIRM = 2;\n  // const SSH_AGENT_CONSTRAIN_EXTENSION = 255;\n\n  const SSH_AGENT_RSA_SHA2_256 = 1 << 1;\n  const SSH_AGENT_RSA_SHA2_512 = 1 << 2;\n  const ROLE_CLIENT = 0;\n  const ROLE_SERVER = 1; // Ensures that responses get sent back in the same order the requests were\n  // received\n\n  function processResponses(protocol) {\n    let ret;\n\n    while (protocol[SYM_REQS].length) {\n      const nextResponse = protocol[SYM_REQS][0][SYM_RESP];\n      if (nextResponse === undefined) break;\n      protocol[SYM_REQS].shift();\n      ret = protocol.push(nextResponse);\n    }\n\n    return ret;\n  }\n\n  const SYM_TYPE = Symbol('Inbound Request Type');\n  const SYM_RESP = Symbol('Inbound Request Response');\n  const SYM_CTX = Symbol('Inbound Request Context');\n\n  class AgentInboundRequest {\n    constructor(type, ctx) {\n      this[SYM_TYPE] = type;\n      this[SYM_RESP] = undefined;\n      this[SYM_CTX] = ctx;\n    }\n\n    hasResponded() {\n      return this[SYM_RESP] !== undefined;\n    }\n\n    getType() {\n      return this[SYM_TYPE];\n    }\n\n    getContext() {\n      return this[SYM_CTX];\n    }\n\n  }\n\n  function respond(protocol, req, data) {\n    req[SYM_RESP] = data;\n    return processResponses(protocol);\n  }\n\n  function cleanup(protocol) {\n    protocol[SYM_BUFFER] = null;\n\n    if (protocol[SYM_MODE] === ROLE_CLIENT) {\n      const reqs = protocol[SYM_REQS];\n\n      if (reqs && reqs.length) {\n        protocol[SYM_REQS] = [];\n\n        for (const req of reqs) req.cb(new Error('No reply from server'));\n      }\n    } // Node streams hackery to make streams do the \"right thing\"\n\n\n    try {\n      protocol.end();\n    } catch {}\n\n    setImmediate(() => {\n      if (!protocol[SYM_ENDED]) protocol.emit('end');\n      if (!protocol[SYM_CLOSED]) protocol.emit('close');\n    });\n  }\n\n  function onClose() {\n    this[SYM_CLOSED] = true;\n  }\n\n  function onEnd() {\n    this[SYM_ENDED] = true;\n  }\n\n  const SYM_REQS = Symbol('Requests');\n  const SYM_MODE = Symbol('Agent Protocol Role');\n  const SYM_BUFFER = Symbol('Agent Protocol Buffer');\n  const SYM_MSGLEN = Symbol('Agent Protocol Current Message Length');\n  const SYM_CLOSED = Symbol('Agent Protocol Closed');\n  const SYM_ENDED = Symbol('Agent Protocol Ended'); // Implementation based on:\n  // https://tools.ietf.org/html/draft-miller-ssh-agent-04\n\n  return class AgentProtocol extends Duplex {\n    /*\n        Notes:\n          - `constraint` type consists of:\n               byte                    constraint_type\n               byte[]                  constraint_data\n            where `constraint_type` is one of:\n              * SSH_AGENT_CONSTRAIN_LIFETIME\n                - `constraint_data` consists of:\n                     uint32                  seconds\n              * SSH_AGENT_CONSTRAIN_CONFIRM\n                - `constraint_data` N/A\n              * SSH_AGENT_CONSTRAIN_EXTENSION\n                - `constraint_data` consists of:\n                     string                  extension name\n                     byte[]                  extension-specific details\n    */\n    constructor(isClient) {\n      super({\n        autoDestroy: true,\n        emitClose: false\n      });\n      this[SYM_MODE] = isClient ? ROLE_CLIENT : ROLE_SERVER;\n      this[SYM_REQS] = [];\n      this[SYM_BUFFER] = null;\n      this[SYM_MSGLEN] = -1;\n      this.once('end', onEnd);\n      this.once('close', onClose);\n    }\n\n    _read(n) {}\n\n    _write(data, encoding, cb) {\n      /*\n          Messages are of the format:\n            uint32                    message length\n            byte                      message type\n            byte[message length - 1]  message contents\n      */\n      if (this[SYM_BUFFER] === null) this[SYM_BUFFER] = data;else this[SYM_BUFFER] = concat(this[SYM_BUFFER], data);\n      let buffer = this[SYM_BUFFER];\n      let bufferLen = buffer.length;\n      let p = 0;\n\n      while (p < bufferLen) {\n        // Wait for length + type\n        if (bufferLen < 5) break;\n        if (this[SYM_MSGLEN] === -1) this[SYM_MSGLEN] = readUInt32BE(buffer, p); // Check if we have the entire message\n\n        if (bufferLen < 4 + this[SYM_MSGLEN]) break;\n        const msgType = buffer[p += 4];\n        ++p;\n\n        if (this[SYM_MODE] === ROLE_CLIENT) {\n          if (this[SYM_REQS].length === 0) return cb(new Error('Received unexpected message from server'));\n          const req = this[SYM_REQS].shift();\n\n          switch (msgType) {\n            case SSH_AGENT_FAILURE:\n              req.cb(new Error('Agent responded with failure'));\n              break;\n\n            case SSH_AGENT_IDENTITIES_ANSWER:\n              {\n                if (req.type !== SSH_AGENTC_REQUEST_IDENTITIES) return cb(new Error('Agent responded with wrong message type'));\n                /*\n                   byte        SSH_AGENT_IDENTITIES_ANSWER\n                   uint32      nkeys\n                   where `nkeys` is 0 or more of:\n                   string      key blob\n                   string      comment\n                */\n\n                binaryParser.init(buffer, p);\n                const numKeys = binaryParser.readUInt32BE();\n\n                if (numKeys === undefined) {\n                  binaryParser.clear();\n                  return cb(new Error('Malformed agent response'));\n                }\n\n                const keys = [];\n\n                for (let i = 0; i < numKeys; ++i) {\n                  let pubKey = binaryParser.readString();\n\n                  if (pubKey === undefined) {\n                    binaryParser.clear();\n                    return cb(new Error('Malformed agent response'));\n                  }\n\n                  const comment = binaryParser.readString(true);\n\n                  if (comment === undefined) {\n                    binaryParser.clear();\n                    return cb(new Error('Malformed agent response'));\n                  }\n\n                  pubKey = parseKey(pubKey); // We continue parsing the packet if we encounter an error\n                  // in case the error is due to the key being an unsupported\n                  // type\n\n                  if (pubKey instanceof Error) continue;\n                  pubKey.comment = pubKey.comment || comment;\n                  keys.push(pubKey);\n                }\n\n                p = binaryParser.pos();\n                binaryParser.clear();\n                req.cb(null, keys);\n                break;\n              }\n\n            case SSH_AGENT_SIGN_RESPONSE:\n              {\n                if (req.type !== SSH_AGENTC_SIGN_REQUEST) return cb(new Error('Agent responded with wrong message type'));\n                /*\n                   byte        SSH_AGENT_SIGN_RESPONSE\n                   string      signature\n                */\n\n                binaryParser.init(buffer, p);\n                let signature = binaryParser.readString();\n                p = binaryParser.pos();\n                binaryParser.clear();\n                if (signature === undefined) return cb(new Error('Malformed agent response')); // We strip the algorithm from OpenSSH's output and assume it's\n                // using the algorithm we specified. This makes it easier on\n                // custom Agent implementations so they don't have to construct\n                // the correct binary format for a (OpenSSH-style) signature.\n                // TODO: verify signature type based on key and options used\n                // during initial sign request\n\n                binaryParser.init(signature, 0);\n                binaryParser.readString(true);\n                signature = binaryParser.readString();\n                binaryParser.clear();\n                if (signature === undefined) return cb(new Error('Malformed OpenSSH signature format'));\n                req.cb(null, signature);\n                break;\n              }\n\n            default:\n              return cb(new Error('Agent responded with unsupported message type'));\n          }\n        } else {\n          switch (msgType) {\n            case SSH_AGENTC_REQUEST_IDENTITIES:\n              {\n                const req = new AgentInboundRequest(msgType);\n                this[SYM_REQS].push(req);\n                /*\n                  byte        SSH_AGENTC_REQUEST_IDENTITIES\n                */\n\n                this.emit('identities', req);\n                break;\n              }\n\n            case SSH_AGENTC_SIGN_REQUEST:\n              {\n                /*\n                  byte        SSH_AGENTC_SIGN_REQUEST\n                  string      key_blob\n                  string      data\n                  uint32      flags\n                */\n                binaryParser.init(buffer, p);\n                let pubKey = binaryParser.readString();\n                const data = binaryParser.readString();\n                const flagsVal = binaryParser.readUInt32BE();\n                p = binaryParser.pos();\n                binaryParser.clear();\n\n                if (flagsVal === undefined) {\n                  const req = new AgentInboundRequest(msgType);\n                  this[SYM_REQS].push(req);\n                  return this.failureReply(req);\n                }\n\n                pubKey = parseKey(pubKey);\n\n                if (pubKey instanceof Error) {\n                  const req = new AgentInboundRequest(msgType);\n                  this[SYM_REQS].push(req);\n                  return this.failureReply(req);\n                }\n\n                const flags = {\n                  hash: undefined\n                };\n                let ctx;\n\n                if (pubKey.type === 'ssh-rsa') {\n                  if (flagsVal & SSH_AGENT_RSA_SHA2_256) {\n                    ctx = 'rsa-sha2-256';\n                    flags.hash = 'sha256';\n                  } else if (flagsVal & SSH_AGENT_RSA_SHA2_512) {\n                    ctx = 'rsa-sha2-512';\n                    flags.hash = 'sha512';\n                  }\n                }\n\n                if (ctx === undefined) ctx = pubKey.type;\n                const req = new AgentInboundRequest(msgType, ctx);\n                this[SYM_REQS].push(req);\n                this.emit('sign', req, pubKey, data, flags);\n                break;\n              }\n\n            default:\n              {\n                const req = new AgentInboundRequest(msgType);\n                this[SYM_REQS].push(req);\n                this.failureReply(req);\n              }\n          }\n        } // Get ready for next message\n\n\n        this[SYM_MSGLEN] = -1;\n\n        if (p === bufferLen) {\n          // Nothing left to process for now\n          this[SYM_BUFFER] = null;\n          break;\n        } else {\n          this[SYM_BUFFER] = buffer = buffer.slice(p);\n          bufferLen = buffer.length;\n          p = 0;\n        }\n      }\n\n      cb();\n    }\n\n    _destroy(err, cb) {\n      cleanup(this);\n      cb();\n    }\n\n    _final(cb) {\n      cleanup(this);\n      cb();\n    } // Client->Server messages =================================================\n\n\n    sign(pubKey, data, options, cb) {\n      if (this[SYM_MODE] !== ROLE_CLIENT) throw new Error('Client-only method called with server role');\n\n      if (typeof options === 'function') {\n        cb = options;\n        options = undefined;\n      } else if (typeof options !== 'object' || options === null) {\n        options = undefined;\n      }\n\n      let flags = 0;\n      pubKey = parseKey(pubKey);\n      if (pubKey instanceof Error) throw new Error('Invalid public key argument');\n\n      if (pubKey.type === 'ssh-rsa' && options) {\n        switch (options.hash) {\n          case 'sha256':\n            flags = SSH_AGENT_RSA_SHA2_256;\n            break;\n\n          case 'sha512':\n            flags = SSH_AGENT_RSA_SHA2_512;\n            break;\n        }\n      }\n\n      pubKey = pubKey.getPublicSSH();\n      /*\n        byte        SSH_AGENTC_SIGN_REQUEST\n        string      key_blob\n        string      data\n        uint32      flags\n      */\n\n      const type = SSH_AGENTC_SIGN_REQUEST;\n      const keyLen = pubKey.length;\n      const dataLen = data.length;\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1 + 4 + keyLen + 4 + dataLen + 4);\n      writeUInt32BE(buf, buf.length - 4, p);\n      buf[p += 4] = type;\n      writeUInt32BE(buf, keyLen, ++p);\n      pubKey.copy(buf, p += 4);\n      writeUInt32BE(buf, dataLen, p += keyLen);\n      data.copy(buf, p += 4);\n      writeUInt32BE(buf, flags, p += dataLen);\n      if (typeof cb !== 'function') cb = noop;\n      this[SYM_REQS].push({\n        type,\n        cb\n      });\n      return this.push(buf);\n    }\n\n    getIdentities(cb) {\n      if (this[SYM_MODE] !== ROLE_CLIENT) throw new Error('Client-only method called with server role');\n      /*\n        byte        SSH_AGENTC_REQUEST_IDENTITIES\n      */\n\n      const type = SSH_AGENTC_REQUEST_IDENTITIES;\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1);\n      writeUInt32BE(buf, buf.length - 4, p);\n      buf[p += 4] = type;\n      if (typeof cb !== 'function') cb = noop;\n      this[SYM_REQS].push({\n        type,\n        cb\n      });\n      return this.push(buf);\n    } // Server->Client messages =================================================\n\n\n    failureReply(req) {\n      if (this[SYM_MODE] !== ROLE_SERVER) throw new Error('Server-only method called with client role');\n      if (!(req instanceof AgentInboundRequest)) throw new Error('Wrong request argument');\n      if (req.hasResponded()) return true;\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1);\n      writeUInt32BE(buf, buf.length - 4, p);\n      buf[p += 4] = SSH_AGENT_FAILURE;\n      return respond(this, req, buf);\n    }\n\n    getIdentitiesReply(req, keys) {\n      if (this[SYM_MODE] !== ROLE_SERVER) throw new Error('Server-only method called with client role');\n      if (!(req instanceof AgentInboundRequest)) throw new Error('Wrong request argument');\n      if (req.hasResponded()) return true;\n      /*\n         byte        SSH_AGENT_IDENTITIES_ANSWER\n         uint32      nkeys\n         where `nkeys` is 0 or more of:\n         string      key blob\n         string      comment\n      */\n\n      if (req.getType() !== SSH_AGENTC_REQUEST_IDENTITIES) throw new Error('Invalid response to request');\n      if (!Array.isArray(keys)) throw new Error('Keys argument must be an array');\n      let totalKeysLen = 4; // Include `nkeys` size\n\n      const newKeys = [];\n\n      for (let i = 0; i < keys.length; ++i) {\n        const entry = keys[i];\n        if (typeof entry !== 'object' || entry === null) throw new Error(`Invalid key entry: ${entry}`);\n        let pubKey;\n        let comment;\n\n        if (isParsedKey(entry)) {\n          pubKey = entry;\n        } else if (isParsedKey(entry.pubKey)) {\n          pubKey = entry.pubKey;\n        } else {\n          if (typeof entry.pubKey !== 'object' || entry.pubKey === null) continue;\n          ({\n            pubKey,\n            comment\n          } = entry.pubKey);\n          pubKey = parseKey(pubKey);\n          if (pubKey instanceof Error) continue; // TODO: add debug output\n        }\n\n        comment = pubKey.comment || comment;\n        pubKey = pubKey.getPublicSSH();\n        totalKeysLen += 4 + pubKey.length;\n        if (comment && typeof comment === 'string') comment = Buffer.from(comment);else if (!Buffer.isBuffer(comment)) comment = EMPTY_BUF;\n        totalKeysLen += 4 + comment.length;\n        newKeys.push({\n          pubKey,\n          comment\n        });\n      }\n\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1 + totalKeysLen);\n      writeUInt32BE(buf, buf.length - 4, p);\n      buf[p += 4] = SSH_AGENT_IDENTITIES_ANSWER;\n      writeUInt32BE(buf, newKeys.length, ++p);\n      p += 4;\n\n      for (let i = 0; i < newKeys.length; ++i) {\n        const {\n          pubKey,\n          comment\n        } = newKeys[i];\n        writeUInt32BE(buf, pubKey.length, p);\n        pubKey.copy(buf, p += 4);\n        writeUInt32BE(buf, comment.length, p += pubKey.length);\n        p += 4;\n\n        if (comment.length) {\n          comment.copy(buf, p);\n          p += comment.length;\n        }\n      }\n\n      return respond(this, req, buf);\n    }\n\n    signReply(req, signature) {\n      if (this[SYM_MODE] !== ROLE_SERVER) throw new Error('Server-only method called with client role');\n      if (!(req instanceof AgentInboundRequest)) throw new Error('Wrong request argument');\n      if (req.hasResponded()) return true;\n      /*\n         byte        SSH_AGENT_SIGN_RESPONSE\n         string      signature\n      */\n\n      if (req.getType() !== SSH_AGENTC_SIGN_REQUEST) throw new Error('Invalid response to request');\n      if (!Buffer.isBuffer(signature)) throw new Error('Signature argument must be a Buffer');\n      if (signature.length === 0) throw new Error('Signature argument must be non-empty');\n      /*\n        OpenSSH agent signatures are encoded as:\n           string    signature format identifier (as specified by the\n                    public key/certificate format)\n          byte[n]   signature blob in format specific encoding.\n            - This is actually a `string` for: rsa, dss, ecdsa, and ed25519\n              types\n      */\n\n      let p = 0;\n      const sigFormat = req.getContext();\n      const sigFormatLen = Buffer.byteLength(sigFormat);\n      const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + sigFormatLen + 4 + signature.length);\n      writeUInt32BE(buf, buf.length - 4, p);\n      buf[p += 4] = SSH_AGENT_SIGN_RESPONSE;\n      writeUInt32BE(buf, 4 + sigFormatLen + 4 + signature.length, ++p);\n      writeUInt32BE(buf, sigFormatLen, p += 4);\n      buf.utf8Write(sigFormat, p += 4, sigFormatLen);\n      writeUInt32BE(buf, signature.length, p += sigFormatLen);\n      signature.copy(buf, p += 4);\n      return respond(this, req, buf);\n    }\n\n  };\n})();\n\nconst SYM_AGENT = Symbol('Agent');\nconst SYM_AGENT_KEYS = Symbol('Agent Keys');\nconst SYM_AGENT_KEYS_IDX = Symbol('Agent Keys Index');\nconst SYM_AGENT_CBS = Symbol('Agent Init Callbacks');\n\nclass AgentContext {\n  constructor(agent) {\n    if (typeof agent === 'string') agent = createAgent(agent);else if (!isAgent(agent)) throw new Error('Invalid agent argument');\n    this[SYM_AGENT] = agent;\n    this[SYM_AGENT_KEYS] = null;\n    this[SYM_AGENT_KEYS_IDX] = -1;\n    this[SYM_AGENT_CBS] = null;\n  }\n\n  init(cb) {\n    var _this = this;\n\n    if (typeof cb !== 'function') cb = noop;\n\n    if (this[SYM_AGENT_KEYS] === null) {\n      if (this[SYM_AGENT_CBS] === null) {\n        this[SYM_AGENT_CBS] = [cb];\n\n        const doCbs = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          process.nextTick(() => {\n            const cbs = _this[SYM_AGENT_CBS];\n            _this[SYM_AGENT_CBS] = null;\n\n            for (const cb of cbs) cb(...args);\n          });\n        };\n\n        this[SYM_AGENT].getIdentities(once((err, keys) => {\n          if (err) return doCbs(err);\n\n          if (!Array.isArray(keys)) {\n            return doCbs(new Error('Agent implementation failed to provide keys'));\n          }\n\n          const newKeys = [];\n\n          for (let key of keys) {\n            key = parseKey(key);\n\n            if (key instanceof Error) {\n              // TODO: add debug output\n              continue;\n            }\n\n            newKeys.push(key);\n          }\n\n          this[SYM_AGENT_KEYS] = newKeys;\n          this[SYM_AGENT_KEYS_IDX] = -1;\n          doCbs();\n        }));\n      } else {\n        this[SYM_AGENT_CBS].push(cb);\n      }\n    } else {\n      process.nextTick(cb);\n    }\n  }\n\n  nextKey() {\n    if (this[SYM_AGENT_KEYS] === null || ++this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return false;\n    }\n\n    return this[SYM_AGENT_KEYS][this[SYM_AGENT_KEYS_IDX]];\n  }\n\n  currentKey() {\n    if (this[SYM_AGENT_KEYS] === null || this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return null;\n    }\n\n    return this[SYM_AGENT_KEYS][this[SYM_AGENT_KEYS_IDX]];\n  }\n\n  pos() {\n    if (this[SYM_AGENT_KEYS] === null || this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return -1;\n    }\n\n    return this[SYM_AGENT_KEYS_IDX];\n  }\n\n  reset() {\n    this[SYM_AGENT_KEYS_IDX] = -1;\n  }\n\n  sign() {\n    this[SYM_AGENT].sign(...arguments);\n  }\n\n}\n\nfunction isAgent(val) {\n  return val instanceof BaseAgent;\n}\n\nmodule.exports = {\n  AgentContext,\n  AgentProtocol,\n  BaseAgent,\n  createAgent,\n  CygwinAgent,\n  isAgent,\n  OpenSSHAgent,\n  PageantAgent\n};","map":{"version":3,"names":["Socket","require","Duplex","resolve","readFile","execFile","spawn","isParsedKey","parseKey","makeBufferParser","readUInt32BE","writeUInt32BE","writeUInt32LE","once","cb","called","concat","buf1","buf2","combined","Buffer","allocUnsafe","length","copy","noop","EMPTY_BUF","alloc","binaryParser","BaseAgent","getIdentities","Error","sign","pubKey","data","options","OpenSSHAgent","constructor","socketPath","getStream","sock","on","onFail","connect","destroy","err","stream","protocol","AgentProtocol","pipe","keys","undefined","sig","PageantAgent","RET_ERR_BADARGS","RET_ERR_UNAVAILABLE","RET_ERR_NOMAP","RET_ERR_BINSTDIN","RET_ERR_BINSTDOUT","RET_ERR_BADLEN","EXEPATH","__dirname","ERROR","buffer","proc","kill","PageantSocket","_read","n","_write","encoding","newBuffer","len","slice","error","stdout","push","code","stdin","end","_final","_destroy","CygwinAgent","RE_CYGWIN_SOCK","triedCygpath","readCygsocket","stderr","toString","replace","m","exec","state","bc","isRetrying","inBuf","credsBuf","port","parseInt","secret","secretBuf","i","j","substring","tryConnect","_onconnect","write","_ondata","removeListener","process","pid","WINDOWS_PIPE_REGEX","createAgent","path","platform","test","SSH_AGENTC_REQUEST_IDENTITIES","SSH_AGENTC_SIGN_REQUEST","SSH_AGENT_FAILURE","SSH_AGENT_IDENTITIES_ANSWER","SSH_AGENT_SIGN_RESPONSE","SSH_AGENT_RSA_SHA2_256","SSH_AGENT_RSA_SHA2_512","ROLE_CLIENT","ROLE_SERVER","processResponses","ret","SYM_REQS","nextResponse","SYM_RESP","shift","SYM_TYPE","Symbol","SYM_CTX","AgentInboundRequest","type","ctx","hasResponded","getType","getContext","respond","req","cleanup","SYM_BUFFER","SYM_MODE","reqs","setImmediate","SYM_ENDED","emit","SYM_CLOSED","onClose","onEnd","SYM_MSGLEN","isClient","autoDestroy","emitClose","bufferLen","p","msgType","init","numKeys","clear","readString","comment","pos","signature","flagsVal","failureReply","flags","hash","getPublicSSH","keyLen","dataLen","buf","getIdentitiesReply","Array","isArray","totalKeysLen","newKeys","entry","from","isBuffer","signReply","sigFormat","sigFormatLen","byteLength","utf8Write","SYM_AGENT","SYM_AGENT_KEYS","SYM_AGENT_KEYS_IDX","SYM_AGENT_CBS","AgentContext","agent","isAgent","doCbs","args","nextTick","cbs","key","nextKey","currentKey","reset","val","module","exports"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/node_modules/ssh2/lib/agent.js"],"sourcesContent":["'use strict';\n\nconst { Socket } = require('net');\nconst { Duplex } = require('stream');\nconst { resolve } = require('path');\nconst { readFile } = require('fs');\nconst { execFile, spawn } = require('child_process');\n\nconst { isParsedKey, parseKey } = require('./protocol/keyParser.js');\n\nconst {\n  makeBufferParser,\n  readUInt32BE,\n  writeUInt32BE,\n  writeUInt32LE,\n} = require('./protocol/utils.js');\n\nfunction once(cb) {\n  let called = false;\n  return (...args) => {\n    if (called)\n      return;\n    called = true;\n    cb(...args);\n  };\n}\n\nfunction concat(buf1, buf2) {\n  const combined = Buffer.allocUnsafe(buf1.length + buf2.length);\n  buf1.copy(combined, 0);\n  buf2.copy(combined, buf1.length);\n  return combined;\n}\n\nfunction noop() {}\n\nconst EMPTY_BUF = Buffer.alloc(0);\n\nconst binaryParser = makeBufferParser();\n\nclass BaseAgent {\n  getIdentities(cb) {\n    cb(new Error('Missing getIdentities() implementation'));\n  }\n  sign(pubKey, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options;\n    cb(new Error('Missing sign() implementation'));\n  }\n}\n\nclass OpenSSHAgent extends BaseAgent {\n  constructor(socketPath) {\n    super();\n    this.socketPath = socketPath;\n  }\n\n  getStream(cb) {\n    cb = once(cb);\n    const sock = new Socket();\n    sock.on('connect', () => {\n      cb(null, sock);\n    });\n    sock.on('close', onFail)\n        .on('end', onFail)\n        .on('error', onFail);\n    sock.connect(this.socketPath);\n\n    function onFail() {\n      try {\n        sock.destroy();\n      } catch {}\n\n      cb(new Error('Failed to connect to agent'));\n    }\n  }\n\n  getIdentities(cb) {\n    cb = once(cb);\n    this.getStream((err, stream) => {\n      function onFail(err) {\n        if (stream) {\n          try {\n            stream.destroy();\n          } catch {}\n        }\n        if (!err)\n          err = new Error('Failed to retrieve identities from agent');\n        cb(err);\n      }\n\n      if (err)\n        return onFail(err);\n\n      const protocol = new AgentProtocol(true);\n      protocol.on('error', onFail);\n      protocol.pipe(stream).pipe(protocol);\n\n      stream.on('close', onFail)\n            .on('end', onFail)\n            .on('error', onFail);\n\n      protocol.getIdentities((err, keys) => {\n        if (err)\n          return onFail(err);\n        try {\n          stream.destroy();\n        } catch {}\n        cb(null, keys);\n      });\n    });\n  }\n\n  sign(pubKey, data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = undefined;\n    } else if (typeof options !== 'object' || options === null) {\n      options = undefined;\n    }\n\n    cb = once(cb);\n    this.getStream((err, stream) => {\n      function onFail(err) {\n        if (stream) {\n          try {\n            stream.destroy();\n          } catch {}\n        }\n        if (!err)\n          err = new Error('Failed to sign data with agent');\n        cb(err);\n      }\n\n      if (err)\n        return onFail(err);\n\n      const protocol = new AgentProtocol(true);\n      protocol.on('error', onFail);\n      protocol.pipe(stream).pipe(protocol);\n\n      stream.on('close', onFail)\n            .on('end', onFail)\n            .on('error', onFail);\n\n      protocol.sign(pubKey, data, options, (err, sig) => {\n        if (err)\n          return onFail(err);\n\n        try {\n          stream.destroy();\n        } catch {}\n\n        cb(null, sig);\n      });\n    });\n  }\n}\n\nconst PageantAgent = (() => {\n  const RET_ERR_BADARGS = 10;\n  const RET_ERR_UNAVAILABLE = 11;\n  const RET_ERR_NOMAP = 12;\n  const RET_ERR_BINSTDIN = 13;\n  const RET_ERR_BINSTDOUT = 14;\n  const RET_ERR_BADLEN = 15;\n\n  const EXEPATH = resolve(__dirname, '..', 'util/pagent.exe');\n  const ERROR = {\n    [RET_ERR_BADARGS]: new Error('Invalid pagent.exe arguments'),\n    [RET_ERR_UNAVAILABLE]: new Error('Pageant is not running'),\n    [RET_ERR_NOMAP]: new Error('pagent.exe could not create an mmap'),\n    [RET_ERR_BINSTDIN]: new Error('pagent.exe could not set mode for stdin'),\n    [RET_ERR_BINSTDOUT]: new Error('pagent.exe could not set mode for stdout'),\n    [RET_ERR_BADLEN]:\n      new Error('pagent.exe did not get expected input payload'),\n  };\n\n  function destroy(stream) {\n    stream.buffer = null;\n    if (stream.proc) {\n      stream.proc.kill();\n      stream.proc = undefined;\n    }\n  }\n\n  class PageantSocket extends Duplex {\n    constructor() {\n      super();\n      this.proc = undefined;\n      this.buffer = null;\n    }\n    _read(n) {}\n    _write(data, encoding, cb) {\n      if (this.buffer === null) {\n        this.buffer = data;\n      } else {\n        const newBuffer = Buffer.allocUnsafe(this.buffer.length + data.length);\n        this.buffer.copy(newBuffer, 0);\n        data.copy(newBuffer, this.buffer.length);\n        this.buffer = newBuffer;\n      }\n      // Wait for at least all length bytes\n      if (this.buffer.length < 4)\n        return cb();\n\n      const len = readUInt32BE(this.buffer, 0);\n      // Make sure we have a full message before querying pageant\n      if ((this.buffer.length - 4) < len)\n        return cb();\n\n      data = this.buffer.slice(0, 4 + len);\n      if (this.buffer.length > (4 + len))\n        return cb(new Error('Unexpected multiple agent requests'));\n      this.buffer = null;\n\n      let error;\n      const proc = this.proc = spawn(EXEPATH, [ data.length ]);\n      proc.stdout.on('data', (data) => {\n        this.push(data);\n      });\n      proc.on('error', (err) => {\n        error = err;\n        cb(error);\n      });\n      proc.on('close', (code) => {\n        this.proc = undefined;\n        if (!error) {\n          if (error = ERROR[code])\n            return cb(error);\n          cb();\n        }\n      });\n      proc.stdin.end(data);\n    }\n    _final(cb) {\n      destroy(this);\n      cb();\n    }\n    _destroy(err, cb) {\n      destroy(this);\n      cb();\n    }\n  }\n\n  return class PageantAgent extends OpenSSHAgent {\n    getStream(cb) {\n      cb(null, new PageantSocket());\n    }\n  };\n})();\n\nconst CygwinAgent = (() => {\n  const RE_CYGWIN_SOCK = /^!<socket >(\\d+) s ([A-Z0-9]{8}-[A-Z0-9]{8}-[A-Z0-9]{8}-[A-Z0-9]{8})/;\n\n  return class CygwinAgent extends OpenSSHAgent {\n    getStream(cb) {\n      cb = once(cb);\n\n      // The cygwin ssh-agent connection process looks like this:\n      //   1. Read the \"socket\" as a file to get the underlying TCP port and a\n      //      special \"secret\" that must be sent to the TCP server.\n      //   2. Connect to the server listening on localhost at the TCP port.\n      //   3. Send the \"secret\" to the server.\n      //   4. The server sends back the same \"secret\".\n      //   5. Send three 32-bit integer values of zero. This is ordinarily the\n      //      pid, uid, and gid of this process, but cygwin will actually\n      //      send us the correct values as a response.\n      //   6. The server sends back the pid, uid, gid.\n      //   7. Disconnect.\n      //   8. Repeat steps 2-6, except send the received pid, uid, and gid in\n      //      step 5 instead of zeroes.\n      //   9. Connection is ready to be used.\n\n      let socketPath = this.socketPath;\n      let triedCygpath = false;\n      readFile(socketPath, function readCygsocket(err, data) {\n        if (err) {\n          if (triedCygpath)\n            return cb(new Error('Invalid cygwin unix socket path'));\n\n          // Try using `cygpath` to convert a possible *nix-style path to the\n          // real Windows path before giving up ...\n          execFile('cygpath', ['-w', socketPath], (err, stdout, stderr) => {\n            if (err || stdout.length === 0)\n              return cb(new Error('Invalid cygwin unix socket path'));\n\n            triedCygpath = true;\n            socketPath = stdout.toString().replace(/[\\r\\n]/g, '');\n            readFile(socketPath, readCygsocket);\n          });\n          return;\n        }\n\n        const m = RE_CYGWIN_SOCK.exec(data.toString('ascii'));\n        if (!m)\n          return cb(new Error('Malformed cygwin unix socket file'));\n\n        let state;\n        let bc = 0;\n        let isRetrying = false;\n        const inBuf = [];\n        let sock;\n\n        // Use 0 for pid, uid, and gid to ensure we get an error and also\n        // a valid uid and gid from cygwin so that we don't have to figure it\n        // out ourselves\n        let credsBuf = Buffer.alloc(12);\n\n        // Parse cygwin unix socket file contents\n        const port = parseInt(m[1], 10);\n        const secret = m[2].replace(/-/g, '');\n        const secretBuf = Buffer.allocUnsafe(16);\n        for (let i = 0, j = 0; j < 32; ++i, j += 2)\n          secretBuf[i] = parseInt(secret.substring(j, j + 2), 16);\n\n        // Convert to host order (always LE for Windows)\n        for (let i = 0; i < 16; i += 4)\n          writeUInt32LE(secretBuf, readUInt32BE(secretBuf, i), i);\n\n        tryConnect();\n\n        function _onconnect() {\n          bc = 0;\n          state = 'secret';\n          sock.write(secretBuf);\n        }\n\n        function _ondata(data) {\n          bc += data.length;\n\n          if (state === 'secret') {\n            // The secret we sent is echoed back to us by cygwin, not sure of\n            // the reason for that, but we ignore it nonetheless ...\n            if (bc === 16) {\n              bc = 0;\n              state = 'creds';\n              sock.write(credsBuf);\n            }\n            return;\n          }\n\n          if (state === 'creds') {\n            // If this is the first attempt, make sure to gather the valid\n            // uid and gid for our next attempt\n            if (!isRetrying)\n              inBuf.push(data);\n\n            if (bc === 12) {\n              sock.removeListener('connect', _onconnect);\n              sock.removeListener('data', _ondata);\n              sock.removeListener('error', onFail);\n              sock.removeListener('end', onFail);\n              sock.removeListener('close', onFail);\n\n              if (isRetrying)\n                return cb(null, sock);\n\n              isRetrying = true;\n              credsBuf = Buffer.concat(inBuf);\n              writeUInt32LE(credsBuf, process.pid, 0);\n              sock.on('error', () => {});\n              sock.destroy();\n\n              tryConnect();\n            }\n          }\n        }\n\n        function onFail() {\n          cb(new Error('Problem negotiating cygwin unix socket security'));\n        }\n\n        function tryConnect() {\n          sock = new Socket();\n          sock.on('connect', _onconnect);\n          sock.on('data', _ondata);\n          sock.on('error', onFail);\n          sock.on('end', onFail);\n          sock.on('close', onFail);\n          sock.connect(port);\n        }\n      });\n    }\n  };\n})();\n\n// Format of `//./pipe/ANYTHING`, with forward slashes and backward slashes\n// being interchangeable\nconst WINDOWS_PIPE_REGEX = /^[/\\\\][/\\\\]\\.[/\\\\]pipe[/\\\\].+/;\nfunction createAgent(path) {\n  if (process.platform === 'win32' && !WINDOWS_PIPE_REGEX.test(path)) {\n    return (path === 'pageant'\n            ? new PageantAgent()\n            : new CygwinAgent(path));\n  }\n  return new OpenSSHAgent(path);\n}\n\nconst AgentProtocol = (() => {\n  // Client->Server messages\n  const SSH_AGENTC_REQUEST_IDENTITIES = 11;\n  const SSH_AGENTC_SIGN_REQUEST = 13;\n  // const SSH_AGENTC_ADD_IDENTITY = 17;\n  // const SSH_AGENTC_REMOVE_IDENTITY = 18;\n  // const SSH_AGENTC_REMOVE_ALL_IDENTITIES = 19;\n  // const SSH_AGENTC_ADD_SMARTCARD_KEY = 20;\n  // const SSH_AGENTC_REMOVE_SMARTCARD_KEY = 21;\n  // const SSH_AGENTC_LOCK = 22;\n  // const SSH_AGENTC_UNLOCK = 23;\n  // const SSH_AGENTC_ADD_ID_CONSTRAINED = 25;\n  // const SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED = 26;\n  // const SSH_AGENTC_EXTENSION = 27;\n  // Server->Client messages\n  const SSH_AGENT_FAILURE = 5;\n  // const SSH_AGENT_SUCCESS = 6;\n  const SSH_AGENT_IDENTITIES_ANSWER = 12;\n  const SSH_AGENT_SIGN_RESPONSE = 14;\n  // const SSH_AGENT_EXTENSION_FAILURE = 28;\n\n  // const SSH_AGENT_CONSTRAIN_LIFETIME = 1;\n  // const SSH_AGENT_CONSTRAIN_CONFIRM = 2;\n  // const SSH_AGENT_CONSTRAIN_EXTENSION = 255;\n\n  const SSH_AGENT_RSA_SHA2_256 = (1 << 1);\n  const SSH_AGENT_RSA_SHA2_512 = (1 << 2);\n\n  const ROLE_CLIENT = 0;\n  const ROLE_SERVER = 1;\n\n  // Ensures that responses get sent back in the same order the requests were\n  // received\n  function processResponses(protocol) {\n    let ret;\n    while (protocol[SYM_REQS].length) {\n      const nextResponse = protocol[SYM_REQS][0][SYM_RESP];\n      if (nextResponse === undefined)\n        break;\n\n      protocol[SYM_REQS].shift();\n      ret = protocol.push(nextResponse);\n    }\n    return ret;\n  }\n\n  const SYM_TYPE = Symbol('Inbound Request Type');\n  const SYM_RESP = Symbol('Inbound Request Response');\n  const SYM_CTX = Symbol('Inbound Request Context');\n  class AgentInboundRequest {\n    constructor(type, ctx) {\n      this[SYM_TYPE] = type;\n      this[SYM_RESP] = undefined;\n      this[SYM_CTX] = ctx;\n    }\n    hasResponded() {\n      return (this[SYM_RESP] !== undefined);\n    }\n    getType() {\n      return this[SYM_TYPE];\n    }\n    getContext() {\n      return this[SYM_CTX];\n    }\n  }\n  function respond(protocol, req, data) {\n    req[SYM_RESP] = data;\n    return processResponses(protocol);\n  }\n\n  function cleanup(protocol) {\n    protocol[SYM_BUFFER] = null;\n    if (protocol[SYM_MODE] === ROLE_CLIENT) {\n      const reqs = protocol[SYM_REQS];\n      if (reqs && reqs.length) {\n        protocol[SYM_REQS] = [];\n        for (const req of reqs)\n          req.cb(new Error('No reply from server'));\n      }\n    }\n\n    // Node streams hackery to make streams do the \"right thing\"\n    try {\n      protocol.end();\n    } catch {}\n    setImmediate(() => {\n      if (!protocol[SYM_ENDED])\n        protocol.emit('end');\n      if (!protocol[SYM_CLOSED])\n        protocol.emit('close');\n    });\n  }\n\n  function onClose() {\n    this[SYM_CLOSED] = true;\n  }\n\n  function onEnd() {\n    this[SYM_ENDED] = true;\n  }\n\n  const SYM_REQS = Symbol('Requests');\n  const SYM_MODE = Symbol('Agent Protocol Role');\n  const SYM_BUFFER = Symbol('Agent Protocol Buffer');\n  const SYM_MSGLEN = Symbol('Agent Protocol Current Message Length');\n  const SYM_CLOSED = Symbol('Agent Protocol Closed');\n  const SYM_ENDED = Symbol('Agent Protocol Ended');\n  // Implementation based on:\n  // https://tools.ietf.org/html/draft-miller-ssh-agent-04\n  return class AgentProtocol extends Duplex {\n    /*\n        Notes:\n          - `constraint` type consists of:\n               byte                    constraint_type\n               byte[]                  constraint_data\n            where `constraint_type` is one of:\n              * SSH_AGENT_CONSTRAIN_LIFETIME\n                - `constraint_data` consists of:\n                     uint32                  seconds\n              * SSH_AGENT_CONSTRAIN_CONFIRM\n                - `constraint_data` N/A\n              * SSH_AGENT_CONSTRAIN_EXTENSION\n                - `constraint_data` consists of:\n                     string                  extension name\n                     byte[]                  extension-specific details\n    */\n\n    constructor(isClient) {\n      super({ autoDestroy: true, emitClose: false });\n      this[SYM_MODE] = (isClient ? ROLE_CLIENT : ROLE_SERVER);\n      this[SYM_REQS] = [];\n      this[SYM_BUFFER] = null;\n      this[SYM_MSGLEN] = -1;\n      this.once('end', onEnd);\n      this.once('close', onClose);\n    }\n\n    _read(n) {}\n\n    _write(data, encoding, cb) {\n      /*\n          Messages are of the format:\n            uint32                    message length\n            byte                      message type\n            byte[message length - 1]  message contents\n      */\n      if (this[SYM_BUFFER] === null)\n        this[SYM_BUFFER] = data;\n      else\n        this[SYM_BUFFER] = concat(this[SYM_BUFFER], data);\n\n      let buffer = this[SYM_BUFFER];\n      let bufferLen = buffer.length;\n\n      let p = 0;\n      while (p < bufferLen) {\n        // Wait for length + type\n        if (bufferLen < 5)\n          break;\n\n        if (this[SYM_MSGLEN] === -1)\n          this[SYM_MSGLEN] = readUInt32BE(buffer, p);\n\n        // Check if we have the entire message\n        if (bufferLen < (4 + this[SYM_MSGLEN]))\n          break;\n\n        const msgType = buffer[p += 4];\n        ++p;\n\n        if (this[SYM_MODE] === ROLE_CLIENT) {\n          if (this[SYM_REQS].length === 0)\n            return cb(new Error('Received unexpected message from server'));\n\n          const req = this[SYM_REQS].shift();\n\n          switch (msgType) {\n            case SSH_AGENT_FAILURE:\n              req.cb(new Error('Agent responded with failure'));\n              break;\n            case SSH_AGENT_IDENTITIES_ANSWER: {\n              if (req.type !== SSH_AGENTC_REQUEST_IDENTITIES)\n                return cb(new Error('Agent responded with wrong message type'));\n\n              /*\n                 byte        SSH_AGENT_IDENTITIES_ANSWER\n                 uint32      nkeys\n\n                where `nkeys` is 0 or more of:\n                 string      key blob\n                 string      comment\n              */\n\n              binaryParser.init(buffer, p);\n\n              const numKeys = binaryParser.readUInt32BE();\n\n              if (numKeys === undefined) {\n                binaryParser.clear();\n                return cb(new Error('Malformed agent response'));\n              }\n\n              const keys = [];\n              for (let i = 0; i < numKeys; ++i) {\n                let pubKey = binaryParser.readString();\n                if (pubKey === undefined) {\n                  binaryParser.clear();\n                  return cb(new Error('Malformed agent response'));\n                }\n\n                const comment = binaryParser.readString(true);\n                if (comment === undefined) {\n                  binaryParser.clear();\n                  return cb(new Error('Malformed agent response'));\n                }\n\n                pubKey = parseKey(pubKey);\n                // We continue parsing the packet if we encounter an error\n                // in case the error is due to the key being an unsupported\n                // type\n                if (pubKey instanceof Error)\n                  continue;\n\n                pubKey.comment = pubKey.comment || comment;\n\n                keys.push(pubKey);\n              }\n              p = binaryParser.pos();\n              binaryParser.clear();\n\n              req.cb(null, keys);\n              break;\n            }\n            case SSH_AGENT_SIGN_RESPONSE: {\n              if (req.type !== SSH_AGENTC_SIGN_REQUEST)\n                return cb(new Error('Agent responded with wrong message type'));\n\n              /*\n                 byte        SSH_AGENT_SIGN_RESPONSE\n                 string      signature\n              */\n\n              binaryParser.init(buffer, p);\n              let signature = binaryParser.readString();\n              p = binaryParser.pos();\n              binaryParser.clear();\n\n              if (signature === undefined)\n                return cb(new Error('Malformed agent response'));\n\n              // We strip the algorithm from OpenSSH's output and assume it's\n              // using the algorithm we specified. This makes it easier on\n              // custom Agent implementations so they don't have to construct\n              // the correct binary format for a (OpenSSH-style) signature.\n\n              // TODO: verify signature type based on key and options used\n              // during initial sign request\n              binaryParser.init(signature, 0);\n              binaryParser.readString(true);\n              signature = binaryParser.readString();\n              binaryParser.clear();\n\n              if (signature === undefined)\n                return cb(new Error('Malformed OpenSSH signature format'));\n\n              req.cb(null, signature);\n              break;\n            }\n            default:\n              return cb(\n                new Error('Agent responded with unsupported message type')\n              );\n          }\n        } else {\n          switch (msgType) {\n            case SSH_AGENTC_REQUEST_IDENTITIES: {\n              const req = new AgentInboundRequest(msgType);\n              this[SYM_REQS].push(req);\n              /*\n                byte        SSH_AGENTC_REQUEST_IDENTITIES\n              */\n              this.emit('identities', req);\n              break;\n            }\n            case SSH_AGENTC_SIGN_REQUEST: {\n              /*\n                byte        SSH_AGENTC_SIGN_REQUEST\n                string      key_blob\n                string      data\n                uint32      flags\n              */\n              binaryParser.init(buffer, p);\n              let pubKey = binaryParser.readString();\n              const data = binaryParser.readString();\n              const flagsVal = binaryParser.readUInt32BE();\n              p = binaryParser.pos();\n              binaryParser.clear();\n              if (flagsVal === undefined) {\n                const req = new AgentInboundRequest(msgType);\n                this[SYM_REQS].push(req);\n                return this.failureReply(req);\n              }\n\n              pubKey = parseKey(pubKey);\n              if (pubKey instanceof Error) {\n                const req = new AgentInboundRequest(msgType);\n                this[SYM_REQS].push(req);\n                return this.failureReply(req);\n              }\n\n              const flags = {\n                hash: undefined,\n              };\n              let ctx;\n              if (pubKey.type === 'ssh-rsa') {\n                if (flagsVal & SSH_AGENT_RSA_SHA2_256) {\n                  ctx = 'rsa-sha2-256';\n                  flags.hash = 'sha256';\n                } else if (flagsVal & SSH_AGENT_RSA_SHA2_512) {\n                  ctx = 'rsa-sha2-512';\n                  flags.hash = 'sha512';\n                }\n              }\n              if (ctx === undefined)\n                ctx = pubKey.type;\n\n              const req = new AgentInboundRequest(msgType, ctx);\n              this[SYM_REQS].push(req);\n\n              this.emit('sign', req, pubKey, data, flags);\n              break;\n            }\n            default: {\n              const req = new AgentInboundRequest(msgType);\n              this[SYM_REQS].push(req);\n              this.failureReply(req);\n            }\n          }\n        }\n\n        // Get ready for next message\n        this[SYM_MSGLEN] = -1;\n        if (p === bufferLen) {\n          // Nothing left to process for now\n          this[SYM_BUFFER] = null;\n          break;\n        } else {\n          this[SYM_BUFFER] = buffer = buffer.slice(p);\n          bufferLen = buffer.length;\n          p = 0;\n        }\n      }\n\n      cb();\n    }\n\n    _destroy(err, cb) {\n      cleanup(this);\n      cb();\n    }\n\n    _final(cb) {\n      cleanup(this);\n      cb();\n    }\n\n    // Client->Server messages =================================================\n    sign(pubKey, data, options, cb) {\n      if (this[SYM_MODE] !== ROLE_CLIENT)\n        throw new Error('Client-only method called with server role');\n\n      if (typeof options === 'function') {\n        cb = options;\n        options = undefined;\n      } else if (typeof options !== 'object' || options === null) {\n        options = undefined;\n      }\n\n      let flags = 0;\n\n      pubKey = parseKey(pubKey);\n      if (pubKey instanceof Error)\n        throw new Error('Invalid public key argument');\n\n      if (pubKey.type === 'ssh-rsa' && options) {\n        switch (options.hash) {\n          case 'sha256':\n            flags = SSH_AGENT_RSA_SHA2_256;\n            break;\n          case 'sha512':\n            flags = SSH_AGENT_RSA_SHA2_512;\n            break;\n        }\n      }\n      pubKey = pubKey.getPublicSSH();\n\n      /*\n        byte        SSH_AGENTC_SIGN_REQUEST\n        string      key_blob\n        string      data\n        uint32      flags\n      */\n      const type = SSH_AGENTC_SIGN_REQUEST;\n      const keyLen = pubKey.length;\n      const dataLen = data.length;\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1 + 4 + keyLen + 4 + dataLen + 4);\n\n      writeUInt32BE(buf, buf.length - 4, p);\n\n      buf[p += 4] = type;\n\n      writeUInt32BE(buf, keyLen, ++p);\n      pubKey.copy(buf, p += 4);\n\n      writeUInt32BE(buf, dataLen, p += keyLen);\n      data.copy(buf, p += 4);\n\n      writeUInt32BE(buf, flags, p += dataLen);\n\n      if (typeof cb !== 'function')\n        cb = noop;\n\n      this[SYM_REQS].push({ type, cb });\n\n      return this.push(buf);\n    }\n    getIdentities(cb) {\n      if (this[SYM_MODE] !== ROLE_CLIENT)\n        throw new Error('Client-only method called with server role');\n\n      /*\n        byte        SSH_AGENTC_REQUEST_IDENTITIES\n      */\n      const type = SSH_AGENTC_REQUEST_IDENTITIES;\n\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1);\n\n      writeUInt32BE(buf, buf.length - 4, p);\n\n      buf[p += 4] = type;\n\n      if (typeof cb !== 'function')\n        cb = noop;\n\n      this[SYM_REQS].push({ type, cb });\n\n      return this.push(buf);\n    }\n\n    // Server->Client messages =================================================\n    failureReply(req) {\n      if (this[SYM_MODE] !== ROLE_SERVER)\n        throw new Error('Server-only method called with client role');\n\n      if (!(req instanceof AgentInboundRequest))\n        throw new Error('Wrong request argument');\n\n      if (req.hasResponded())\n        return true;\n\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1);\n\n      writeUInt32BE(buf, buf.length - 4, p);\n\n      buf[p += 4] = SSH_AGENT_FAILURE;\n\n      return respond(this, req, buf);\n    }\n    getIdentitiesReply(req, keys) {\n      if (this[SYM_MODE] !== ROLE_SERVER)\n        throw new Error('Server-only method called with client role');\n\n      if (!(req instanceof AgentInboundRequest))\n        throw new Error('Wrong request argument');\n\n      if (req.hasResponded())\n        return true;\n\n      /*\n         byte        SSH_AGENT_IDENTITIES_ANSWER\n         uint32      nkeys\n\n        where `nkeys` is 0 or more of:\n         string      key blob\n         string      comment\n      */\n\n      if (req.getType() !== SSH_AGENTC_REQUEST_IDENTITIES)\n        throw new Error('Invalid response to request');\n\n      if (!Array.isArray(keys))\n        throw new Error('Keys argument must be an array');\n\n      let totalKeysLen = 4; // Include `nkeys` size\n\n      const newKeys = [];\n      for (let i = 0; i < keys.length; ++i) {\n        const entry = keys[i];\n        if (typeof entry !== 'object' || entry === null)\n          throw new Error(`Invalid key entry: ${entry}`);\n\n        let pubKey;\n        let comment;\n        if (isParsedKey(entry)) {\n          pubKey = entry;\n        } else if (isParsedKey(entry.pubKey)) {\n          pubKey = entry.pubKey;\n        } else {\n          if (typeof entry.pubKey !== 'object' || entry.pubKey === null)\n            continue;\n          ({ pubKey, comment } = entry.pubKey);\n          pubKey = parseKey(pubKey);\n          if (pubKey instanceof Error)\n            continue; // TODO: add debug output\n        }\n        comment = pubKey.comment || comment;\n        pubKey = pubKey.getPublicSSH();\n\n        totalKeysLen += 4 + pubKey.length;\n\n        if (comment && typeof comment === 'string')\n          comment = Buffer.from(comment);\n        else if (!Buffer.isBuffer(comment))\n          comment = EMPTY_BUF;\n\n        totalKeysLen += 4 + comment.length;\n\n        newKeys.push({ pubKey, comment });\n      }\n\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1 + totalKeysLen);\n\n      writeUInt32BE(buf, buf.length - 4, p);\n\n      buf[p += 4] = SSH_AGENT_IDENTITIES_ANSWER;\n\n      writeUInt32BE(buf, newKeys.length, ++p);\n      p += 4;\n      for (let i = 0; i < newKeys.length; ++i) {\n        const { pubKey, comment } = newKeys[i];\n\n        writeUInt32BE(buf, pubKey.length, p);\n        pubKey.copy(buf, p += 4);\n\n        writeUInt32BE(buf, comment.length, p += pubKey.length);\n        p += 4;\n        if (comment.length) {\n          comment.copy(buf, p);\n          p += comment.length;\n        }\n      }\n\n      return respond(this, req, buf);\n    }\n    signReply(req, signature) {\n      if (this[SYM_MODE] !== ROLE_SERVER)\n        throw new Error('Server-only method called with client role');\n\n      if (!(req instanceof AgentInboundRequest))\n        throw new Error('Wrong request argument');\n\n      if (req.hasResponded())\n        return true;\n\n      /*\n         byte        SSH_AGENT_SIGN_RESPONSE\n         string      signature\n      */\n\n      if (req.getType() !== SSH_AGENTC_SIGN_REQUEST)\n        throw new Error('Invalid response to request');\n\n      if (!Buffer.isBuffer(signature))\n        throw new Error('Signature argument must be a Buffer');\n\n      if (signature.length === 0)\n        throw new Error('Signature argument must be non-empty');\n\n      /*\n        OpenSSH agent signatures are encoded as:\n\n          string    signature format identifier (as specified by the\n                    public key/certificate format)\n          byte[n]   signature blob in format specific encoding.\n            - This is actually a `string` for: rsa, dss, ecdsa, and ed25519\n              types\n      */\n\n      let p = 0;\n      const sigFormat = req.getContext();\n      const sigFormatLen = Buffer.byteLength(sigFormat);\n      const buf = Buffer.allocUnsafe(\n        4 + 1 + 4 + 4 + sigFormatLen + 4 + signature.length\n      );\n\n      writeUInt32BE(buf, buf.length - 4, p);\n\n      buf[p += 4] = SSH_AGENT_SIGN_RESPONSE;\n\n      writeUInt32BE(buf, 4 + sigFormatLen + 4 + signature.length, ++p);\n      writeUInt32BE(buf, sigFormatLen, p += 4);\n      buf.utf8Write(sigFormat, p += 4, sigFormatLen);\n      writeUInt32BE(buf, signature.length, p += sigFormatLen);\n      signature.copy(buf, p += 4);\n\n      return respond(this, req, buf);\n    }\n  };\n})();\n\nconst SYM_AGENT = Symbol('Agent');\nconst SYM_AGENT_KEYS = Symbol('Agent Keys');\nconst SYM_AGENT_KEYS_IDX = Symbol('Agent Keys Index');\nconst SYM_AGENT_CBS = Symbol('Agent Init Callbacks');\nclass AgentContext {\n  constructor(agent) {\n    if (typeof agent === 'string')\n      agent = createAgent(agent);\n    else if (!isAgent(agent))\n      throw new Error('Invalid agent argument');\n    this[SYM_AGENT] = agent;\n    this[SYM_AGENT_KEYS] = null;\n    this[SYM_AGENT_KEYS_IDX] = -1;\n    this[SYM_AGENT_CBS] = null;\n  }\n  init(cb) {\n    if (typeof cb !== 'function')\n      cb = noop;\n\n    if (this[SYM_AGENT_KEYS] === null) {\n      if (this[SYM_AGENT_CBS] === null) {\n        this[SYM_AGENT_CBS] = [cb];\n\n        const doCbs = (...args) => {\n          process.nextTick(() => {\n            const cbs = this[SYM_AGENT_CBS];\n            this[SYM_AGENT_CBS] = null;\n            for (const cb of cbs)\n              cb(...args);\n          });\n        };\n\n        this[SYM_AGENT].getIdentities(once((err, keys) => {\n          if (err)\n            return doCbs(err);\n\n          if (!Array.isArray(keys)) {\n            return doCbs(new Error(\n              'Agent implementation failed to provide keys'\n            ));\n          }\n\n          const newKeys = [];\n          for (let key of keys) {\n            key = parseKey(key);\n            if (key instanceof Error) {\n              // TODO: add debug output\n              continue;\n            }\n            newKeys.push(key);\n          }\n\n          this[SYM_AGENT_KEYS] = newKeys;\n          this[SYM_AGENT_KEYS_IDX] = -1;\n          doCbs();\n        }));\n      } else {\n        this[SYM_AGENT_CBS].push(cb);\n      }\n    } else {\n      process.nextTick(cb);\n    }\n  }\n  nextKey() {\n    if (this[SYM_AGENT_KEYS] === null\n        || ++this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return false;\n    }\n\n    return this[SYM_AGENT_KEYS][this[SYM_AGENT_KEYS_IDX]];\n  }\n  currentKey() {\n    if (this[SYM_AGENT_KEYS] === null\n        || this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return null;\n    }\n\n    return this[SYM_AGENT_KEYS][this[SYM_AGENT_KEYS_IDX]];\n  }\n  pos() {\n    if (this[SYM_AGENT_KEYS] === null\n        || this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return -1;\n    }\n\n    return this[SYM_AGENT_KEYS_IDX];\n  }\n  reset() {\n    this[SYM_AGENT_KEYS_IDX] = -1;\n  }\n\n  sign(...args) {\n    this[SYM_AGENT].sign(...args);\n  }\n}\n\nfunction isAgent(val) {\n  return (val instanceof BaseAgent);\n}\n\nmodule.exports = {\n  AgentContext,\n  AgentProtocol,\n  BaseAgent,\n  createAgent,\n  CygwinAgent,\n  isAgent,\n  OpenSSHAgent,\n  PageantAgent,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}