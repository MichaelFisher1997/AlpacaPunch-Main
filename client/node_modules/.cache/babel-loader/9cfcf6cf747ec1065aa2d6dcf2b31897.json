{"ast":null,"code":"const {\n  BN,\n  Long,\n  bytes,\n  units\n} = require('@zilliqa-js/util');\n\nconst {\n  Zilliqa\n} = require('@zilliqa-js/zilliqa');\n\nconst {\n  toBech32Address,\n  getAddressFromPrivateKey\n} = require('@zilliqa-js/crypto');\n\nconst zilliqa = new Zilliqa('https://dev-api.zilliqa.com'); // These are set by the core protocol, and may vary per-chain.\n// You can manually pack the bytes according to chain id and msg version.\n// For more information: https://apidocs.zilliqa.com/?shell#getnetworkid\n\nconst chainId = 333; // chainId of the developer testnet\n\nconst msgVersion = 1; // current msgVersion\n\nconst VERSION = bytes.pack(chainId, msgVersion); //zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k\n//grabs blockchain\n\nconst blockchain = () => window.zilPay.blockchain;\n/*const status = await connect();\nstatus === window.zilPay.wallet.isConnect;*/\n//Connect\n\n\nconst Connect = () => {\n  window.zilPay.wallet.connect().then(function (retVal) {\n    console.log(retVal);\n\n    if (retVal) {\n      console.log(window.zilPay.wallet.defaultAccount.bech32);\n    }\n  });\n};\n\n_c = Connect;\n\nconst payable = amount => {\n  toAdder = 'zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k';\n  payableAmount = amount;\n  zilliqa.wallet.addByPrivateKey(privateKey);\n  const address = getAddressFromPrivateKey(privateKey);\n  zilliqa.tra;\n};\n/*const Payable = () => {\n    const zilliqa = window.zilPay;\n    const utils = zilPay.utils;\n    \n    const amount = utils.units.toQa(10, utils.units.Units.Zil); // 10 zil\n    const gasPrice = utils.units.toQa('1000', utils.units.Units.Li);\n    const txParams = zilliqa.transactions.new({ // Create params for our trasnaction.\n      toAddr: 'zil1wl38cwww2u3g8wzgutxlxtxwwc0rf7jf27zace',\n      amount: amount,\n      gasPrice: gasPrice\n    });\n    try {\n        const txResult = await zilliqa.blockchain.createTransaction(txParams);\n    } catch (err) {\n        // if user rejected this transaction or other problem.\n    }\n }*/\n\n\nexport { Connect, blockchain }; //zilliqa, privateKey, bytes, units, recipientAddress, sendingAmount are defined in the codebase before\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect\");","map":{"version":3,"names":["BN","Long","bytes","units","require","Zilliqa","toBech32Address","getAddressFromPrivateKey","zilliqa","chainId","msgVersion","VERSION","pack","blockchain","window","zilPay","Connect","wallet","connect","then","retVal","console","log","defaultAccount","bech32","payable","amount","toAdder","payableAmount","addByPrivateKey","privateKey","address","tra"],"sources":["/home/micqdf/AlpacaPunchTests/maintest/test1/client/src/components/Navbar/ZilAssets/zilFunctions.js"],"sourcesContent":["\nconst { BN, Long, bytes, units } = require('@zilliqa-js/util');\nconst { Zilliqa } = require('@zilliqa-js/zilliqa');\nconst {\n  toBech32Address,\n  getAddressFromPrivateKey,\n} = require('@zilliqa-js/crypto');\n\nconst zilliqa = new Zilliqa('https://dev-api.zilliqa.com');\n\n// These are set by the core protocol, and may vary per-chain.\n// You can manually pack the bytes according to chain id and msg version.\n// For more information: https://apidocs.zilliqa.com/?shell#getnetworkid\n\nconst chainId = 333; // chainId of the developer testnet\nconst msgVersion = 1; // current msgVersion\nconst VERSION = bytes.pack(chainId, msgVersion);\n\n//zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k\n\n//grabs blockchain\n const blockchain = () => window.zilPay.blockchain;\n\n \n /*const status = await connect();\n status === window.zilPay.wallet.isConnect;*/\n \n\n\n  //Connect\n  const Connect = () => {\n    window.zilPay.wallet.connect().then(function(retVal){\n      console.log(retVal)\n      if(retVal){console.log(window.zilPay.wallet.defaultAccount.bech32)}\n      \n     })\n  }\n\n  const payable = (amount) => {\n    toAdder = 'zil1eff6xw0czq44wkdf70zru7l3ftp53tp77qt32k';\n    payableAmount = amount;\n    zilliqa.wallet.addByPrivateKey(privateKey);\n    const address = getAddressFromPrivateKey(privateKey)\n\n    zilliqa.tra\n\n  }\n\n  \n  /*const Payable = () => {\n      const zilliqa = window.zilPay;\n      const utils = zilPay.utils;\n      \n      const amount = utils.units.toQa(10, utils.units.Units.Zil); // 10 zil\n      const gasPrice = utils.units.toQa('1000', utils.units.Units.Li);\n      const txParams = zilliqa.transactions.new({ // Create params for our trasnaction.\n        toAddr: 'zil1wl38cwww2u3g8wzgutxlxtxwwc0rf7jf27zace',\n        amount: amount,\n        gasPrice: gasPrice\n      });\n      try {\n          const txResult = await zilliqa.blockchain.createTransaction(txParams);\n      } catch (err) {\n          // if user rejected this transaction or other problem.\n      }\n\n  }*/\n\n\n  \n\n\n  \n\n\n    export {Connect, blockchain};\n\n    //zilliqa, privateKey, bytes, units, recipientAddress, sendingAmount are defined in the codebase before\n\n"],"mappings":"AACA,MAAM;EAAEA,EAAF;EAAMC,IAAN;EAAYC,KAAZ;EAAmBC;AAAnB,IAA6BC,OAAO,CAAC,kBAAD,CAA1C;;AACA,MAAM;EAAEC;AAAF,IAAcD,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAM;EACJE,eADI;EAEJC;AAFI,IAGFH,OAAO,CAAC,oBAAD,CAHX;;AAKA,MAAMI,OAAO,GAAG,IAAIH,OAAJ,CAAY,6BAAZ,CAAhB,C,CAEA;AACA;AACA;;AAEA,MAAMI,OAAO,GAAG,GAAhB,C,CAAqB;;AACrB,MAAMC,UAAU,GAAG,CAAnB,C,CAAsB;;AACtB,MAAMC,OAAO,GAAGT,KAAK,CAACU,IAAN,CAAWH,OAAX,EAAoBC,UAApB,CAAhB,C,CAEA;AAEA;;AACC,MAAMG,UAAU,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcF,UAAvC;AAGA;AACD;AAIE;;;AACA,MAAMG,OAAO,GAAG,MAAM;EACpBF,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBC,OAArB,GAA+BC,IAA/B,CAAoC,UAASC,MAAT,EAAgB;IAClDC,OAAO,CAACC,GAAR,CAAYF,MAAZ;;IACA,IAAGA,MAAH,EAAU;MAACC,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACC,MAAP,CAAcE,MAAd,CAAqBM,cAArB,CAAoCC,MAAhD;IAAwD;EAEnE,CAJF;AAKD,CAND;;KAAMR,O;;AAQN,MAAMS,OAAO,GAAIC,MAAD,IAAY;EAC1BC,OAAO,GAAG,4CAAV;EACAC,aAAa,GAAGF,MAAhB;EACAlB,OAAO,CAACS,MAAR,CAAeY,eAAf,CAA+BC,UAA/B;EACA,MAAMC,OAAO,GAAGxB,wBAAwB,CAACuB,UAAD,CAAxC;EAEAtB,OAAO,CAACwB,GAAR;AAED,CARD;AAWA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAUI,SAAQhB,OAAR,EAAiBH,UAAjB,G,CAEA"},"metadata":{},"sourceType":"module"}